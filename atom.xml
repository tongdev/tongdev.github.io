<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hellotong</title>
  <icon>https://www.gravatar.com/avatar/48dc4539567cef376fc850a6961ee097</icon>
  <subtitle>Hello tong, hello world!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="hellotong.ml/"/>
  <updated>2018-11-22T11:42:42.026Z</updated>
  <id>hellotong.ml/</id>
  
  <author>
    <name>Tong</name>
    <email>1336572985@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hibernate (二)</title>
    <link href="hellotong.ml/hibernate02/"/>
    <id>hellotong.ml/hibernate02/</id>
    <published>2018-11-22T11:27:11.009Z</published>
    <updated>2018-11-22T11:42:42.026Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hibernate-持久化类的编写规则"><a href="#Hibernate-持久化类的编写规则" class="headerlink" title="Hibernate 持久化类的编写规则"></a>Hibernate 持久化类的编写规则</h2><h3 id="什么是持久化类"><a href="#什么是持久化类" class="headerlink" title="什么是持久化类"></a>什么是持久化类</h3><p>持久化：就是将内存中的数据永久的存储在关系型数据库中。</p><p>持久化类：指的是一个 Java 类与数据库表建立了映射关系，那么这么类就称之为持久化类。</p><h3 id="持久化类的编写规则"><a href="#持久化类的编写规则" class="headerlink" title="持久化类的编写规则"></a>持久化类的编写规则</h3><ol><li>首先编写持久化类需要提供无参的构造方法，在 Java 中默认构造即无参构造。</li><li>持久化类的属性需要私有，对私有的属性提供公共的 set 和 get 方法。</li><li>持久化类的属性要尽量使用包装类的类型。举个例子，假如使用基本数据类型 int，它默认值是 0，那么如果把这个 0 存到数据库中，就会产生歧义，到底是用户存的 0 呢，还是用户没有设置呢，它的默认值就是 0 呀。如果使用包装类 Integer 的话就可以避免发生这种情况，我们一起来分析一下，它的默认值是 null，如果用户存一个数，数据库中就会显示相应的数值，如果用户没有设置值，那么数据库中就会显示为 null，一目了然，歧义就解决了。</li><li>持久化类要有一个唯一标识 OID 与表的主键对应。</li><li>持久化类尽量不要使用 final 进行修饰。因为 Hibernate 中有延时加载优化机制，这个机制中会产生代理对象，会继承持久化类产生子类，从而产生代理对象，如果用 final 修饰的话，这个优化机制就失效了。</li></ol><h2 id="Hibernate-主键生成策略"><a href="#Hibernate-主键生成策略" class="headerlink" title="Hibernate 主键生成策略"></a>Hibernate 主键生成策略</h2><h3 id="主键类型"><a href="#主键类型" class="headerlink" title="主键类型"></a>主键类型</h3><p>自然主键：把具有业务含义的字段作为主键，称为自然主键。</p><p>代理主键：把不具备业务含义的字段作为主键，称之为代理主键，通常使用 id 来作为主键。</p><h3 id="Hibernate-的主键生成策略"><a href="#Hibernate-的主键生成策略" class="headerlink" title="Hibernate 的主键生成策略"></a>Hibernate 的主键生成策略</h3><blockquote><p>在实际开发中一般是不允许用户手动设置主键的，一般是手动编写程序进行设置，再交给数据库，在 Hibernate 中为了减少程序代码的编写，它提供了很多中的主键生成策略。</p></blockquote><ol><li>increment：hibernate 中提供的自增长机制，适用 short、int、long 类型的主键。线程不安全，建议在单线程中使用。</li><li>identity：适用 short、int、long 类型的主键，采用的是数据库底层的自动增长机制。适用于有自动增长机制的数据库，如 MySQL 等。Oracle 是没有自动增长的。</li><li>sequence：适用 short、int、long 类型的主键，采用的是序列化的方式，支持 Oracle 等。</li><li>uuid：适用于字符串类型的主键。使用 hibernate 中的随机方式生成字符串主键，类似于 Java 给提供的 UUID 对象。</li><li>native：根据本地机制进行自动调整，可以在 identity 和 sequence 之间进行自动切换。</li><li>assigned：hibernate 放弃对主键的管理，需要手动编写程序或用户自己设置。</li><li>foreign：外部主键。</li></ol><h2 id="Hibernate-的持久化的三种状态"><a href="#Hibernate-的持久化的三种状态" class="headerlink" title="Hibernate 的持久化的三种状态"></a>Hibernate 的持久化的三种状态</h2><p>Hibernate 为了更好的管理持久化类，将持久化类分成了三种状态。分别是瞬时态、持久态、脱管态或游离态。</p><h3 id="瞬时态"><a href="#瞬时态" class="headerlink" title="瞬时态"></a>瞬时态</h3><p>此状态对象没有唯一标识 OID，没有被 session 管理，称为是瞬时态对象。</p><h3 id="持久态"><a href="#持久态" class="headerlink" title="持久态"></a>持久态</h3><p><strong>此状态对象有唯一标识 OID，且被 session 管理，称为持久态对象。</strong></p><h3 id="脱管态"><a href="#脱管态" class="headerlink" title="脱管态"></a>脱管态</h3><p>此状态对象有唯一标识 OID，但没有被 session 管理，称为脱管态对象。</p><h3 id="如何区分三种状态对象"><a href="#如何区分三种状态对象" class="headerlink" title="如何区分三种状态对象"></a>如何区分三种状态对象</h3><p>通过一段代码解释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    Customer customer = <span class="keyword">new</span> Customer();    <span class="comment">// 瞬时态对象，没有唯一标识 OID，没有被 session 管理</span></span><br><span class="line">    customer.setCust_name(<span class="string">"李四"</span>);</span><br><span class="line">    Serializable id = session.save(customer);<span class="comment">// 持久态对象，有唯一标识 OID，被 session 管理</span></span><br><span class="line"></span><br><span class="line">    transaction.commit();</span><br><span class="line">    session.close();  <span class="comment">// 脱管态对象，有唯一标识 OID，没有被 session 管理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三种状态对象的转换"><a href="#三种状态对象的转换" class="headerlink" title="三种状态对象的转换"></a>三种状态对象的转换</h3><p><img src="http://pifu006nk.bkt.clouddn.com/blog/20181122/IaarSkIsG8j2.jpg?imageslim" alt="mark"></p><h4 id="瞬时态对象"><a href="#瞬时态对象" class="headerlink" title="瞬时态对象"></a>瞬时态对象</h4><p>获得：<code>Customer customer = new Customer()</code>，简单来说就是 new</p><p>状态转换：</p><ul><li><p>瞬时态 –&gt; 持久态</p><p>调用保存方法<code>save(Object obj)</code>、调用保存或更新方法<code>saveOrUpdate(Object obj)</code></p></li><li><p>瞬时态 –&gt; 脱管态</p><p>设置 id，<code>customer.setCust_id()</code></p></li></ul><h4 id="持久态对象"><a href="#持久态对象" class="headerlink" title="持久态对象"></a>持久态对象</h4><p>获得：可通过查询方法<code>get()、load()</code>获得</p><p>状态转换：</p><ul><li><p>持久态 –&gt; 瞬时态</p><p>调用删除方法<code>delete()</code></p></li><li><p>持久态 –&gt; 脱管态</p><p>session 关闭<code>close()</code>、清除所有<code>clear()</code>、清除某一个对象<code>evict(Object obj)</code></p></li></ul><h4 id="脱管态对象"><a href="#脱管态对象" class="headerlink" title="脱管态对象"></a>脱管态对象</h4><p>获得：两部曲，先 new 对象，然后设置 id。<code>Customer customer = new Customer(); customer.setCust_id(1l);</code></p><p>状态转换：</p><ul><li><p>脱管态 –&gt; 瞬时态</p><p>将该对象的 id 置为 null 即可</p></li><li><p>脱管态 –&gt; 持久态</p><p><code>update()</code>、<code>saveOrUpdate()</code></p></li></ul><h3 id="持久态对象的特性"><a href="#持久态对象的特性" class="headerlink" title="持久态对象的特性"></a>持久态对象的特性</h3><p>持久态对象能够自动更新数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得持久化对象，持久化对象可以自动更新数据库</span></span><br><span class="line">    Customer customer = session.get(Customer.class, <span class="number">1l</span>);</span><br><span class="line">    customer.setCust_name(<span class="string">"哈哈"</span>);</span><br><span class="line">    <span class="comment">// session.update(customer);</span></span><br><span class="line">    transaction.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>持久态对象之所以有自动更新数据库的特性是依赖于 Hibernate 的一级缓存。</p><h2 id="Hibernate-的一级缓存"><a href="#Hibernate-的一级缓存" class="headerlink" title="Hibernate 的一级缓存"></a>Hibernate 的一级缓存</h2><h3 id="什么是缓存"><a href="#什么是缓存" class="headerlink" title="什么是缓存"></a>什么是缓存</h3><p>缓存：是一种优化方式，将数据存到内存当中，使用时从缓存中获取，减少直接向永久性数据源的读取次数，提高应用的性能。</p><h3 id="Hibernate-的一级缓存-1"><a href="#Hibernate-的一级缓存-1" class="headerlink" title="Hibernate 的一级缓存"></a>Hibernate 的一级缓存</h3><blockquote><p>Hibernate 中提供的优化手段：缓存、抓取策略。Hibernate 中提供了两种缓存机制：一级缓存、二级缓存。</p></blockquote><p>Hibernate 的一级缓存，也称为是 Session 级别的缓存，一级缓存的生命周期与 Session 对象一致，其实一级缓存就是由 Session 对象中的一系列 Java 集合构成的。<strong>一级缓存是自带的且不可卸载的。</strong></p><p>Hibernate 的二级缓存是基于 SessionFactory 级别的缓存，是需要配置的，通常二级缓存使用 Redis 替代较多。</p><h3 id="证明一级缓存的存在"><a href="#证明一级缓存的存在" class="headerlink" title="证明一级缓存的存在"></a>证明一级缓存的存在</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 证明一级缓存的存在</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Customer customer1 = session.get(Customer.class, 1l);// 发送 SQL，从数据库中查询之后放到一级缓存中</span></span><br><span class="line"><span class="comment">    System.out.println(customer1);</span></span><br><span class="line"><span class="comment">    Customer customer2 = session.get(Customer.class, 1l);// 不发送 SQL，直接从一级缓存中取</span></span><br><span class="line"><span class="comment">    System.out.println(customer2);</span></span><br><span class="line"><span class="comment">    System.out.println(customer1 == customer2);*/</span></span><br><span class="line"></span><br><span class="line">    Customer customer1 = <span class="keyword">new</span> Customer();</span><br><span class="line">    customer1.setCust_name(<span class="string">"张三"</span>);</span><br><span class="line">    Serializable id = session.save(customer1);</span><br><span class="line">    System.out.println(id);</span><br><span class="line"></span><br><span class="line">    Customer customer2 = session.get(Customer.class, id);<span class="comment">// 不发送 SQL，save() 之后，会将保存的对象放到缓存中</span></span><br><span class="line">    System.out.println(customer2);</span><br><span class="line">    System.out.println(customer1 == customer2);</span><br><span class="line"></span><br><span class="line">    transaction.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Hibernate-的一级缓存结构"><a href="#Hibernate-的一级缓存结构" class="headerlink" title="Hibernate 的一级缓存结构"></a>Hibernate 的一级缓存结构</h3><blockquote><p>一级缓存内部存在一个特殊的区域：快照区</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 测试一级缓存的快照区</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    Customer customer1 = session.get(Customer.class, <span class="number">1l</span>);<span class="comment">// 发送 SQL 语句，同时放到一级缓存和快照区</span></span><br><span class="line">    customer1.setCust_name(<span class="string">"李四"</span>);</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hibernate-的事务管理"><a href="#Hibernate-的事务管理" class="headerlink" title="Hibernate 的事务管理"></a>Hibernate 的事务管理</h2><h3 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h3><p>事务指的是逻辑上的一组操作，组成这组操作的各个逻辑单元要么全部成功，要么全部失败。</p><h3 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h3><ol><li>原子性：代表事务不可分割。</li><li>一致性：代表事务执行前后，数据完整性保持一致。</li><li>隔离性：代表一个事务在执行过程中，不应该受到其他事务的干扰。</li><li>持久性：代表事务执行结束后，数据会持久保存到数据库中。</li></ol><h3 id="如果不考虑隔离性，引发的安全性问题"><a href="#如果不考虑隔离性，引发的安全性问题" class="headerlink" title="如果不考虑隔离性，引发的安全性问题"></a>如果不考虑隔离性，引发的安全性问题</h3><h4 id="读问题"><a href="#读问题" class="headerlink" title="读问题"></a>读问题</h4><ul><li>脏读： 一个事务读到另一个事务未提交的数据。</li><li>不可重复读：一个事务读到另一个事务已提交的 update 更新数据，导致在前一个事务中多次查询结果不一致。</li><li>虚读：一个事务读到另一个事务已提交的 insert 添加数据，导致在前一个事务中多次查询结果不一致。</li></ul><h4 id="写问题"><a href="#写问题" class="headerlink" title="写问题"></a>写问题</h4><ul><li>引发两类丢失更新</li></ul><h4 id="读写问题的解决"><a href="#读写问题的解决" class="headerlink" title="读写问题的解决"></a>读写问题的解决</h4><p>通过设置事务的更新级别控制</p><ul><li>Read uncommited：不能解决任何问题。</li><li>Read commited：可以解决脏读，但是不可重复读和虚读可能发生。（Oracle 的默认事务隔离级别）</li><li>Repeatable read：可以解决脏读和不可重复读，但是虚读可能发生。（MySQL 的默认事务隔离级别）</li><li>Serializable：可以解决所有的读问题，它属于死锁，安全性高，但效率低。</li></ul><h3 id="Hibernate-中设置事务隔离级别"><a href="#Hibernate-中设置事务隔离级别" class="headerlink" title="Hibernate 中设置事务隔离级别"></a>Hibernate 中设置事务隔离级别</h3><p>可以在 hibernate 的核心配置文件中设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置事务隔离级别 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 4 为 MySql 的默认级别 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.isolation"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="线程绑定-Session"><a href="#线程绑定-Session" class="headerlink" title="线程绑定 Session"></a>线程绑定 Session</h2><blockquote><p>将 Session 与当前线程绑定方便事务控制</p></blockquote><h3 id="改写使用-Hibernate-操作数据库的工具类"><a href="#改写使用-Hibernate-操作数据库的工具类" class="headerlink" title="改写使用 Hibernate 操作数据库的工具类"></a>改写使用 Hibernate 操作数据库的工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 Configuration 对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Configuration cfg;</span><br><span class="line"><span class="comment">// 创建 SessionFactory 对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> SessionFactory sf;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给两个变量赋值</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">cfg = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line">sf = cfg.buildSessionFactory();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对外提供公共的方法获得连接对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">openSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sf.openSession();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 Session 与当前线程绑定</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">getCurrentSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sf.getCurrentSession();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在-Hibernate-核心配置文件中配置"><a href="#在-Hibernate-核心配置文件中配置" class="headerlink" title="在 Hibernate 核心配置文件中配置"></a>在 Hibernate 核心配置文件中配置</h3><blockquote><p>要使用 getCurrentSession() 方法，需要在 hibernate 核心配置文件中配置后才能使用</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置 session 绑定当前线程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Hibernate-的其他-API"><a href="#Hibernate-的其他-API" class="headerlink" title="Hibernate 的其他 API"></a>Hibernate 的其他 API</h2><h3 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h3><p>Query 代表面向对象的一个 Hibernate 查询操作，通常使用 session.createQuery() 方法接收一个 HQL（Hibernate Query Language）语句，然后进行查询操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// Query</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 简单查询/查询所有</span></span><br><span class="line">    <span class="comment">// 通过 Session 获得 Query 接口，HQL：hibernate query language</span></span><br><span class="line">    <span class="comment">/* String hql = "from Customer";</span></span><br><span class="line"><span class="comment">Query query = session.createQuery(hql);*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 条件查询</span></span><br><span class="line">    <span class="comment">/*String hql = "from Customer where cust_name like ?";</span></span><br><span class="line"><span class="comment">Query query = session.createQuery(hql);</span></span><br><span class="line"><span class="comment">// 设置条件</span></span><br><span class="line"><span class="comment">query.setParameter(0, "张%");// 在 hibernate 中 0 代表第一个问号*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分页查询</span></span><br><span class="line">    String hql = <span class="string">"from Customer"</span>;</span><br><span class="line">    Query query = session.createQuery(hql);</span><br><span class="line">    <span class="comment">// 设置分页</span></span><br><span class="line">    query.setFirstResult(<span class="number">0</span>);<span class="comment">// 从第一条数据开始</span></span><br><span class="line">    query.setMaxResults(<span class="number">3</span>);<span class="comment">// 每页显示 3 条数据</span></span><br><span class="line"></span><br><span class="line">    List&lt;Customer&gt; list = query.list();</span><br><span class="line">    <span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Criteria"><a href="#Criteria" class="headerlink" title="Criteria"></a>Criteria</h3><p>Criteria 是一个完全面向对象，可扩展的条件查询 API，Criteria 查询又称为 QBC（Query By Criteria）查询。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// Criteria</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 Session 获得 Criteria 接口</span></span><br><span class="line">    Criteria criteria = session.createCriteria(Customer.class);</span><br><span class="line">    <span class="comment">// 简单查询/查询所有</span></span><br><span class="line">    <span class="comment">// List&lt;Customer&gt; list = criteria.list();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 条件查询</span></span><br><span class="line">    <span class="comment">/*criteria.add(Restrictions.like("cust_name", "张", MatchMode.START));// 匹配名字开头是张的数据</span></span><br><span class="line"><span class="comment">List&lt;Customer&gt; list = criteria.list();*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分页查询</span></span><br><span class="line">    criteria.setFirstResult(<span class="number">3</span>);</span><br><span class="line">    criteria.setMaxResults(<span class="number">3</span>);</span><br><span class="line">    List&lt;Customer&gt; list = criteria.list();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SQLQuery"><a href="#SQLQuery" class="headerlink" title="SQLQuery"></a>SQLQuery</h3><p>SQLQuery 这个接口用于接收一个 sql 语句进行查询。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// SQLQuery</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 简单查询/查询所有</span></span><br><span class="line">    <span class="comment">/*String sql = "select * from cst_customer";</span></span><br><span class="line"><span class="comment">SQLQuery query = session.createSQLQuery(sql);*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 条件查询</span></span><br><span class="line">    <span class="comment">/*String sql = "select * from cst_customer where cust_name=?";</span></span><br><span class="line"><span class="comment">SQLQuery query = session.createSQLQuery(sql);</span></span><br><span class="line"><span class="comment">// 设置条件</span></span><br><span class="line"><span class="comment">query.setParameter(0, "哈哈");*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分页查询</span></span><br><span class="line">    String sql = <span class="string">"select * from cst_customer limit ?, ?"</span>;</span><br><span class="line">    SQLQuery query = session.createSQLQuery(sql);</span><br><span class="line">    <span class="comment">// 设置分页</span></span><br><span class="line">    query.setParameter(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">    query.setParameter(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Object[]&gt; list = query.list();</span><br><span class="line">    <span class="keyword">for</span> (Object[] objects : list) &#123;</span><br><span class="line">        System.out.println(Arrays.toString(objects));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><strong>将 Session 绑定在线程上后，当线程执行完毕之后，Session 对象也会自动关闭，不需要手动 <code>session.close()</code> 关闭，否则会报错。</strong> </p>]]></content>
    
    <summary type="html">
    
      Hibernate 基础篇（二），我们一起学习 Hibernate。
    
    </summary>
    
      <category term="Java" scheme="hellotong.ml/categories/Java/"/>
    
    
      <category term="Java" scheme="hellotong.ml/tags/Java/"/>
    
      <category term="Hibernate" scheme="hellotong.ml/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate (一)</title>
    <link href="hellotong.ml/hibernate01/"/>
    <id>hellotong.ml/hibernate01/</id>
    <published>2018-11-21T13:42:23.612Z</published>
    <updated>2018-11-22T11:29:08.249Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hibernate-框架概述"><a href="#Hibernate-框架概述" class="headerlink" title="Hibernate 框架概述"></a>Hibernate 框架概述</h2><ul><li><p>什么是框架</p><p>框架是软件的半成品，已经完成了部分功能，可以提交开发效率。</p></li><li><p>什么是 Hibernate</p><p>简单地说，Hibernate 就是持久层（dao 层） 的 ORM 框架。</p></li><li><p>什么是 ORM</p><p>ORM：全称 Object Relational Mapping，意思即对象关系映射，指的是将一个 Java 中的实体类与关系型数据库中的表建立一种映射关系，从而操作对象就可以操作数据库中的表。</p></li></ul><h2 id="Hibernate-的入门"><a href="#Hibernate-的入门" class="headerlink" title="Hibernate 的入门"></a>Hibernate 的入门</h2><ol><li><p>下载 Hibernate 开发环境并解压到本地</p><p><a href="https://sourceforge.net/projects/hibernate/files/hibernate-orm/5.0.7.Final/" target="_blank" rel="noopener">下载地址</a></p></li><li><p>创建一个项目，引入相应的 jar 包</p><ul><li>数据库驱动包</li><li>Hibernate 开发的必须 jar 包</li><li>Hibernate 的日志记录包</li></ul><p><img src="http://pifu006nk.bkt.clouddn.com/blog/20181121/6gMcolIF6d5p.png?imageslim" alt="mark"></p></li><li><p>在数据库中创建表</p><p>建表 SQL 语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`cst_customer`</span> (</span><br><span class="line">  <span class="string">`cust_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'客户编号(主键)'</span>,</span><br><span class="line">  <span class="string">`cust_name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户名称(公司名称)'</span>,</span><br><span class="line">  <span class="string">`cust_source`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户信息来源'</span>,</span><br><span class="line">  <span class="string">`cust_industry`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户所属行业'</span>,</span><br><span class="line">  <span class="string">`cust_level`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户级别'</span>,</span><br><span class="line">  <span class="string">`cust_phone`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'固定电话'</span>,</span><br><span class="line">  <span class="string">`cust_mobile`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'移动电话'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`cust_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure></li><li><p>创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Long cust_id;</span><br><span class="line"><span class="keyword">private</span> String cust_name;</span><br><span class="line"><span class="keyword">private</span> String cust_source;</span><br><span class="line"><span class="keyword">private</span> String cust_industry;</span><br><span class="line"><span class="keyword">private</span> String cust_level;</span><br><span class="line"><span class="keyword">private</span> String cust_phone;</span><br><span class="line"><span class="keyword">private</span> String cust_mobile;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getCust_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cust_id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_id</span><span class="params">(Long cust_id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cust_id = cust_id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCust_name</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cust_name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_name</span><span class="params">(String cust_name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cust_name = cust_name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCust_source</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cust_source;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_source</span><span class="params">(String cust_source)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cust_source = cust_source;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCust_industry</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cust_industry;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_industry</span><span class="params">(String cust_industry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cust_industry = cust_industry;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCust_level</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cust_level;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_level</span><span class="params">(String cust_level)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cust_level = cust_level;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCust_phone</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cust_phone;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_phone</span><span class="params">(String cust_phone)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cust_phone = cust_phone;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCust_mobile</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cust_mobile;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_mobile</span><span class="params">(String cust_mobile)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cust_mobile = cust_mobile;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Customer [cust_id="</span> + cust_id + <span class="string">", cust_name="</span> + cust_name + <span class="string">", cust_source="</span> + cust_source</span><br><span class="line">+ <span class="string">", cust_industry="</span> + cust_industry + <span class="string">", cust_level="</span> + cust_level + <span class="string">", cust_phone="</span> + cust_phone</span><br><span class="line">+ <span class="string">", cust_mobile="</span> + cust_mobile + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>创建映射</strong></p><p>映射通过 XML 的配置文件完成，配置文件可以任意命名，但通常使用统一命名规范（类名.hbm.xml）[hbm : hibernate mapping]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC </span><br><span class="line">    &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</span><br><span class="line">    &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-mapping&gt;</span><br><span class="line">&lt;!-- 建立类与表的映射 --&gt;</span><br><span class="line">&lt;class name=&quot;com.test.hibernate.demo1.Customer&quot; table=&quot;cst_customer&quot;&gt;</span><br><span class="line">&lt;!-- 建立类中的属性与表中的主键对应 --&gt;</span><br><span class="line">&lt;id name=&quot;cust_id&quot; column=&quot;cust_id&quot; &gt;</span><br><span class="line">&lt;generator class=&quot;native&quot;/&gt;</span><br><span class="line">&lt;/id&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 建立类中的普通的属性和表的字段的对应 --&gt;</span><br><span class="line">&lt;property name=&quot;cust_name&quot; column=&quot;cust_name&quot; length=&quot;32&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;cust_source&quot; column=&quot;cust_source&quot; length=&quot;32&quot;/&gt;</span><br><span class="line">&lt;property name=&quot;cust_industry&quot; column=&quot;cust_industry&quot;/&gt;</span><br><span class="line">&lt;property name=&quot;cust_level&quot; column=&quot;cust_level&quot;/&gt;</span><br><span class="line">&lt;property name=&quot;cust_phone&quot; column=&quot;cust_phone&quot;/&gt;</span><br><span class="line">&lt;property name=&quot;cust_mobile&quot; column=&quot;cust_mobile&quot;/&gt;</span><br><span class="line">&lt;/class&gt;</span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure></li><li><p>创建一个 Hibernate 核心配置文件</p><p>Hibernate 核心配置文件的名称：hibernate.cfg.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-configuration PUBLIC</span><br><span class="line">&quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;</span><br><span class="line">&quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-configuration&gt;</span><br><span class="line">&lt;session-factory&gt;</span><br><span class="line">&lt;!-- 1. 连接数据库的基本参数 --&gt;</span><br><span class="line">&lt;property name=&quot;hibernate.connection.driver_class&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;hibernate.connection.url&quot;&gt;jdbc:mysql:///hibernate_day01&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;hibernate.connection.username&quot;&gt;root&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;hibernate.connection.password&quot;&gt;1&lt;/property&gt;</span><br><span class="line">&lt;!-- 配置Hibernate的方言 --&gt;</span><br><span class="line">&lt;property name=&quot;hibernate.dialect&quot;&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 2. 可选配置 --&gt;</span><br><span class="line">&lt;!-- 打印SQL --&gt;</span><br><span class="line">&lt;property name=&quot;hibernate.show_sql&quot;&gt;true&lt;/property&gt;</span><br><span class="line">&lt;!-- 格式化SQL --&gt;</span><br><span class="line">&lt;property name=&quot;hibernate.format_sql&quot;&gt;true&lt;/property&gt;</span><br><span class="line">&lt;!-- 自动创建表 --&gt;</span><br><span class="line">&lt;property name=&quot;hibernate.hbm2ddl.auto&quot;&gt;update&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 3. 导入映射文件 --&gt;</span><br><span class="line">&lt;mapping resource=&quot;com/test/hibernate/demo1/Customer.hbm.xml&quot; /&gt;</span><br><span class="line">&lt;/session-factory&gt;</span><br><span class="line">&lt;/hibernate-configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写测试代码</p><p>保存客户 java 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hibernate 的入门案例 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tong</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Transaction;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.cfg.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 保存客户的案例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 1.加载 Hibernate 核心配置文件</span></span><br><span class="line">Configuration configuration = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line"><span class="comment">// 手动加载映射</span></span><br><span class="line"><span class="comment">//configuration.addResource("com/test/hibernate/demo1/Customer.hbm.xml");</span></span><br><span class="line"><span class="comment">// 2.创建一个 SessionFactory 对象，类似于 JDBC 的连接池</span></span><br><span class="line">SessionFactory SessionFactory = configuration.buildSessionFactory();</span><br><span class="line"><span class="comment">// 3.通过 SessionFactory 对象获得一个 Session 对象，相当于 JDBC 中的 Connection</span></span><br><span class="line">Session session = SessionFactory.openSession();</span><br><span class="line"><span class="comment">// 4.手动开启事务</span></span><br><span class="line">Transaction transaction = session.beginTransaction();</span><br><span class="line"><span class="comment">// 5.编写代码</span></span><br><span class="line"></span><br><span class="line">Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">customer.setCust_name(<span class="string">"赵六"</span>);</span><br><span class="line">session.save(customer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.提交事务</span></span><br><span class="line">transaction.commit();</span><br><span class="line"><span class="comment">// 7.释放资源</span></span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据库表</p><p><img src="http://pifu006nk.bkt.clouddn.com/blog/20181121/liNCVivGbQyl.png?imageslim" alt="mark"></p></li></ol><h2 id="Hibernate-的常见配置"><a href="#Hibernate-的常见配置" class="headerlink" title="Hibernate 的常见配置"></a>Hibernate 的常见配置</h2><h3 id="XML-提示配置"><a href="#XML-提示配置" class="headerlink" title="XML 提示配置"></a>XML 提示配置</h3><p><img src="http://pifu006nk.bkt.clouddn.com/blog/20181121/SBqVUrQ3qYoT.png?imageslim" alt="mark"></p><p><img src="http://pifu006nk.bkt.clouddn.com/blog/20181121/ok7u0rK5SSqs.png?imageslim" alt="mark"></p><h3 id="Hibernate-映射文件的配置"><a href="#Hibernate-映射文件的配置" class="headerlink" title="Hibernate 映射文件的配置"></a>Hibernate 映射文件的配置</h3><ul><li><p>class 标签的配置</p><p>class 标签用来建立类与表的映射关系</p><p>常用属性：</p><p>​    name：类的全路径</p><p>​    table：表名（类名与表名一致时，table 可以省略）</p></li><li><p>id 标签的配置</p><p>id 标签用来建立类中属性与表中主键的对应关系</p><p>常用属性：</p><p>​    name：类中的属性名</p><p>​    column：表中的字段名（类中的属性名与表中的字段名一致时，column 属性可以省略）</p><p>​    length：长度</p><p>​    type：类型</p></li><li><p>property 标签的配置</p><p>property 标签用来建立类中的普通属性与表中字段的对应关系</p><p>常用属性：</p><p>​    name：类中的属性名</p><p>​    column：表中的字段名</p><p>​    length：长度</p><p>​    type：类型</p><p>​    not-null：设置非空</p><p>​    unique：设置唯一</p></li></ul><h3 id="Hibernate-的核心配置"><a href="#Hibernate-的核心配置" class="headerlink" title="Hibernate 的核心配置"></a>Hibernate 的核心配置</h3><blockquote><p>可以分为三部分</p></blockquote><ul><li><p>必须的配置</p><ul><li><p>连接数据库的基本参数</p><p> 驱动类、url 路径、用户名、密码</p></li><li><p>方言</p></li></ul></li><li><p>可选的配置</p><ul><li><p>显示 SQL：hibernate.show_sql</p></li><li><p>格式化 SQL：hibernate.format_sql</p></li><li><p>自动建表：hibernate.hbm2ddl.auto</p><ul><li><p>取值</p><p>none：不使用 hibernate 的自动建表</p><p>ceate：如果数据库中有表，删除原有表，重新创建，如果没有表，则新建表</p><p>create-drop：如果数据库中有表，删除原有表新建表，执行操作后再删除表。如果没有表，则新建表，使用完后再删除该表</p><p>update：如果数据库中有表，使用原有表（update 会该表表结构），如果没有表，则创建新表</p><p>validate：如果数据库中没有表，不会创建表，如果有表，则会校验映射和表结构</p></li></ul></li></ul></li><li><p>映射文件的引入</p><p>引入映射文件的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;mapping resource=&quot;com/test/hibernate/demo1/Customer.hbm.xml&quot; /&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Hibernate-的核心-API"><a href="#Hibernate-的核心-API" class="headerlink" title="Hibernate 的核心 API"></a>Hibernate 的核心 API</h2><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><ul><li><p>Hibernate 的配置对象</p></li><li><p>作用</p><ol><li><p>加载核心配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Configuration configuration = <span class="keyword">new</span> Configuration().configure();</span><br></pre></td></tr></table></figure></li><li><p>可手动加载映射文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configuration.addResource(<span class="string">"com/test/hibernate/demo1/Customer.hbm.xml"</span>);</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="SessionFactory"><a href="#SessionFactory" class="headerlink" title="SessionFactory"></a>SessionFactory</h3><ul><li><p>Session 工厂，SessionFactory 内部维护了 Hibernate 的连接池和 Hibernate 的二级缓存，是线程安全的对象，其次一个项目创建一个对象即可。</p></li><li><p>配置连接池</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置C3P0连接池 --&gt;</span><br><span class="line">&lt;property name=&quot;connection.provider_class&quot;&gt;org.hibernate.connection.C3P0ConnectionProvider&lt;/property&gt;</span><br><span class="line">&lt;!--在连接池中可用的数据库连接的最少数目 --&gt;</span><br><span class="line">&lt;property name=&quot;c3p0.min_size&quot;&gt;5&lt;/property&gt;</span><br><span class="line">&lt;!--在连接池中所有数据库连接的最大数目  --&gt;</span><br><span class="line">&lt;property name=&quot;c3p0.max_size&quot;&gt;20&lt;/property&gt;</span><br><span class="line">&lt;!--设定数据库连接的过期时间,以秒为单位,</span><br><span class="line">如果连接池中的某个数据库连接处于空闲状态的时间超过了timeout时间,就会从连接池中清除 --&gt;</span><br><span class="line">&lt;property name=&quot;c3p0.timeout&quot;&gt;120&lt;/property&gt;</span><br><span class="line">&lt;!--每3000秒检查所有连接池中的空闲连接 以秒为单位--&gt;</span><br><span class="line">&lt;property name=&quot;c3p0.idle_test_period&quot;&gt;3000&lt;/property&gt;</span><br></pre></td></tr></table></figure></li><li><p>抽取 Hibernate 工具类，方便使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hibernate 的工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tong</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 Configuration 对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Configuration cfg;</span><br><span class="line"><span class="comment">// 创建 SessionFactory 对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> SessionFactory sf;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给两个变量赋值</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">cfg = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line">sf = cfg.buildSessionFactory();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对外提供公共的方法获得连接对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">openSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sf.openSession();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><ul><li><p>Session 代表的是 Hibernate 与数据库的连接对象，是与数据库交互的桥梁，不同于 HttpSession，它是线程不安全的，所以一般在局部使用。</p></li><li><p>Session 中的 API</p><ul><li><p>保存方法</p><p><code>session.save(Object)</code>返回值是一个<code>Serializable id</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 保存客户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获得 Session 连接对象</span></span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    <span class="comment">// 手动开启事务</span></span><br><span class="line">    Transaction transaction = session.beginTransaction();</span><br><span class="line">    <span class="comment">// 编写代码</span></span><br><span class="line">    Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">    customer.setCust_name(<span class="string">"张三"</span>);</span><br><span class="line">    session.save(customer);</span><br><span class="line">    <span class="comment">// 提交事务</span></span><br><span class="line">    transaction.commit();</span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查询方法</p><p><code>T get(Class c, Serializable id)</code></p><p><code>T load(Class c, Serialzable id)</code></p><p><strong>get 方法和 load 方法的区别？</strong></p><ul><li><p>get 方法</p><p>get 方法是立即加载，当执行到 get() 方法这行代码时，会立即发送 SQL 语句去查询</p><p>查询之后是真实对象本身</p><p>当查询一个不存在的对象时，返回的结果是 null</p></li><li><p>load 方法</p><p>load 方法是延时加载（懒加载），当执行到 load() 方法这行代码时，不会发送 SQL 语句去查询，直到调用该对象时才会发送 SQL 语句去查询</p><p>查询之后是通过第三方 javassist 技术处理的代理对象</p><p>当查询一个不存在的对象时，会抛出 ObjectNotFoundException 异常</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 查询客户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 get 方法查询</span></span><br><span class="line">    Customer customer = session.get(Customer.class, <span class="number">1L</span>);</span><br><span class="line">    System.out.println(customer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 load 方法查询</span></span><br><span class="line">    <span class="comment">/*Customer customer = session.load(Customer.class, 2l);</span></span><br><span class="line"><span class="comment">System.out.println(customer);*/</span></span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改方法</p><p><code>void update(Object obj)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 修改操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 直接创建对象修改</span></span><br><span class="line">    <span class="comment">/*Customer customer = new Customer();</span></span><br><span class="line"><span class="comment">customer.setCust_id(1l);</span></span><br><span class="line"><span class="comment">customer.setCust_name("王五");;</span></span><br><span class="line"><span class="comment">session.update(customer);*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先查询，再修改(推荐)</span></span><br><span class="line">    Customer customer = session.get(Customer.class, <span class="number">1l</span>);</span><br><span class="line">    customer.setCust_name(<span class="string">"赵六"</span>);</span><br><span class="line">    session.update(customer);</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除方法</p><p><code>void delete(Object obj)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 删除操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建对象直接删除</span></span><br><span class="line">    <span class="comment">/*Customer customer = new Customer();</span></span><br><span class="line"><span class="comment">customer.setCust_id(2l);</span></span><br><span class="line"><span class="comment">session.delete(customer);*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先查询，再删除(推荐) -- 多表关系时可以实现级联删除</span></span><br><span class="line">    Customer customer = session.get(Customer.class, <span class="number">3l</span>);</span><br><span class="line">    session.delete(customer);</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>保存或更新</p><p><code>void saveOrUpdate(Object obj)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 保存或更新</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表中没有此数据，保存</span></span><br><span class="line">    <span class="comment">/*Customer customer = new Customer();</span></span><br><span class="line"><span class="comment">customer.setCust_name("赵二");</span></span><br><span class="line"><span class="comment">session.saveOrUpdate(customer);*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表中有此数据，更新</span></span><br><span class="line">    Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">    customer.setCust_id(<span class="number">2l</span>);</span><br><span class="line">    customer.setCust_name(<span class="string">"天一"</span>);</span><br><span class="line">    session.saveOrUpdate(customer);</span><br><span class="line">    tx.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查询所有</p><p>通过 HQL createQuery 和 SQL createSQLQuery 查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收 HQL，hibernate query language</span></span><br><span class="line">    <span class="comment">/*Query query = session.createQuery("from Customer");</span></span><br><span class="line"><span class="comment">List&lt;Customer&gt; list = query.list();</span></span><br><span class="line"><span class="comment">for (Customer customer : list) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(customer.toString());</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收 SQL</span></span><br><span class="line">    SQLQuery query = session.createSQLQuery(<span class="string">"select * from cst_customer"</span>);</span><br><span class="line">    List&lt;Object[]&gt; list = query.list();</span><br><span class="line">    <span class="keyword">for</span> (Object[] objects : list) &#123;</span><br><span class="line">        <span class="comment">// 对象数组以字符串形式打印输出</span></span><br><span class="line">        System.out.println(Arrays.toString(objects));</span><br><span class="line">    &#125;</span><br><span class="line">    tx.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Transaction </p><ul><li><p>事务对象</p></li><li><p>常用 API</p><p><code>commit():提交事务</code></p><p><code>rollback():回滚事务</code></p></li></ul></li></ul><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><p>通过以上知识的学习能够独立搭建 Hibernate 的开发环境完成 CRUD 操作即可。</p>]]></content>
    
    <summary type="html">
    
      Hibernate 基础篇（一），我们一起学习 Hibernate。
    
    </summary>
    
      <category term="Java" scheme="hellotong.ml/categories/Java/"/>
    
    
      <category term="Java" scheme="hellotong.ml/tags/Java/"/>
    
      <category term="Hibernate" scheme="hellotong.ml/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>my first blog</title>
    <link href="hellotong.ml/my-first-blog/"/>
    <id>hellotong.ml/my-first-blog/</id>
    <published>2018-11-19T04:17:55.000Z</published>
    <updated>2018-11-22T11:25:52.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="This-is-my-first-blog"><a href="#This-is-my-first-blog" class="headerlink" title="This is my first blog."></a>This is my first blog.</h1><p>Hello, everyone!</p><blockquote><p>This is my first blog!</p></blockquote><p><code>java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hibernate 的其他 API</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tong</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateDemo5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// Query</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单查询/查询所有</span></span><br><span class="line"><span class="comment">// 通过 Session 获得 Query 接口，HQL：hibernate query language</span></span><br><span class="line"><span class="comment">/* String hql = "from Customer";</span></span><br><span class="line"><span class="comment">Query query = session.createQuery(hql);*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件查询</span></span><br><span class="line"><span class="comment">/*String hql = "from Customer where cust_name like ?";</span></span><br><span class="line"><span class="comment">Query query = session.createQuery(hql);</span></span><br><span class="line"><span class="comment">// 设置条件</span></span><br><span class="line"><span class="comment">query.setParameter(0, "张%");// 在 hibernate 中 0 代表第一个问号*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分页查询</span></span><br><span class="line">String hql = <span class="string">"from Customer"</span>;</span><br><span class="line">Query query = session.createQuery(hql);</span><br><span class="line"><span class="comment">// 设置分页</span></span><br><span class="line">query.setFirstResult(<span class="number">0</span>);<span class="comment">// 从第一条数据开始</span></span><br><span class="line">query.setMaxResults(<span class="number">3</span>);<span class="comment">// 每页显示 3 条数据</span></span><br><span class="line"></span><br><span class="line">List&lt;Customer&gt; list = query.list();</span><br><span class="line"><span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">System.out.println(customer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tx.commit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// Criteria</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 Session 获得 Criteria 接口</span></span><br><span class="line">Criteria criteria = session.createCriteria(Customer.class);</span><br><span class="line"><span class="comment">// 简单查询/查询所有</span></span><br><span class="line"><span class="comment">// List&lt;Customer&gt; list = criteria.list();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件查询</span></span><br><span class="line"><span class="comment">/*criteria.add(Restrictions.like("cust_name", "张", MatchMode.START));// 匹配名字开头是张的数据</span></span><br><span class="line"><span class="comment">List&lt;Customer&gt; list = criteria.list();*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分页查询</span></span><br><span class="line">criteria.setFirstResult(<span class="number">3</span>);</span><br><span class="line">criteria.setMaxResults(<span class="number">3</span>);</span><br><span class="line">List&lt;Customer&gt; list = criteria.list();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">System.out.println(customer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tx.commit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// SQLQuery</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单查询/查询所有</span></span><br><span class="line"><span class="comment">/*String sql = "select * from cst_customer";</span></span><br><span class="line"><span class="comment">SQLQuery query = session.createSQLQuery(sql);*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件查询</span></span><br><span class="line"><span class="comment">/*String sql = "select * from cst_customer where cust_name=?";</span></span><br><span class="line"><span class="comment">SQLQuery query = session.createSQLQuery(sql);</span></span><br><span class="line"><span class="comment">// 设置条件</span></span><br><span class="line"><span class="comment">query.setParameter(0, "哈哈");*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分页查询</span></span><br><span class="line">String sql = <span class="string">"select * from cst_customer limit ?, ?"</span>;</span><br><span class="line">SQLQuery query = session.createSQLQuery(sql);</span><br><span class="line"><span class="comment">// 设置分页</span></span><br><span class="line">query.setParameter(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">query.setParameter(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">List&lt;Object[]&gt; list = query.list();</span><br><span class="line"><span class="keyword">for</span> (Object[] objects : list) &#123;</span><br><span class="line">System.out.println(Arrays.toString(objects));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tx.commit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      This is my first blog！
    
    </summary>
    
    
  </entry>
  
</feed>
