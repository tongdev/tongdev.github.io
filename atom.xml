<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hellotong</title>
  <icon>https://www.gravatar.com/avatar/48dc4539567cef376fc850a6961ee097</icon>
  <subtitle>Hello tong, hello world!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="hellotong.ml/"/>
  <updated>2018-12-04T13:44:21.196Z</updated>
  <id>hellotong.ml/</id>
  
  <author>
    <name>Tong</name>
    <email>1336572985@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring（一）</title>
    <link href="hellotong.ml/spring_01/"/>
    <id>hellotong.ml/spring_01/</id>
    <published>2018-12-04T13:29:56.591Z</published>
    <updated>2018-12-04T13:44:21.196Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-概述"><a href="#Spring-概述" class="headerlink" title="Spring 概述"></a>Spring 概述</h2><h3 id="什么是-Spring"><a href="#什么是-Spring" class="headerlink" title="什么是 Spring"></a>什么是 Spring</h3><p>Spring 是一个分层的一站式的轻量级的开源框架。</p><h3 id="为什么学习-Spring"><a href="#为什么学习-Spring" class="headerlink" title="为什么学习 Spring"></a>为什么学习 Spring</h3><ol><li>方便耦合，简化开发</li><li>AOP 编程的支持</li><li>声明市事务的支持</li><li>方便程序的测试</li><li>…</li></ol><h2 id="Spring-的入门"><a href="#Spring-的入门" class="headerlink" title="Spring 的入门"></a>Spring 的入门</h2><h3 id="下载-Spring-开发包并解压"><a href="#下载-Spring-开发包并解压" class="headerlink" title="下载 Spring 开发包并解压"></a>下载 Spring 开发包并解压</h3><p><a href="http://spring.io/" target="_blank" rel="noopener">http://spring.io/</a></p><h3 id="创建-web-项目，导入相应的-jar-包"><a href="#创建-web-项目，导入相应的-jar-包" class="headerlink" title="创建 web 项目，导入相应的 jar 包"></a>创建 web 项目，导入相应的 jar 包</h3><p><img src="http://pifu006nk.bkt.clouddn.com/blog/20181204/apzHlMUkyzWl.jpg?imageslim" alt="mark"></p><h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="keyword">private</span> Car car;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> car;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCar</span><span class="params">(Car car)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.car = car;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"User [name="</span> + name + <span class="string">", age="</span> + age + <span class="string">", car="</span> + car + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将实体类交给-Spring-管理"><a href="#将实体类交给-Spring-管理" class="headerlink" title="将实体类交给 Spring 管理"></a>将实体类交给 Spring 管理</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd "</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将 User 对象交给 spring 容器管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.test.bean.User"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 1. 创建容器对象</span></span><br><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"><span class="comment">// 2. 向容器"要" user 对象</span></span><br><span class="line">User user = (User) ac.getBean(<span class="string">"user"</span>);</span><br><span class="line"><span class="comment">// 3. 打印 user 对象</span></span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-相关概念"><a href="#Spring-相关概念" class="headerlink" title="Spring 相关概念"></a>Spring 相关概念</h2><h3 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h3><p>IOC：Inverse of Control，控制反转的意思。将我们创建对象的方式反转了，以前是由我们开发人员去自己维护，使用了 spring 以后，对象的创建以及依赖关系可以交给 spring 完成创建以及注入。</p><p>简单地说，反转控制就是反转了对象的创建方式，由原来的开发人员自己创建反转为了由 spring 程序创建。</p><h3 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h3><p>DI：Dependency Injection，依赖注入的意思。实现 IOC 思想需要 DI 做支持。</p><h3 id="ApplicationContext-和-BeanFactory"><a href="#ApplicationContext-和-BeanFactory" class="headerlink" title="ApplicationContext 和 BeanFactory"></a>ApplicationContext 和 BeanFactory</h3><h4 id="BeanFactory-接口"><a href="#BeanFactory-接口" class="headerlink" title="BeanFactory 接口"></a>BeanFactory 接口</h4><p>是 Spring 的原始接口，功能比较单一，BeanFactory 接口实现类的容器的特点是：每次在获得对象时才会创建对象。（懒加载）</p><h4 id="ApplicationContext-接口"><a href="#ApplicationContext-接口" class="headerlink" title="ApplicationContext 接口"></a>ApplicationContext 接口</h4><p>每次容器启动时就会创建容器中配置的所有对象（立即加载），并提供更多的功能。</p><p>从类路径下加载配置文件使用的是 ClassPathXmlApplicationContext   实现类。</p><p>从硬盘绝对路径下加载配置文件使用的是 FileSystemXmlApplicationContext(“绝对路径”)</p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>在 web 开发中，一般使用的是 ApplicationContext，在资源匮乏的时候可以使用 BeanFactory。</p><h2 id="Bean-的相关配置"><a href="#Bean-的相关配置" class="headerlink" title="Bean 的相关配置"></a>Bean 的相关配置</h2><h3 id="Bean-标签的id和name的配置"><a href="#Bean-标签的id和name的配置" class="headerlink" title="Bean 标签的id和name的配置"></a>Bean 标签的id和name的配置</h3><ul><li>Bean 元素：使用该元素描述需要 spring 容器管理的对象</li><li><p>属性</p><pre><code>class：被管理对象的完整类名。name：给被管理的对象的起一个名字，从 spring 容器中获得对象时，使用该名称获得。可以重复，可以使用特殊字符。（一般不会起重复的名字）id：与 name 属性一模一样。不可重复，不能包含特殊字符。</code></pre></li></ul><h3 id="Bean-标签的声明周期的配置"><a href="#Bean-标签的声明周期的配置" class="headerlink" title="Bean 标签的声明周期的配置"></a>Bean 标签的声明周期的配置</h3><p>init-method：配置一个方法作为生命周期的初始化方法，spring 容器在创建之后会立即调用。</p><p>destory-method：配置一个方法作为生命周期的销毁方法，在 spring 容器关闭并销毁所有容器中的对象之前调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象创建后，容器会调用对象的 init 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"我是初始化方法！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 容器关闭后，会调用对象的 destory 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"我是销毁方法！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.test.bean.User"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Bean-标签的-scope-属性的取值"><a href="#Bean-标签的-scope-属性的取值" class="headerlink" title="Bean 标签的 scope 属性的取值"></a>Bean 标签的 scope 属性的取值</h3><p>singleton：默认值，单例对象，被标识为单例的对象在 spring 容器中只会存在一个实例。</p><p>prototype：多例原型，被标识为多例的对象，每次获得都会创建新的对象。</p><p>request：web 环境下，对象与 request 生命周期一致。</p><p>session：web 环境下，对象与 session 生命周期一致。</p><h2 id="Spring-创建对象的方式"><a href="#Spring-创建对象的方式" class="headerlink" title="Spring 创建对象的方式"></a>Spring 创建对象的方式</h2><h3 id="空参构造方式"><a href="#空参构造方式" class="headerlink" title="空参构造方式"></a>空参构造方式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 对象创建方式一：空参构造方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.test.bean.User"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destory"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="静态工厂方式（了解）"><a href="#静态工厂方式（了解）" class="headerlink" title="静态工厂方式（了解）"></a>静态工厂方式（了解）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态工厂方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">createUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"静态工厂方式创建 User..."</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 对象创建方式二：静态工厂方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user2"</span> <span class="attr">class</span>=<span class="string">"com.test.b_create.UserFactory"</span> <span class="attr">factory-method</span>=<span class="string">"createUser"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实例工厂方式（了解）"><a href="#实例工厂方式（了解）" class="headerlink" title="实例工厂方式（了解）"></a>实例工厂方式（了解）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例工厂方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">createUser2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"实例工厂方式创建 User..."</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 对象创建方式三：实例工厂方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user3"</span> <span class="attr">factory-bean</span>=<span class="string">"userFactory"</span> <span class="attr">factory-method</span>=<span class="string">"createUser2"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置实例工厂对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userFactory"</span> <span class="attr">class</span>=<span class="string">"com.test.b_create.UserFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring-的分模块引入配置"><a href="#Spring-的分模块引入配置" class="headerlink" title="Spring 的分模块引入配置"></a>Spring 的分模块引入配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring 的分模块配置，导入其他的配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"com/test/b_create/applicationContext.xml"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring-的属性注入"><a href="#Spring-的属性注入" class="headerlink" title="Spring 的属性注入"></a>Spring 的属性注入</h2><h3 id="set-方法注入"><a href="#set-方法注入" class="headerlink" title="set 方法注入"></a>set 方法注入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将 User 对象交给 spring 容器管理 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1. set 方式注入： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.test.bean.User"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 值类型注入： --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 为 User 中名为 name 的属性注入 tom 作为值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"tom"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 为 User 中名为 age 的属性注入 18 作为值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引用类型注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"car"</span> <span class="attr">ref</span>=<span class="string">"car"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将 Car 对象交给 spring 容器管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"com.test.bean.Car"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"玛莎拉蒂"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">value</span>=<span class="string">"黄色"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="构造函数注入"><a href="#构造函数注入" class="headerlink" title="构造函数注入"></a>构造函数注入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2. 构造方法注入： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user2"</span> <span class="attr">class</span>=<span class="string">"com.test.bean.User"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">   配置构造方法的参数 </span></span><br><span class="line"><span class="comment">   name 属性：构造函数参数的名字</span></span><br><span class="line"><span class="comment">   index 属性：构造函数的参数的索引位置</span></span><br><span class="line"><span class="comment">   type 属性：构造函数的参数的类型</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"999"</span>  <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"car"</span> <span class="attr">ref</span>=<span class="string">"car"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="p-名称空间注入"><a href="#p-名称空间注入" class="headerlink" title="p 名称空间注入"></a>p 名称空间注入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  3. p 名称空间注入 ，其实走的是 set 方式</span></span><br><span class="line"><span class="comment">     （1）导入名称空间  xmlns:p="http://www.springframework.org/schema/beans/p" </span></span><br><span class="line"><span class="comment">     （2）使用 p:属性 完成注入</span></span><br><span class="line"><span class="comment">       值类型：p:属性名="属性值"</span></span><br><span class="line"><span class="comment">       对象类型：p:对象名-ref="bean名称"</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user3"</span> <span class="attr">class</span>=<span class="string">"com.test.bean.User"</span> <span class="attr">p:name</span>=<span class="string">"jerry"</span> <span class="attr">p:age</span>=<span class="string">"20"</span> <span class="attr">p:car-ref</span>=<span class="string">"car"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="spel-注入"><a href="#spel-注入" class="headerlink" title="spel 注入"></a>spel 注入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 4. spel 注入：spring expression language（Spring 表达式语言）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user4"</span> <span class="attr">class</span>=<span class="string">"com.test.bean.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"#&#123;user.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"#&#123;user2.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"car"</span> <span class="attr">ref</span>=<span class="string">"car"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="复杂类型注入"><a href="#复杂类型注入" class="headerlink" title="复杂类型注入"></a>复杂类型注入</h3><h4 id="数组类型注入"><a href="#数组类型注入" class="headerlink" title="数组类型注入"></a>数组类型注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. array 数组类型注入 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果数组中只包含一个值或一个对象 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;property name="arr" value="tom"&gt;&lt;/property&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果数组中包含多个值或对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"arr"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>tom<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>jack<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"user"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="List-类型注入"><a href="#List-类型注入" class="headerlink" title="List 类型注入"></a>List 类型注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2. list 集合注入 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果 list 中只包含一个值或一个对象 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;property name="list" value="tom"&gt;&lt;/property&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果 list 中包含多个值或对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>tom<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>jack<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"user"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Map-类型注入"><a href="#Map-类型注入" class="headerlink" title="Map 类型注入"></a>Map 类型注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 3. map 集合注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- map 的键和值可以是任意类型的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"tom"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"user2"</span> <span class="attr">value-ref</span>=<span class="string">"user2"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key-ref</span>=<span class="string">"user3"</span> <span class="attr">value-ref</span>=<span class="string">"user4"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Properties-类型注入"><a href="#Properties-类型注入" class="headerlink" title="Properties 类型注入"></a>Properties 类型注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 4. properties 类型注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prop"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- properties 中键和值的类型都是字符串 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"url"</span>&gt;</span>jdbc:mysql:///crm<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="将-spring-容器应用到项目中"><a href="#将-spring-容器应用到项目中" class="headerlink" title="将 spring 容器应用到项目中"></a>将 spring 容器应用到项目中</h2><h3 id="导入相应的-jar-包"><a href="#导入相应的-jar-包" class="headerlink" title="导入相应的 jar 包"></a>导入相应的 jar 包</h3><h3 id="将-Service-对象和-Dao-对象配置到-spring-容器中"><a href="#将-Service-对象和-Dao-对象配置到-spring-容器中" class="headerlink" title="将 Service 对象和 Dao 对象配置到 spring 容器中"></a>将 Service 对象和 Dao 对象配置到 spring 容器中</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd "</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置 dao --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"com.test.dao.impl.CustomerDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.test.dao.impl.UserDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置 service --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.test.service.impl.CustomerServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"customerDao"</span> <span class="attr">ref</span>=<span class="string">"customerDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.test.service.impl.UserServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在-web-xml-中配置-ContextLoaderListener-监听器，并指定加载-spring-配置文件的位置"><a href="#在-web-xml-中配置-ContextLoaderListener-监听器，并指定加载-spring-配置文件的位置" class="headerlink" title="在 web.xml 中配置 ContextLoaderListener 监听器，并指定加载 spring 配置文件的位置"></a>在 web.xml 中配置 ContextLoaderListener 监听器，并指定加载 spring 配置文件的位置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置一个监听器，可以让 spring 容器随项目的启动而启动，随项目的关闭而销毁 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用 context-param 指定加载的 spring 配置文件的名称和位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在-Action-中获得容器中的对象"><a href="#在-Action-中获得容器中的对象" class="headerlink" title="在 Action 中获得容器中的对象"></a>在 Action 中获得容器中的对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得 spring 容器-- 从 application 域中获得</span></span><br><span class="line"><span class="comment">// 获得 ServletContext 对象</span></span><br><span class="line">ServletContext sc = ServletActionContext.getServletContext();</span><br><span class="line"><span class="comment">// 获得 spring 容器对象</span></span><br><span class="line">WebApplicationContext ac = WebApplicationContextUtils.getWebApplicationContext(sc);</span><br><span class="line"><span class="comment">// 从容器中获得 CustomerService</span></span><br><span class="line">CustomerService customerService = (CustomerService) ac.getBean(<span class="string">"customerService"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Spring 基础篇（一），让我们一起开启 Spring 学习之旅吧。
    
    </summary>
    
      <category term="Java" scheme="hellotong.ml/categories/Java/"/>
    
    
      <category term="Java" scheme="hellotong.ml/tags/Java/"/>
    
      <category term="Spring" scheme="hellotong.ml/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Struts2（四）</title>
    <link href="hellotong.ml/struts2_04/"/>
    <id>hellotong.ml/struts2_04/</id>
    <published>2018-12-01T11:42:48.187Z</published>
    <updated>2018-12-01T11:46:16.815Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Struts2-的拦截器"><a href="#Struts2-的拦截器" class="headerlink" title="Struts2 的拦截器"></a>Struts2 的拦截器</h2><h3 id="拦截器概述"><a href="#拦截器概述" class="headerlink" title="拦截器概述"></a>拦截器概述</h3><h4 id="什么是拦截器"><a href="#什么是拦截器" class="headerlink" title="什么是拦截器"></a>什么是拦截器</h4><p>动态拦截 Action 调用的对象。</p><h4 id="Filter-和-Inteceptor-的区别"><a href="#Filter-和-Inteceptor-的区别" class="headerlink" title="Filter 和 Inteceptor 的区别"></a>Filter 和 Inteceptor 的区别</h4><p>Filter：过滤器，过滤从客户端向服务器发送的请求。</p><p>Interceptor：拦截器。拦截的是客户端对 Action 的访问，更加细粒度化的拦截。</p><h2 id="Struts2-的执行流程"><a href="#Struts2-的执行流程" class="headerlink" title="Struts2 的执行流程"></a>Struts2 的执行流程</h2><p>客户端向服务器发送一个 Action 的请求，执行核心过滤器 doFilter() 方法，在这个方法中，调用 executeAction() 方法，在这个方法内部调用 dispatcher.serviceAction() 方法，在这个方法内部创建一个 Action 代理，最终执行的是 Action 代理中的 execute() 方法，在代理中执行的 execute() 方法中调用 ActionInvocation 的 invoke 方法。在这个方法内部递归执行一组拦截器，如果没有下一个拦截器的话，就执行目标 Action，根据 Action 的返回的结果进行页面跳转。</p><p><img src="http://pifu006nk.bkt.clouddn.com/blog/20181201/6CfujfW0nrO8.png?imageslim" alt="mark"></p><h2 id="拦截器入门"><a href="#拦截器入门" class="headerlink" title="拦截器入门"></a>拦截器入门</h2><h3 id="编写拦截器类"><a href="#编写拦截器类" class="headerlink" title="编写拦截器类"></a>编写拦截器类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义拦截器一</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tong</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InteceptorDemo1</span> <span class="keyword">extends</span> <span class="title">AbstractInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">intercept</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"InterceptorDemo1 执行了..."</span>);</span><br><span class="line">String invoke = invocation.invoke();</span><br><span class="line">System.out.println(<span class="string">"InterceptorDemo1 结束了..."</span>);</span><br><span class="line"><span class="keyword">return</span> invoke;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h3><blockquote><p>有两种配置方式</p></blockquote><h4 id="自定义拦截器，引入拦截器"><a href="#自定义拦截器，引入拦截器" class="headerlink" title="自定义拦截器，引入拦截器"></a>自定义拦截器，引入拦截器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"demo1"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自定义拦截器 === 配置方式一--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"InterceptorDemo1"</span> <span class="attr">class</span>=<span class="string">"com.test.web.interceptor.InteceptorDemo1"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"InterceptorDemo2"</span> <span class="attr">class</span>=<span class="string">"com.test.web.interceptor.InteceptorDemo2"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"actionDemo1"</span> <span class="attr">class</span>=<span class="string">"com.test.web.action.ActionDemo1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span>&gt;</span>/demo1/demo1.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 引入自定义拦截器（自定义拦截器之后默认拦截器就不执行了，如果需要一定要手动引入默认拦截器栈中的拦截器） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"InterceptorDemo1"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"InterceptorDemo2"</span> /&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自定义拦截器栈，引入拦截器栈"><a href="#自定义拦截器栈，引入拦截器栈" class="headerlink" title="自定义拦截器栈，引入拦截器栈"></a>自定义拦截器栈，引入拦截器栈</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"demo1"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自定义拦截器栈 === 配置方式二--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"InterceptorDemo1"</span> <span class="attr">class</span>=<span class="string">"com.test.web.interceptor.InteceptorDemo1"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"InterceptorDemo2"</span> <span class="attr">class</span>=<span class="string">"com.test.web.interceptor.InteceptorDemo2"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"myStack"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"InterceptorDemo1"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"InterceptorDemo2"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"actionDemo1"</span> <span class="attr">class</span>=<span class="string">"com.test.web.action.ActionDemo1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span>&gt;</span>/demo1/demo1.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 引入自定义拦截器栈 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myStack"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CRM-权限拦截器案例"><a href="#CRM-权限拦截器案例" class="headerlink" title="CRM 权限拦截器案例"></a>CRM 权限拦截器案例</h2><h3 id="实现用户登录功能"><a href="#实现用户登录功能" class="headerlink" title="实现用户登录功能"></a>实现用户登录功能</h3><h4 id="创建数据库表和实体"><a href="#创建数据库表和实体" class="headerlink" title="创建数据库表和实体"></a>创建数据库表和实体</h4><h5 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`sys_user`</span> (</span><br><span class="line">  <span class="string">`user_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'用户id'</span>,</span><br><span class="line">  <span class="string">`user_code`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户账号'</span>,</span><br><span class="line">  <span class="string">`user_name`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户名称'</span>,</span><br><span class="line">  <span class="string">`user_password`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户密码'</span>,</span><br><span class="line">  <span class="string">`user_state`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'1:正常,0:暂停'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`user_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><h5 id="创建实体"><a href="#创建实体" class="headerlink" title="创建实体"></a>创建实体</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> Long user_id;</span><br><span class="line"><span class="keyword">private</span> String user_code;</span><br><span class="line"><span class="keyword">private</span> String user_name;</span><br><span class="line"><span class="keyword">private</span> String user_password;</span><br><span class="line"><span class="keyword">private</span> String user_state;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">getUser_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> user_id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser_id</span><span class="params">(Long user_id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.user_id = user_id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUser_code</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> user_code;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser_code</span><span class="params">(String user_code)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.user_code = user_code;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUser_name</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> user_name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser_name</span><span class="params">(String user_name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.user_name = user_name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUser_password</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> user_password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser_password</span><span class="params">(String user_password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.user_password = user_password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUser_state</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> user_state;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser_state</span><span class="params">(String user_state)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.user_state = user_state;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"User [user_id="</span> + user_id + <span class="string">", user_code="</span> + user_code + <span class="string">", user_name="</span> + user_name + <span class="string">", user_password="</span></span><br><span class="line">+ user_password + <span class="string">", user_state="</span> + user_state + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Action-类"><a href="#Action-类" class="headerlink" title="Action 类"></a>Action 类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户的 Action 类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tong</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收数据封装数据</span></span><br><span class="line"><span class="keyword">private</span> User user = <span class="keyword">new</span> User();</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户的登录方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//System.out.println(user);</span></span><br><span class="line"><span class="comment">// 调用 service 层的登录方法</span></span><br><span class="line">UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">User existUser = userService.login(user);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断该用户是否存在，进行页面跳转</span></span><br><span class="line"><span class="keyword">if</span> (existUser != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 如果存在，跳转到 index.jsp 页面，并将该 user 对象存到 session 域中</span></span><br><span class="line">ServletActionContext.getRequest().getSession().setAttribute(<span class="string">"user"</span>, existUser);</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 如果不存在，跳转到登录页面</span></span><br><span class="line"><span class="comment">// 添加错误信息，写回到页面上</span></span><br><span class="line">addActionError(<span class="string">"用户名或密码错误!"</span>);</span><br><span class="line"><span class="keyword">return</span> LOGIN;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Service-层实现类"><a href="#Service-层实现类" class="headerlink" title="Service 层实现类"></a>Service 层实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户的业务层的接口的实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tong</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">// 用户 service 层的登录方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 调用 dao 层的登录方法</span></span><br><span class="line">UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line"><span class="keyword">return</span> userDao.login(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Dao-层实现类"><a href="#Dao-层实现类" class="headerlink" title="Dao 层实现类"></a>Dao 层实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户的 dao 层接口的实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tong</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">// 用户 dao 层的登录方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据用户名和密码查询该用户是否存在</span></span><br><span class="line">Query query = session.createQuery(<span class="string">"from User where user_code=? and user_password=?"</span>);</span><br><span class="line"><span class="comment">// 设置参数</span></span><br><span class="line">query.setParameter(<span class="number">0</span>, user.getUser_code());</span><br><span class="line">query.setParameter(<span class="number">1</span>, user.getUser_password());</span><br><span class="line">User existUser = (User) query.uniqueResult();</span><br><span class="line"><span class="comment">// 如果该用户存在，返回该用户</span></span><br><span class="line"><span class="keyword">if</span> (existUser != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> existUser;</span><br><span class="line">&#125;</span><br><span class="line">tx.commit();</span><br><span class="line"><span class="comment">// 如果不存在，返回 null</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="根据结果进行页面跳转"><a href="#根据结果进行页面跳转" class="headerlink" title="根据结果进行页面跳转"></a>根据结果进行页面跳转</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置用户的 action --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"user_*"</span> <span class="attr">class</span>=<span class="string">"com.test.web.action.UserAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 登录成功 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span> <span class="attr">type</span>=<span class="string">"redirect"</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 登录失败 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"login"</span>&gt;</span>/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实现权限拦截器"><a href="#实现权限拦截器" class="headerlink" title="实现权限拦截器"></a>实现权限拦截器</h3><h4 id="编写拦截器类-1"><a href="#编写拦截器类-1" class="headerlink" title="编写拦截器类"></a>编写拦截器类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义权限控制拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tong</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrivilegeInteceptor</span> <span class="keyword">extends</span> <span class="title">MethodFilterInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">doIntercept</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 获得 Session</span></span><br><span class="line">User user = (User) ServletActionContext.getRequest().getSession().getAttribute(<span class="string">"user"</span>);</span><br><span class="line"><span class="comment">// 判断 session 中是否包含 user 对象</span></span><br><span class="line"><span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 如果包含，放行</span></span><br><span class="line"><span class="keyword">return</span> invocation.invoke();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 如果不包含，拦截</span></span><br><span class="line"><span class="comment">// 跳转到登录页面，给出提示信息</span></span><br><span class="line">ActionSupport actionSupport = (ActionSupport) invocation.getAction();</span><br><span class="line">actionSupport.addActionError(<span class="string">"用户未登录，没有权限进行以下操作！"</span>);</span><br><span class="line"><span class="keyword">return</span> actionSupport.LOGIN;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置拦截器-1"><a href="#配置拦截器-1" class="headerlink" title="配置拦截器"></a>配置拦截器</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE struts PUBLIC</span><br><span class="line"><span class="string">"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="string">"http://struts.apache.org/dtds/struts-2.3.dtd"</span>&gt;</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">&lt;!-- 配置Struts2的常量 --&gt;</span><br><span class="line">&lt;constant name=<span class="string">"struts.action.extension"</span> value=<span class="string">"action"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">package</span> name=<span class="string">"crm"</span> extends=<span class="string">"struts-default"</span> namespace=<span class="string">"/"</span>&gt;</span><br><span class="line">&lt;!-- 配置自定义拦截器 --&gt;</span><br><span class="line">&lt;interceptors&gt;</span><br><span class="line">&lt;interceptor name=<span class="string">"privilegeInteceptor"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.test.web.interceptor.PrivilegeInteceptor"</span>/&gt;</span><br><span class="line">&lt;/interceptors&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 配置全局结果页面 --&gt;</span><br><span class="line">&lt;global-results&gt;</span><br><span class="line">&lt;!-- LOGIN --&gt;</span><br><span class="line">&lt;result name="login"&gt;/login.jsp&lt;/result&gt;</span><br><span class="line">&lt;/global-results&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 配置客户的 action --&gt;</span><br><span class="line">&lt;action name=<span class="string">"customer_*"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.test.web.action.CustomerAction"</span> method=<span class="string">"&#123;1&#125;"</span>&gt;</span><br><span class="line">&lt;result name="findSuccess"&gt;/jsp/customer/list.jsp&lt;/result&gt;</span><br><span class="line">&lt;result name="saveUI"&gt;/jsp/customer/add.jsp&lt;/result&gt;</span><br><span class="line">&lt;result name="saveSuccess" type="redirectAction"&gt;customer_find.action&lt;/result&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 引入拦截器配置 --&gt;</span><br><span class="line">&lt;interceptor-ref name=<span class="string">"privilegeInteceptor"</span>&gt;</span><br><span class="line">&lt;!-- 不拦截 login 方法，其他方法都拦截 --&gt;</span><br><span class="line">&lt;param name="excludeMethods"&gt;login&lt;/param&gt;</span><br><span class="line">&lt;/interceptor-ref&gt;</span><br><span class="line">&lt;interceptor-ref name=<span class="string">"defaultStack"</span>/&gt;</span><br><span class="line">&lt;/action&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 配置用户的 action --&gt;</span><br><span class="line">&lt;action name=<span class="string">"user_*"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.test.web.action.UserAction"</span> method=<span class="string">"&#123;1&#125;"</span>&gt;</span><br><span class="line">&lt;!-- 登录成功 --&gt;</span><br><span class="line">&lt;result name="success" type="redirect"&gt;/index.jsp&lt;/result&gt;</span><br><span class="line">&lt;!-- 登录失败 --&gt;</span><br><span class="line">&lt;!-- &lt;result name="login"&gt;/login.jsp&lt;/result&gt; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 引入拦截器配置 --&gt;</span><br><span class="line">&lt;interceptor-ref name=<span class="string">"privilegeInteceptor"</span>&gt;</span><br><span class="line">&lt;!-- 不拦截 login 方法，其他方法都拦截 --&gt;</span><br><span class="line">&lt;param name="excludeMethods"&gt;login&lt;/param&gt;</span><br><span class="line">&lt;/interceptor-ref&gt;</span><br><span class="line">&lt;interceptor-ref name=<span class="string">"defaultStack"</span>/&gt;</span><br><span class="line">&lt;/action&gt;</span><br><span class="line">&lt;/package&gt;</span><br><span class="line">&lt;/struts&gt;</span><br></pre></td></tr></table></figure><h2 id="Struts2-的标签库"><a href="#Struts2-的标签库" class="headerlink" title="Struts2 的标签库"></a>Struts2 的标签库</h2><h3 id="通用标签库"><a href="#通用标签库" class="headerlink" title="通用标签库"></a>通用标签库</h3><p><img src="http://pifu006nk.bkt.clouddn.com/blog/20181201/3jddlYD1hNIn.png?imageslim" alt="mark"></p><p>常用的标签有判断标签、迭代标签、property 标签和 debug 标签</p><h4 id="判断标签"><a href="#判断标签" class="headerlink" title="判断标签"></a>判断标签</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:set var="i" value="3" scope="request"&gt;&lt;/s:set&gt;</span><br><span class="line">&lt;s:<span class="keyword">if</span> test=<span class="string">"#request.i&gt;3"</span>&gt;</span><br><span class="line">i 大于 <span class="number">3</span></span><br><span class="line">&lt;/s:if&gt;</span><br><span class="line">&lt;s:elseif test=<span class="string">"#request.i&lt;3"</span>&gt;</span><br><span class="line">i 小于 <span class="number">3</span></span><br><span class="line">&lt;/s:elseif&gt;</span><br><span class="line">&lt;s:<span class="keyword">else</span>&gt;</span><br><span class="line">i 等于 <span class="number">3</span></span><br><span class="line">&lt;/s:else&gt;</span><br></pre></td></tr></table></figure><h4 id="迭代标签"><a href="#迭代标签" class="headerlink" title="迭代标签"></a>迭代标签</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:iterator value=<span class="string">"#&#123;'aa':'11','bb':'22','cc':'33'&#125;"</span>&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"key"</span> /&gt;---&lt;s:property value=<span class="string">"value"</span> /&gt;</span><br><span class="line">&lt;/s:iterator&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;s:iterator begin=<span class="string">"1"</span> end=<span class="string">"100"</span> step=<span class="string">"1"</span> status=<span class="string">"status"</span>&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"#status.count"</span>/&gt;</span><br><span class="line">&lt;/s:iterator&gt;</span><br></pre></td></tr></table></figure><h3 id="UI-标签库"><a href="#UI-标签库" class="headerlink" title="UI 标签库"></a>UI 标签库</h3><p><img src="http://pifu006nk.bkt.clouddn.com/blog/20181201/p27f5lxR2htV.png?imageslim" alt="mark"></p><p>传统标签和 UI 标签的对比</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;传统标签&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123; pageContext.request.contextPath &#125;/uiAction.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">密码：&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>/&gt;&lt;br/&gt;</span><br><span class="line">年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span>/&gt;&lt;br/&gt;</span><br><span class="line">性别：&lt;input type=<span class="string">"radio"</span> name=<span class="string">"sex"</span> value=<span class="string">"女"</span>/&gt;男</span><br><span class="line">&lt;input type=<span class="string">"radio"</span> name=<span class="string">"sex"</span> value=<span class="string">"女"</span>/&gt;女&lt;br/&gt;</span><br><span class="line">籍贯：&lt;select name=<span class="string">"city"</span>&gt;</span><br><span class="line">&lt;option value=""&gt;--请选择--&lt;/option&gt;</span><br><span class="line">&lt;option value="北京"&gt;北京&lt;/option&gt;</span><br><span class="line">&lt;option value="上海"&gt;上海&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;&lt;br/&gt;</span><br><span class="line">爱好：&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"basketball"</span>/&gt;篮球</span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"football"</span>/&gt;足球</span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"volleyball"</span>/&gt;排球</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">自我介绍：&lt;textarea rows="2" cols="10" name="info"&gt;&lt;/textarea&gt;&lt;br/&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;UI 标签&lt;/h3&gt;</span><br><span class="line">&lt;s:form action=<span class="string">"uiAction"</span> namespace=<span class="string">"/"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">&lt;s:textfield name=<span class="string">"username"</span> label=<span class="string">"用户名"</span>/&gt;</span><br><span class="line">&lt;s:password name=<span class="string">"password"</span> label=<span class="string">"密码"</span> showPassword=<span class="string">"true"</span>/&gt;</span><br><span class="line">&lt;s:textfield name=<span class="string">"age"</span> label=<span class="string">"年龄"</span>/&gt;</span><br><span class="line">&lt;s:radio list=<span class="string">"&#123;'男','女'&#125;"</span> name=<span class="string">"sex"</span> label=<span class="string">"性别"</span>/&gt;</span><br><span class="line">&lt;s:select list=<span class="string">"&#123;'北京','上海'&#125;"</span> name=<span class="string">"city"</span> label=<span class="string">"籍贯"</span> headerKey=<span class="string">""</span> headerValue=<span class="string">"--请选择--"</span>/&gt;</span><br><span class="line">&lt;s:checkboxlist list=<span class="string">"#&#123;'basketball':'篮球','football':'足球','volleyball':'排球' &#125;"</span> name=<span class="string">"hobby"</span> label=<span class="string">"爱好"</span> /&gt;</span><br><span class="line">&lt;s:textarea name="info" rows="2" cols="10" label="自我介绍"&gt;&lt;/s:textarea&gt;</span><br><span class="line">&lt;s:submit value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">&lt;/s:form&gt;</span><br></pre></td></tr></table></figure><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><p>学会自定义拦截器并配置以及一些常用标签的使用。</p>]]></content>
    
    <summary type="html">
    
      Struts2 基础完结篇（四），Struts2 是基于 MVC 设计模式的 Web 层框架，让我们开启 Struts2 学习之旅吧。
    
    </summary>
    
      <category term="Java" scheme="hellotong.ml/categories/Java/"/>
    
    
      <category term="Java" scheme="hellotong.ml/tags/Java/"/>
    
      <category term="Struts2" scheme="hellotong.ml/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>Struts2（三）</title>
    <link href="hellotong.ml/struts2_03/"/>
    <id>hellotong.ml/struts2_03/</id>
    <published>2018-11-29T13:44:24.525Z</published>
    <updated>2018-11-29T14:01:43.392Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OGNL-的概述"><a href="#OGNL-的概述" class="headerlink" title="OGNL 的概述"></a>OGNL 的概述</h2><h3 id="什么是-OGNL"><a href="#什么是-OGNL" class="headerlink" title="什么是 OGNL"></a>什么是 OGNL</h3><p>OGNL（Object-Graph Navigation Language） 的全称是对象导航语言，可以用来存取 Java 对象的任何属性，调用 Java 对象的方法，是一种功能强大的开源表达式语言。</p><h3 id="OGNL-的作用"><a href="#OGNL-的作用" class="headerlink" title="OGNL 的作用"></a>OGNL 的作用</h3><p>OGNL 是 Struts2 默认的表达式语言。它具有一下特点：</p><ul><li>支持对象方法调用。</li><li>支持类静态方法调用和值访问。</li><li>支持赋值操作和表达式串联。</li><li>可以访问 OgnlContext 和 ActionContext 对象。</li><li>操作集合对象。</li></ul><h3 id="OGNL-的要素"><a href="#OGNL-的要素" class="headerlink" title="OGNL 的要素"></a>OGNL 的要素</h3><p>表达式、根对象（Root）、Context 对象。</p><h3 id="OGNL-的入门"><a href="#OGNL-的入门" class="headerlink" title="OGNL 的入门"></a>OGNL 的入门</h3><h4 id="在-Java-环境下"><a href="#在-Java-环境下" class="headerlink" title="在 Java 环境下"></a>在 Java 环境下</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Ognl 表达式在 Java 环境下的使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tong</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OgnlDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用 Ognl 表达式访问对象的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> <span class="keyword">throws</span> OgnlException </span>&#123;</span><br><span class="line"><span class="comment">// 获得 context 对象</span></span><br><span class="line">OgnlContext context = <span class="keyword">new</span> OgnlContext();</span><br><span class="line"><span class="comment">// 获得根对象</span></span><br><span class="line">Object root = context.getRoot();</span><br><span class="line"><span class="comment">// 书写并执行表达式</span></span><br><span class="line">Object obj = Ognl.getValue(<span class="string">"'helloworld'.length()"</span>, context, root);<span class="comment">// 获取字符串的长度</span></span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用 Ognl 表达式访问静态方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> <span class="keyword">throws</span> OgnlException </span>&#123;</span><br><span class="line"><span class="comment">// 获得 context 对象</span></span><br><span class="line">OgnlContext context = <span class="keyword">new</span> OgnlContext();</span><br><span class="line"><span class="comment">// 获得根对象</span></span><br><span class="line">Object root = context.getRoot();</span><br><span class="line"><span class="comment">// 书写并执行表达式</span></span><br><span class="line"><span class="comment">// 表达式书写规则：@类名@静态方法名</span></span><br><span class="line">Object obj = Ognl.getValue(<span class="string">"@java.lang.Math@random()"</span>, context, root);<span class="comment">// 调用 Math 类的 random 方法生成一个 0-1 的随机数</span></span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向 root 对象中存入数据，并获取，获取时不需要加 # 号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span> <span class="keyword">throws</span> OgnlException </span>&#123;</span><br><span class="line"><span class="comment">// 获得 context 对象</span></span><br><span class="line">OgnlContext context = <span class="keyword">new</span> OgnlContext();</span><br><span class="line"><span class="comment">// 向 root 中存入一个对象</span></span><br><span class="line">User user = <span class="keyword">new</span> User(<span class="string">"张三"</span>, <span class="string">"123"</span>);</span><br><span class="line">context.setRoot(user);</span><br><span class="line"><span class="comment">// 获得根对象</span></span><br><span class="line">Object root = context.getRoot();</span><br><span class="line"><span class="comment">// 书写并执行表达式</span></span><br><span class="line">Object username = Ognl.getValue(<span class="string">"username"</span>, context, root);</span><br><span class="line">Object password = Ognl.getValue(<span class="string">"password"</span>, context, root);</span><br><span class="line">System.out.println(username + <span class="string">"  "</span> + password);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向 context 对象中存入数据，并获取，获取时需要加 # 号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo4</span><span class="params">()</span> <span class="keyword">throws</span> OgnlException </span>&#123;</span><br><span class="line"><span class="comment">// 获得 context 对象</span></span><br><span class="line">OgnlContext context = <span class="keyword">new</span> OgnlContext();</span><br><span class="line">context.put(<span class="string">"name"</span>, <span class="string">"李四"</span>);</span><br><span class="line"><span class="comment">// 获得根对象</span></span><br><span class="line">Object root = context.getRoot();</span><br><span class="line"><span class="comment">// 执行表达式获取数据</span></span><br><span class="line">Object obj = Ognl.getValue(<span class="string">"#name"</span>, context, root);</span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在-Struts2-环境下"><a href="#在-Struts2-环境下" class="headerlink" title="在 Struts2 环境下"></a>在 Struts2 环境下</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;Ognl 在 Struts2 环境的入门&lt;/h1&gt;</span><br><span class="line">&lt;h3&gt;使用 Ognl 表达式调用对象的方法&lt;/h3&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"'helloworld'.length()"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;使用 Ognl 表达式调用静态方法&lt;/h3&gt;</span><br><span class="line">&lt;!-- 默认情况下，Struts2 关闭了静态方法的访问，需要修改一个常量的值开启 --&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"@java.lang.Math@random()"</span> /&gt;</span><br></pre></td></tr></table></figure><h2 id="值栈的概述"><a href="#值栈的概述" class="headerlink" title="值栈的概述"></a>值栈的概述</h2><h3 id="什么是值栈"><a href="#什么是值栈" class="headerlink" title="什么是值栈"></a>什么是值栈</h3><p>ValueStack是 Struts 的一个接口，中文意思就是值栈。OgnlValueStack 是 ValueStack 的实现类，当客户端发送一个请求后，struts2 架构会构建一个 action 实例同时创建一个 OgnlValueStack 值栈实例，OgnlValueStack 贯穿整个 Action 的生命周期，struts2 中使用 OGNL 将请求 Action 的参数封装为对象存储到值栈中，并通过 OGNL 表达式读取值栈中的对象属性值。</p><h3 id="值栈的内部结构"><a href="#值栈的内部结构" class="headerlink" title="值栈的内部结构"></a>值栈的内部结构</h3><p>在 OgnlValueStack 中主要包括两部分，一部分是 root，其实 root 就是一个 ArrayList 集合，另一部分是 context，其实 context 就是一个 Map。</p><h3 id="ActionContext-和-ValueStack-的关系"><a href="#ActionContext-和-ValueStack-的关系" class="headerlink" title="ActionContext 和 ValueStack 的关系"></a>ActionContext 和 ValueStack 的关系</h3><p>在创建 ActionContext 的时候会创建 ValueStack 的对象，并将 ValueStack 对象传给 ActionContext，ActionContext 中就有一个 ValueStack 的引用。ValueStack 中也有一个 ActionContext 的引用。</p><h3 id="获得值栈对象"><a href="#获得值栈对象" class="headerlink" title="获得值栈对象"></a>获得值栈对象</h3><h4 id="通过-ActionContext-对象获得值栈"><a href="#通过-ActionContext-对象获得值栈" class="headerlink" title="通过 ActionContext 对象获得值栈"></a>通过 ActionContext 对象获得值栈</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种：获得值栈</span></span><br><span class="line">ValueStack valueStack = ActionContext.getContext().getValueStack();</span><br></pre></td></tr></table></figure><h4 id="通过-request-域获得值栈"><a href="#通过-request-域获得值栈" class="headerlink" title="通过 request 域获得值栈"></a>通过 request 域获得值栈</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第二种：通过 ServletActionContext 对象获得</span></span><br><span class="line">Object valueStack2 = ServletActionContext.getRequest().getAttribute(ServletActionContext.STRUTS_VALUESTACK_KEY);</span><br></pre></td></tr></table></figure><h3 id="操作值栈"><a href="#操作值栈" class="headerlink" title="操作值栈"></a>操作值栈</h3><h4 id="对-Action-中的属性提供-get-方法的方式"><a href="#对-Action-中的属性提供-get-方法的方式" class="headerlink" title="对 Action 中的属性提供 get 方法的方式"></a>对 Action 中的属性提供 get 方法的方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueStackDemo3</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供属性和 get 方法</span></span><br><span class="line"><span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 向 ValueStack 中存入数据</span></span><br><span class="line">user = <span class="keyword">new</span> User(<span class="string">"张三"</span>, <span class="string">"111"</span>);</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="手动操作值栈，使用-push-和-set-方法"><a href="#手动操作值栈，使用-push-和-set-方法" class="headerlink" title="手动操作值栈，使用 push 和 set 方法"></a>手动操作值栈，使用 push 和 set 方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class ValueStackDemo4 extends ActionSupport &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String execute() throws Exception &#123;</span><br><span class="line">// 获得值栈对象</span><br><span class="line">ValueStack valueStack = ActionContext.getContext().getValueStack();</span><br><span class="line">// 向值栈中存入数据</span><br><span class="line">User user = new User(&quot;李四&quot;, &quot;222&quot;);</span><br><span class="line">// 使用 push 方法</span><br><span class="line">valueStack.push(user);</span><br><span class="line">// 使用 set 方法</span><br><span class="line">valueStack.set(&quot;name&quot;, &quot;王五&quot;);</span><br><span class="line"></span><br><span class="line">return super.execute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="从值栈中获取数据"><a href="#从值栈中获取数据" class="headerlink" title="从值栈中获取数据"></a>从值栈中获取数据</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 获取一个对象 --&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"username"</span> /&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"password"</span> /&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 获取一个 List 集合 --&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"list[0].username"</span> /&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"list[0].password"</span> /&gt;&lt;br&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"list[1].username"</span> /&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"list[1].password"</span> /&gt;&lt;br&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"list[2].username"</span> /&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"list[2].password"</span> /&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 获得 context 区域中的数据 --&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"#request.name"</span> /&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"#session.name"</span> /&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"#application.name"</span> /&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"#attr.name"</span> /&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"#parameters.id"</span> /&gt;</span><br></pre></td></tr></table></figure><h3 id="为什么-EL-表达式能够访问值栈"><a href="#为什么-EL-表达式能够访问值栈" class="headerlink" title="为什么 EL 表达式能够访问值栈"></a>为什么 EL 表达式能够访问值栈</h3><p>因为底层对 Request 对象的 getAttribute 方法进行了增强，先会从域当中获得值，如果获取不到就会去值栈中获取。</p><h3 id="OGNL-的特殊字符的使用"><a href="#OGNL-的特殊字符的使用" class="headerlink" title="OGNL 的特殊字符的使用"></a>OGNL 的特殊字符的使用</h3><h4 id="号的使用"><a href="#号的使用" class="headerlink" title="# 号的使用"></a># 号的使用</h4><ol><li><p>获得 context 的数据</p><p><code>&lt;s:property value=&quot;#request.name&quot;/&gt;</code></p></li><li><p>用于构建一个 Map 集合</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:iterator value=<span class="string">"#&#123;'aa':'11','bb':'22','cc':'33' &#125;"</span>&gt;</span><br><span class="line">    &lt;s:property value=<span class="string">"key"</span> /&gt;--&lt;s:property value=<span class="string">"value"</span> /&gt;&lt;br/&gt;</span><br><span class="line">&lt;/s:iterator&gt;</span><br><span class="line">&lt;!--快捷创建单选按钮--&gt;</span><br><span class="line">&lt;s:radio list=<span class="string">"#&#123;'1':'男','2':'女'&#125;"</span> name=<span class="string">"sex2"</span> label=<span class="string">"性别"</span> /&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="的使用"><a href="#的使用" class="headerlink" title="% 的使用"></a>% 的使用</h4><ol><li><p>强制解析 OGNL 表达式</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:textfield name=<span class="string">"name"</span> value=<span class="string">"%&#123;#request.name&#125;"</span> /&gt;</span><br></pre></td></tr></table></figure></li><li><p>强制不解析 OGNL 表达式</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:property value=<span class="string">"%&#123;'#request.name'&#125;"</span> /&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="号的使用-1"><a href="#号的使用-1" class="headerlink" title="$ 号的使用"></a>$ 号的使用</h4><p>在 struts 的配置文件或者是属性文件中会使用。</p><h2 id="CRM-查询优化"><a href="#CRM-查询优化" class="headerlink" title="CRM 查询优化"></a>CRM 查询优化</h2><p>Action 类中的查询方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询客户列表的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CustomerService customerService = <span class="keyword">new</span> CustomerServiceImpl();</span><br><span class="line">    List&lt;Customer&gt; list = customerService.find();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得 request 对象，将获取到的数据放到域中返回到页面上</span></span><br><span class="line">    <span class="comment">// ServletActionContext.getRequest().setAttribute("list", list);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将查询到的 list 集合放到值栈中</span></span><br><span class="line">    ActionContext.getContext().getValueStack().set(<span class="string">"list"</span>, list);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"findSuccess"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 OGNL 表达式遍历显示在页面上</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:iterator value=<span class="string">"list"</span>&gt;</span><br><span class="line">    &lt;TR</span><br><span class="line">        style=<span class="string">"FONT-WEIGHT: normal; FONT-STYLE: normal; BACKGROUND-COLOR: white; TEXT-DECORATION: none"</span>&gt;</span><br><span class="line">        &lt;TD&gt;&lt;s:property value="cust_name"/&gt;&lt;/TD&gt;</span><br><span class="line">        &lt;TD&gt;&lt;s:property value="cust_level"/&gt;&lt;/TD&gt;</span><br><span class="line">        &lt;TD&gt;&lt;s:property value="cust_source"/&gt;&lt;/TD&gt;</span><br><span class="line">        &lt;TD&gt;&lt;s:property value="cust_industry"/&gt;&lt;/TD&gt;</span><br><span class="line">        &lt;TD&gt;&lt;s:property value="cust_phone"/&gt;&lt;/TD&gt;</span><br><span class="line">        &lt;TD&gt;&lt;s:property value="cust_mobile"/&gt;&lt;/TD&gt;</span><br><span class="line">        &lt;TD&gt;</span><br><span class="line">            &lt;a href="$&#123;pageContext.request.contextPath &#125;"&gt;修改&lt;/a&gt;</span><br><span class="line">            &amp;nbsp;&amp;nbsp;</span><br><span class="line">            &lt;a href="$&#123;pageContext.request.contextPath &#125;"&gt;删除&lt;/a&gt;</span><br><span class="line">        &lt;/TD&gt;</span><br><span class="line">    &lt;/TR&gt;</span><br><span class="line">&lt;/s:iterator&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Struts2 基础篇（三），Struts2 是基于 MVC 设计模式的 Web 层框架，让我们开启 Struts2 学习之旅吧。
    
    </summary>
    
      <category term="Java" scheme="hellotong.ml/categories/Java/"/>
    
    
      <category term="Java" scheme="hellotong.ml/tags/Java/"/>
    
      <category term="Struts2" scheme="hellotong.ml/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>Struts2（二）</title>
    <link href="hellotong.ml/struts2_02/"/>
    <id>hellotong.ml/struts2_02/</id>
    <published>2018-11-28T12:45:01.926Z</published>
    <updated>2018-11-28T12:47:22.992Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Struts2-访问-Servlet-的-API"><a href="#Struts2-访问-Servlet-的-API" class="headerlink" title="Struts2 访问 Servlet 的 API"></a>Struts2 访问 Servlet 的 API</h2><blockquote><p>在使用 Struts2 框架的过程中，我们发现 Struts2 和 Servlet 的解耦合的，但是在实际的开发中，经常会使用到 Servlet 中的 API，那么就必须学习 Struts2 如何访问 Servlet 中的 API 了。</p></blockquote><h3 id="使用完全解耦方式访问"><a href="#使用完全解耦方式访问" class="headerlink" title="使用完全解耦方式访问"></a>使用完全解耦方式访问</h3><h4 id="JSP-页面部分"><a href="#JSP-页面部分" class="headerlink" title="JSP 页面部分"></a>JSP 页面部分</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;方式一：使用完全解耦合的方式访问&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123; pageContext.request.contextPath &#125;/requestDemo1.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span>/&gt;&lt;br&gt;</span><br><span class="line">密码：&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>/&gt;&lt;br&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span> /&gt;&lt;br&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h4 id="编写-Action-类"><a href="#编写-Action-类" class="headerlink" title="编写 Action 类"></a>编写 Action 类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestDemo1</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一、接收参数</span></span><br><span class="line"><span class="comment">// 利用 Struts2 中的 ActionContext 对象</span></span><br><span class="line">ActionContext context = ActionContext.getContext();</span><br><span class="line"><span class="comment">// 调用 ActionContext 中的方法获得参数，类似于 request.getParameter()</span></span><br><span class="line">Map&lt;String, Object&gt; map = context.getParameters();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历 map</span></span><br><span class="line"><span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">String[] value = (String[]) map.get(key);</span><br><span class="line">System.out.println(key + <span class="string">"  "</span> + Arrays.toString(value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二、向域对象中存入数据</span></span><br><span class="line"><span class="comment">// 向 request 域中存数据</span></span><br><span class="line">context.put(<span class="string">"reqName"</span>, <span class="string">"reqValue"</span>);<span class="comment">// 相当于 request.setAttribute()</span></span><br><span class="line"><span class="comment">// 向 session 域中存数据</span></span><br><span class="line">context.getSession().put(<span class="string">"sessName"</span>, <span class="string">"sessValue"</span>);<span class="comment">// 相当于 session.setAttribute()</span></span><br><span class="line"><span class="comment">// 向 application 域中存数据</span></span><br><span class="line">context.getApplication().put(<span class="string">"appName"</span>, <span class="string">"appValue"</span>);<span class="comment">// 相当于 application.setAttribute()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>这种方式只能获取代表 request、session、application 的数据的 Map 集合。不能操作这些对象的中的方法。</p><h3 id="使用-Servlet-的-API-的原生方式访问"><a href="#使用-Servlet-的-API-的原生方式访问" class="headerlink" title="使用 Servlet 的 API 的原生方式访问"></a>使用 Servlet 的 API 的原生方式访问</h3><h4 id="JSP-页面部分-1"><a href="#JSP-页面部分-1" class="headerlink" title="JSP 页面部分"></a>JSP 页面部分</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;方式二：使用 Servlet 原生的方式访问&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123; pageContext.request.contextPath &#125;/requestDemo2.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span>/&gt;&lt;br&gt;</span><br><span class="line">密码：&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>/&gt;&lt;br&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span> /&gt;&lt;br&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h4 id="编写-Action-类-1"><a href="#编写-Action-类-1" class="headerlink" title="编写 Action 类"></a>编写 Action 类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestDemo2</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一、接收参数</span></span><br><span class="line"><span class="comment">// 使用 ServletActionContext 获得 request 对象</span></span><br><span class="line">HttpServletRequest request = ServletActionContext.getRequest();</span><br><span class="line"><span class="comment">// 接收参数</span></span><br><span class="line">Map&lt;String, String[]&gt; map = request.getParameterMap();</span><br><span class="line"><span class="comment">// 遍历 map，获得 name 和 value</span></span><br><span class="line"><span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">String[] strings = map.get(key);</span><br><span class="line">System.out.println(key + <span class="string">"  "</span> + Arrays.toString(strings));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二、向域对象中保存数据</span></span><br><span class="line"><span class="comment">// 向 request 域中存数据</span></span><br><span class="line">request.setAttribute(<span class="string">"reqName"</span>, <span class="string">"reqValue"</span>);</span><br><span class="line"><span class="comment">// 向 session 域中存数据</span></span><br><span class="line">request.getSession().setAttribute(<span class="string">"sessName"</span>, <span class="string">"sessValue"</span>);</span><br><span class="line"><span class="comment">// 向 ServletContext 域中存数据</span></span><br><span class="line">request.getServletContext().setAttribute(<span class="string">"appName"</span>, <span class="string">"appValue"</span>);</span><br><span class="line"><span class="comment">//ServletActionContext.getServletContext().setAttribute("appName", "appValue");</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h4><p>这种方式即可以操作域对象的数据，同时也可以获得对象的方法。</p><h3 id="使用接口注入的方式访问"><a href="#使用接口注入的方式访问" class="headerlink" title="使用接口注入的方式访问"></a>使用接口注入的方式访问</h3><h4 id="JSP-页面部分-2"><a href="#JSP-页面部分-2" class="headerlink" title="JSP 页面部分"></a>JSP 页面部分</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;方式三：使用接口注入的方式访问&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123; pageContext.request.contextPath &#125;/requestDemo3.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">姓名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span>/&gt;&lt;br&gt;</span><br><span class="line">密码：&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>/&gt;&lt;br&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span> /&gt;&lt;br&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h4 id="编写-Action-类-2"><a href="#编写-Action-类-2" class="headerlink" title="编写 Action 类"></a>编写 Action 类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestDemo3</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ServletRequestAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一、接收参数</span></span><br><span class="line"><span class="comment">// 通过接口注入的方式获得 request 对象</span></span><br><span class="line">Map&lt;String, String[]&gt; map = request.getParameterMap();</span><br><span class="line"><span class="comment">// 遍历 map，获得 name 和 value</span></span><br><span class="line"><span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">String[] strings = map.get(key);</span><br><span class="line">System.out.println(key + <span class="string">"  "</span> + Arrays.toString(strings));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二、向域对象中保存数据</span></span><br><span class="line"><span class="comment">// 向 request 域中存数据</span></span><br><span class="line">request.setAttribute(<span class="string">"reqName"</span>, <span class="string">"reqValue"</span>);</span><br><span class="line"><span class="comment">// 向 session 域中存数据</span></span><br><span class="line">request.getSession().setAttribute(<span class="string">"sessName"</span>, <span class="string">"sessValue"</span>);</span><br><span class="line"><span class="comment">// 向 application 域中存数据</span></span><br><span class="line">request.getServletContext().setAttribute(<span class="string">"appName"</span>, <span class="string">"appValue"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.execute();<span class="comment">// SUCCESS</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.request = request;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h4><p>Servlet 是单例的，多个程序访问同一个 Servlet 只会创建一个，所以存在线程安全问题。而 Action 是多例的，一次请求，创建一个 Action 的实例，不存在线程安全问题。</p><h2 id="Struts2-的结果页面的配置"><a href="#Struts2-的结果页面的配置" class="headerlink" title="Struts2 的结果页面的配置"></a>Struts2 的结果页面的配置</h2><h3 id="结果页面的配置"><a href="#结果页面的配置" class="headerlink" title="结果页面的配置"></a>结果页面的配置</h3><h4 id="全局结果页面的配置"><a href="#全局结果页面的配置" class="headerlink" title="全局结果页面的配置"></a>全局结果页面的配置</h4><p>全局结果页面指的是在这个包中配置一次，那么其他在这个包下的所有的 action 只要返回了这个值都会发现页面跳转。</p><p>作用范围：针对这个包下的所有的 action 都有效。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置全局结果页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">global-results</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/demo1/demo2.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">global-results</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="局部结果页面的配置"><a href="#局部结果页面的配置" class="headerlink" title="局部结果页面的配置"></a>局部结果页面的配置</h4><p>局部结果页面指的是只能在当前 action 中生效。</p><p>作用范围：仅对当前 action 有效。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"requestDemo3"</span> <span class="attr">class</span>=<span class="string">"com.test.struts2.demo1.RequestDemo3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Result-标签的配置"><a href="#Result-标签的配置" class="headerlink" title="Result 标签的配置"></a>Result 标签的配置</h3><p>result 标签用于配置页面的跳转，result 标签的两个属性</p><ul><li><p>name    ：逻辑视图的名称。默认值为 success</p><p>   type    ：页面跳转的类型</p><p>取值：</p><ul><li>dispatcher    ：默认值。请求转发（Action 转发到 JSP）</li><li>redirect        ：重定向。（Action 重定向到 JSP）<br>   chain        ：转发。（Action 转发到 Action）<br>   redirect        ：重定向。（Action 重定向到 Action）<br>   stream        ：Struts2 提供文件下载的功能</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"requestDemo1"</span> <span class="attr">class</span>=<span class="string">"com.test.struts2.demo1.RequestDemo1"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置局部结果页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">type</span>=<span class="string">"redirect"</span>&gt;</span>/demo1/demo2.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Struts2-的数据的封装"><a href="#Struts2-的数据的封装" class="headerlink" title="Struts2 的数据的封装"></a>Struts2 的数据的封装</h2><blockquote><p>Struts2 框架是一个 web 层框架，它提供了强大的数据封装的功能。</p></blockquote><h3 id="Struts2-的数据封装"><a href="#Struts2-的数据封装" class="headerlink" title="Struts2 的数据封装"></a>Struts2 的数据封装</h3><h4 id="属性驱动方式"><a href="#属性驱动方式" class="headerlink" title="属性驱动方式"></a>属性驱动方式</h4><h5 id="提供属性和-set-方法的方式（不常用）"><a href="#提供属性和-set-方法的方式（不常用）" class="headerlink" title="提供属性和 set 方法的方式（不常用）"></a>提供属性和 set 方法的方式（不常用）</h5><p>JSP 页面部分</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;方式一：属性驱动-提供 set 方法的方式&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123; pageContext.request.contextPath &#125;/userAction1.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> /&gt;&lt;br&gt;</span><br><span class="line">密码：&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span> /&gt;&lt;br&gt;</span><br><span class="line">年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span> /&gt;&lt;br&gt;</span><br><span class="line">生日：&lt;input type=<span class="string">"text"</span> name=<span class="string">"birthday"</span> /&gt;&lt;br&gt;</span><br><span class="line">薪水：&lt;input type=<span class="string">"text"</span> name=<span class="string">"salary"</span> /&gt;&lt;br&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;&lt;br&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>编写 Action 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction1</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供属性和 set 方法</span></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="keyword">private</span> Date birthday;</span><br><span class="line"><span class="keyword">private</span> Double salary;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(Double salary)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 接收数据</span></span><br><span class="line">System.out.println(username);</span><br><span class="line">System.out.println(password);</span><br><span class="line">System.out.println(age);</span><br><span class="line">System.out.println(birthday);</span><br><span class="line">System.out.println(salary);</span><br><span class="line"><span class="comment">// 封装数据</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUsername(username);</span><br><span class="line">user.setPassword(password);</span><br><span class="line">user.setAge(age);</span><br><span class="line">user.setBirthday(birthday);</span><br><span class="line">user.setSalary(salary);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> NONE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="页面中提供表达式的方式"><a href="#页面中提供表达式的方式" class="headerlink" title="页面中提供表达式的方式"></a>页面中提供表达式的方式</h5><p>JSP 页面部分</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;方式二：属性驱动-在页面提供表达式的方式&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123; pageContext.request.contextPath &#125;/userAction2.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"user.username"</span> /&gt;&lt;br&gt;</span><br><span class="line">密码：&lt;input type=<span class="string">"password"</span> name=<span class="string">"user.password"</span> /&gt;&lt;br&gt;</span><br><span class="line">年龄：&lt;input type=<span class="string">"text"</span> name=<span class="string">"user.age"</span> /&gt;&lt;br&gt;</span><br><span class="line">生日：&lt;input type=<span class="string">"text"</span> name=<span class="string">"user.birthday"</span> /&gt;&lt;br&gt;</span><br><span class="line">薪水：&lt;input type=<span class="string">"text"</span> name=<span class="string">"user.salary"</span> /&gt;&lt;br&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;&lt;br&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>编写 Action类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction2</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个私有的 User 对象</span></span><br><span class="line"><span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供 set 和 get 方法。get 方法必须提供，因为拦截器完成数据封装，需要创建对象，使用 get 方法可以获得到同一个对象，就可以将数据封装到同一个对象中。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.user = user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(user);</span><br><span class="line"><span class="keyword">return</span> NONE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模型驱动方式（最常用）"><a href="#模型驱动方式（最常用）" class="headerlink" title="模型驱动方式（最常用）"></a>模型驱动方式（最常用）</h4><p>JSP 页面部分</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;方式三：模型驱动-模型驱动的方式&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123; pageContext.request.contextPath &#125;/userAction3.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">用户名：&lt;input type=<span class="string">"text"</span> name=username<span class="string">" /&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">密码：&lt;input type="</span>password<span class="string">" name="</span>password<span class="string">" /&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">年龄：&lt;input type="</span>text<span class="string">" name="</span>age<span class="string">" /&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">生日：&lt;input type="</span>text<span class="string">" name="</span>birthday<span class="string">" /&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">薪水：&lt;input type="</span>text<span class="string">" name="</span>salary<span class="string">" /&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">&lt;input type="</span>submit<span class="string">" value="</span>提交<span class="string">"/&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br></pre></td></tr></table></figure><p>编写 Action 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction3</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用模型驱动的方式需提前手动创建一个对象的实例</span></span><br><span class="line"><span class="keyword">private</span> User user = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模型驱动需要使用的方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(user);</span><br><span class="line"><span class="keyword">return</span> NONE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="INPUT-逻辑视图"><a href="#INPUT-逻辑视图" class="headerlink" title="INPUT 逻辑视图"></a>INPUT 逻辑视图</h2><p>在 Action 接口中提供了五个逻辑视图的名称</p><ul><li>SUCCESS</li><li>ERROR</li><li>LOGIN</li><li>INPUT</li><li>NONE</li></ul><p>在 Struts2 框架底层的存储区域中有一块专门存储错误信息的区域，当出现错误的时候，Struts2 会把错误信息存储到这块区域中，最后拦截器检查这块区域中是否有错误信息，如果没有，直接执行目标 Action 对象，如果有的话，就会跳转到 INPUT 逻辑视图，那么如果在先前没有配置 INPUT 逻辑视图的话，默认就会报错提示你。</p><h3 id="INPUT-逻辑视图的配置"><a href="#INPUT-逻辑视图的配置" class="headerlink" title="INPUT 逻辑视图的配置"></a>INPUT 逻辑视图的配置</h3><p>如果出现错误，则跳转页面到 demo1.jsp 中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">global-results</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span>&gt;</span>/demo2/demo1.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">global-results</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Struts2-的复杂类型的数据封装"><a href="#Struts2-的复杂类型的数据封装" class="headerlink" title="Struts2 的复杂类型的数据封装"></a>Struts2 的复杂类型的数据封装</h2><h3 id="封装数据到-List-集合中"><a href="#封装数据到-List-集合中" class="headerlink" title="封装数据到 List 集合中"></a>封装数据到 List 集合中</h3><h4 id="JSP-页面部分-3"><a href="#JSP-页面部分-3" class="headerlink" title="JSP 页面部分"></a>JSP 页面部分</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;封装到 List 集合中：批量插入商品&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123; pageContext.request.contextPath &#125;/productAction1.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">商品名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"products[0].name"</span>&gt;&lt;br&gt;</span><br><span class="line">商品价格：&lt;input type=<span class="string">"text"</span> name=<span class="string">"products[0].price"</span>&gt;&lt;br&gt;</span><br><span class="line">商品名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"products[1].name"</span>&gt;&lt;br&gt;</span><br><span class="line">商品价格：&lt;input type=<span class="string">"text"</span> name=<span class="string">"products[1].price"</span>&gt;&lt;br&gt;</span><br><span class="line">商品名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"products[2].name"</span>&gt;&lt;br&gt;</span><br><span class="line">商品价格：&lt;input type=<span class="string">"text"</span> name=<span class="string">"products[2].price"</span>&gt;&lt;br&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h4 id="编写-Action-类-3"><a href="#编写-Action-类-3" class="headerlink" title="编写 Action 类"></a>编写 Action 类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductAction1</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用的是页面表达式的方式封装数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Product&gt; products;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供 set 和 get 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">getProducts</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> products;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProducts</span><span class="params">(List&lt;Product&gt; products)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.products = products;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Product product : products) &#123;</span><br><span class="line">System.out.println(product);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> NONE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装数据到-Map-集合中"><a href="#封装数据到-Map-集合中" class="headerlink" title="封装数据到 Map 集合中"></a>封装数据到 Map 集合中</h3><h4 id="JSP-页面部分-4"><a href="#JSP-页面部分-4" class="headerlink" title="JSP 页面部分"></a>JSP 页面部分</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;封装到 Map 集合中：批量插入商品&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123; pageContext.request.contextPath &#125;/productAction2.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">商品名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"map['one'].name"</span>&gt;&lt;br&gt;</span><br><span class="line">商品价格：&lt;input type=<span class="string">"text"</span> name=<span class="string">"map['one'].price"</span>&gt;&lt;br&gt;</span><br><span class="line">商品名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"map['two'].name"</span>&gt;&lt;br&gt;</span><br><span class="line">商品价格：&lt;input type=<span class="string">"text"</span> name=<span class="string">"map['two'].price"</span>&gt;&lt;br&gt;</span><br><span class="line">商品名称：&lt;input type=<span class="string">"text"</span> name=<span class="string">"map['three'].name"</span>&gt;&lt;br&gt;</span><br><span class="line">商品价格：&lt;input type=<span class="string">"text"</span> name=<span class="string">"map['three'].price"</span>&gt;&lt;br&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h4 id="编写-Action-类-4"><a href="#编写-Action-类-4" class="headerlink" title="编写 Action 类"></a>编写 Action 类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductAction2</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供一个私有的 Map 对象</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, Product&gt; map;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供 set 和 get 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Product&gt; <span class="title">getMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMap</span><span class="params">(Map&lt;String, Product&gt; map)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.map = map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">Product product = map.get(key);</span><br><span class="line">System.out.println(key + <span class="string">"  "</span> + product);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> NONE;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CRM-保存客户案例"><a href="#CRM-保存客户案例" class="headerlink" title="CRM 保存客户案例"></a>CRM 保存客户案例</h2><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><ol><li>点击左侧的菜单项。</li><li>页面跳转到添加页面。</li><li>输入数据，点击提交，将数据到后台。</li><li>web 层接收封装数据传递给 service 层，service 层调用 dao 层的方法，将数据保存到数据库中。</li><li>最后页面到客户列表显示页面。</li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="JSP-页面代码"><a href="#JSP-页面代码" class="headerlink" title="JSP 页面代码"></a>JSP 页面代码</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;TR&gt;</span><br><span class="line">    &lt;TD class=menuSmall&gt;&lt;A class=style2 href="$&#123; pageContext.request.contextPath &#125;/customer_saveUI.action" target=main&gt;－ 新增客户&lt;/A&gt;&lt;/TD&gt;</span><br><span class="line">&lt;/TR&gt;</span><br></pre></td></tr></table></figure><h4 id="struts2-xml-配置"><a href="#struts2-xml-配置" class="headerlink" title="struts2.xml 配置"></a>struts2.xml 配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置Struts2的常量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.action.extension"</span> <span class="attr">value</span>=<span class="string">"action"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"crm"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"customer_*"</span> <span class="attr">class</span>=<span class="string">"com.test.web.action.CustomerAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"findSuccess"</span>&gt;</span>/jsp/customer/list.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"saveUI"</span>&gt;</span>/jsp/customer/add.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"saveSuccess"</span> <span class="attr">type</span>=<span class="string">"redirectAction"</span>&gt;</span>customer_find.action<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Action-类"><a href="#Action-类" class="headerlink" title="Action 类"></a>Action 类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.web.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.struts2.ServletActionContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ModelDriven;</span><br><span class="line"><span class="keyword">import</span> com.test.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> com.test.service.CustomerService;</span><br><span class="line"><span class="keyword">import</span> com.test.service.impl.CustomerServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">Customer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 模型驱动的方式需要提供对象的实例</span></span><br><span class="line"><span class="keyword">private</span> Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供模型驱动需要的方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Customer <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> customer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存客户的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 接收数据</span></span><br><span class="line"><span class="comment">// 封装数据</span></span><br><span class="line"><span class="comment">// 使用模型驱动的方式接收数据以及封装数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 service 层</span></span><br><span class="line">CustomerService customerService = <span class="keyword">new</span> CustomerServiceImpl();</span><br><span class="line">customerService.save(customer);</span><br><span class="line"><span class="comment">// 页面跳转</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"saveSuccess"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 跳转到添加页面的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveUI</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"saveUI"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询客户列表的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CustomerService customerService = <span class="keyword">new</span> CustomerServiceImpl();</span><br><span class="line">List&lt;Customer&gt; list = customerService.find();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得 request 对象，将获取到的数据放到域中返回到页面上</span></span><br><span class="line">ServletActionContext.getRequest().setAttribute(<span class="string">"list"</span>, list);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"findSuccess"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="service-层"><a href="#service-层" class="headerlink" title="service 层"></a>service 层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.test.dao.CustomerDao;</span><br><span class="line"><span class="keyword">import</span> com.test.dao.impl.CustomerDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.test.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> com.test.service.CustomerService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">CustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">// 保存客户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">CustomerDao customerDao = <span class="keyword">new</span> CustomerDaoImpl();</span><br><span class="line">customerDao.save(customer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">// 查询客户列表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CustomerDao customerDao = <span class="keyword">new</span> CustomerDaoImpl();</span><br><span class="line"><span class="keyword">return</span> customerDao.find();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dao-层"><a href="#dao-层" class="headerlink" title="dao 层"></a>dao 层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.test.dao.CustomerDao;</span><br><span class="line"><span class="keyword">import</span> com.test.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> com.test.utils.HibernateUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">implements</span> <span class="title">CustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">// 保存客户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">session.save(customer);</span><br><span class="line"></span><br><span class="line">tx.commit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">// 查找客户列表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询所有客户</span></span><br><span class="line">List&lt;Customer&gt; list = session.createQuery(<span class="string">"from Customer"</span>).list();</span><br><span class="line"></span><br><span class="line">tx.commit();</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p><img src="http://pifu006nk.bkt.clouddn.com/blog/20181128/sLk5lsLOC5N2.jpg?imageslim" alt="mark"></p><p><img src="http://pifu006nk.bkt.clouddn.com/blog/20181128/6KIaRcEtDo5u.jpg?imageslim" alt="mark"></p><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><p>能够学会使用 Struts2 接收数据和封装数据。</p>]]></content>
    
    <summary type="html">
    
      Struts2 基础篇（二），Struts2 是基于 MVC 设计模式的 Web 层框架，让我们开启 Struts2 学习之旅吧。
    
    </summary>
    
      <category term="Java" scheme="hellotong.ml/categories/Java/"/>
    
    
      <category term="Java" scheme="hellotong.ml/tags/Java/"/>
    
      <category term="Struts2" scheme="hellotong.ml/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>Struts2（一）</title>
    <link href="hellotong.ml/struts2_01/"/>
    <id>hellotong.ml/struts2_01/</id>
    <published>2018-11-27T11:29:40.348Z</published>
    <updated>2018-11-27T12:26:04.640Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Struts-的概述"><a href="#Struts-的概述" class="headerlink" title="Struts 的概述"></a>Struts 的概述</h2><h3 id="什么是-Struts2"><a href="#什么是-Struts2" class="headerlink" title="什么是 Struts2"></a>什么是 Struts2</h3><p>Struts 是一个基于 MVC 设计模式的 Web 层 框架。它本质上相当于一个 Servlet，在 MVC 设计模式中，Struts2 作为控制器来建立模型与视图的数据交互。</p><h3 id="常用的-web-层框架"><a href="#常用的-web-层框架" class="headerlink" title="常用的 web 层框架"></a>常用的 web 层框架</h3><p><strong>Struts2</strong>、Struts1、WebWork、<strong>SpringMVC</strong></p><h3 id="Web-层框架基于前端控制器模型设计"><a href="#Web-层框架基于前端控制器模型设计" class="headerlink" title="Web 层框架基于前端控制器模型设计"></a>Web 层框架基于前端控制器模型设计</h3><p><img src="http://pifu006nk.bkt.clouddn.com/blog/20181127/l4B2xjeCdGia.png?imageslim" alt="mark"></p><h2 id="Struts2-的入门"><a href="#Struts2-的入门" class="headerlink" title="Struts2 的入门"></a>Struts2 的入门</h2><h3 id="下载-Struts2-的开发环境并揭解压"><a href="#下载-Struts2-的开发环境并揭解压" class="headerlink" title="下载 Struts2 的开发环境并揭解压"></a>下载 Struts2 的开发环境并揭解压</h3><p><a href="http://struts.apache.org/" target="_blank" rel="noopener">http://struts.apache.org/</a> </p><p>Struts2 的目录结构</p><p><img src="http://pifu006nk.bkt.clouddn.com/blog/20181127/cJ50rDDIAs5P.jpg?imageslim" alt="mark"></p><p>apps    ：Struts2 提供的应用</p><p>docs    ：Struts2 的开发文档和 API</p><p>lib        ：Struts2 框架的开发的 jar 包</p><p>src        ：Struts2 的源码</p><h3 id="创建动态-web-项目，引入-jar-包"><a href="#创建动态-web-项目，引入-jar-包" class="headerlink" title="创建动态 web 项目，引入 jar 包"></a>创建动态 web 项目，引入 jar 包</h3><p><img src="http://pifu006nk.bkt.clouddn.com/blog/20181127/zFpmkkUsLLBl.jpg?imageslim" alt="mark"></p><h3 id="创建一个-jsp-页面"><a href="#创建一个-jsp-页面" class="headerlink" title="创建一个 jsp 页面"></a>创建一个 jsp 页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Struts2 的入门<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;pageContext.request.contextPath &#125;/hello.action"</span>&gt;</span>Struts2 的入门<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写-Action-类"><a href="#编写-Action-类" class="headerlink" title="编写 Action 类"></a>编写 Action 类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Struts2 的入门的 Action</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tong</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提供一个方法：</span></span><br><span class="line"><span class="comment"> * * 方法签名是固定的，公有访问、返回值是 String 类型、方法名是 execute() 且方法没有参数</span></span><br><span class="line"><span class="comment"> * * 因为底层需要使用反射调用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"HelloAction 执行了..."</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对-Action-进行配置"><a href="#对-Action-进行配置" class="headerlink" title="对 Action 进行配置"></a>对 Action 进行配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置 struts2 的常量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.action.extension"</span> <span class="attr">value</span>=<span class="string">"action"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Struts2 为了管理 Action的配置，通过包来管理 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置 Struts2 的包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"demo1"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置 Action --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">class</span>=<span class="string">"com.test.struts.demo1.HelloAction"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置前端控制器（过滤器）"><a href="#配置前端控制器（过滤器）" class="headerlink" title="配置前端控制器（过滤器）"></a>配置前端控制器（过滤器）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置 Struts2 的核心过滤器 --&gt;</span><br><span class="line">&lt;filter&gt;</span><br><span class="line">  &lt;filter-name&gt;struts2&lt;/filter-name&gt;</span><br><span class="line">  &lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">apache</span>.<span class="title">struts2</span>.<span class="title">dispatcher</span>.<span class="title">ng</span>.<span class="title">filter</span>.<span class="title">StrutsPrepareAndExecuteFilter</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">struts2</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="改写-Action-中的方法的返回值"><a href="#改写-Action-中的方法的返回值" class="headerlink" title="改写 Action 中的方法的返回值"></a>改写 Action 中的方法的返回值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"HelloAction 执行了..."</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="改写-struts-xml"><a href="#改写-struts-xml" class="headerlink" title="改写 struts.xml"></a>改写 struts.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置 Struts2 的包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"demo1"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 Action --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">class</span>=<span class="string">"com.test.struts.demo1.HelloAction"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/demo1/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写-success-jsp-页面"><a href="#编写-success-jsp-页面" class="headerlink" title="编写 success.jsp 页面"></a>编写 success.jsp 页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>页面跳转成功！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Struts2-的执行流程"><a href="#Struts2-的执行流程" class="headerlink" title="Struts2 的执行流程"></a>Struts2 的执行流程</h2><p>当用户访问某一个 Action 时，先经过核心过滤器。在核心过滤器中会执行一组拦截器（这组拦截器实现了一部分的功能），通过 struts.xml 配置文件找到 Action 对象，执行目标 Action，根据 Action 中方法的返回值，从 struts.xml 文件中找到 result 标签完成页面跳转。</p><h2 id="Struts2-的配置文件的加载顺序"><a href="#Struts2-的配置文件的加载顺序" class="headerlink" title="Struts2 的配置文件的加载顺序"></a>Struts2 的配置文件的加载顺序</h2><p><code>default.properties</code></p><p><code>struts-default.xml</code></p><p><code>struts-plugin.xml</code></p><p><strong><code>struts.xml</code></strong></p><p><strong><code>struts.properties</code></strong></p><p><strong><code>web.xml</code></strong></p><p>注意：后配置的常量的值会覆盖先配置的常量的值。</p><h2 id="Action-的配置"><a href="#Action-的配置" class="headerlink" title="Action 的配置"></a>Action 的配置</h2><h3 id="package-相关配置"><a href="#package-相关配置" class="headerlink" title="package 相关配置"></a>package 相关配置</h3><blockquote><p>package 标签称为包，这个包与 Java 中的包概念不一样，它是为了更好的管理 action 的配置的。</p></blockquote><p>package 标签的属性</p><ul><li><p>name          ：包的名称，在一个项目中不重名即可。</p><p>extends          ：继承哪个包，通常继承 <code>struts-default</code> 这个包。</p></li><li><p>namespace ：名称空间，与 <code>&lt;action&gt;</code> 标签中的 name 共同决定 Action 的访问路径。</p><ul><li><p>名称空间的三种写法</p><p>带名称的名称空间        ：<code>namespace=&quot;/aaa&quot;</code></p><p>根名称空间            ：<code>namespace=&quot;/&quot;</code></p><p>默认名称空间            ：<code>namespace=&quot;&quot;</code></p></li></ul></li><li><p>abstract          ：抽象的，默认值为 true，意思就是可以被其他包继承。</p></li></ul><h3 id="action-的相关配置"><a href="#action-的相关配置" class="headerlink" title="action 的相关配置"></a>action 的相关配置</h3><p>action 标签的属性</p><ul><li>name        ：与 namespace 共同决定 Action 的访问路径<br>   class        ：Action 类的全路径<br>   method        ：执行 Action 中的方法的名称，默认方法为 execute<br>   converter    ：用于自定义设置类型转换器</li></ul><h2 id="常量的配置"><a href="#常量的配置" class="headerlink" title="常量的配置"></a>常量的配置</h2><blockquote><p>在 Struts2 框架中提供了很多了常量，在 <code>default-properties</code> 配置文件中。</p></blockquote><p>修改常量的值有三种方式</p><ol><li><p>在 <code>struts.xml</code> 中修改</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置 struts2 的常量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.action.extension"</span> <span class="attr">value</span>=<span class="string">"action"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 <code>struts.properties</code> 中修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">struts.action.extension=action</span><br></pre></td></tr></table></figure></li><li><p>在 <code>web.xml</code> 中修改</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 修改常量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>struts.action.extension<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>action<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="分模块开发的配置"><a href="#分模块开发的配置" class="headerlink" title="分模块开发的配置"></a>分模块开发的配置</h2><p>使用 <code>include</code> 标签配置，在主配置文件 <code>struts.xml</code> 中引入一个子模块的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入分模块下的 struts2 配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">"com/test/struts/demo2/struts_demo2.xml"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Action-类的访问"><a href="#Action-类的访问" class="headerlink" title="Action 类的访问"></a>Action 类的访问</h2><h3 id="Action-类的写法"><a href="#Action-类的写法" class="headerlink" title="Action 类的写法"></a>Action 类的写法</h3><h4 id="Action-类是一个-POJO-的类"><a href="#Action-类是一个-POJO-的类" class="headerlink" title="Action 类是一个 POJO 的类"></a>Action 类是一个 POJO 的类</h4><blockquote><p>POJO 即一个简单的 Java 类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Action 类的编写方式一：Action 类是一个 POJO 的类，即一个简单的 Java 类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tong</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActionDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"ActionDemo1 执行了..."</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Action-类实现一个-Action-接口"><a href="#Action-类实现一个-Action-接口" class="headerlink" title="Action 类实现一个 Action 接口"></a>Action 类实现一个 Action 接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.Action;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Action 类的编写方式二：实现 Action接口</span></span><br><span class="line"><span class="comment"> * * Action 接口中包含五个逻辑视图常量</span></span><br><span class="line"><span class="comment"> * * SUCCESS: 成功</span></span><br><span class="line"><span class="comment"> * * ERROR: 失败</span></span><br><span class="line"><span class="comment"> * * LOGIN: 登录出错页面跳转</span></span><br><span class="line"><span class="comment"> * * INPUT: 表单校验出错跳转</span></span><br><span class="line"><span class="comment"> *  * NONE: 不跳转</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tong</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActionDemo2</span> <span class="keyword">implements</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"ActionDemo2 执行了..."</span>);</span><br><span class="line"><span class="keyword">return</span> NONE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Action-类继承一个-ActionSupport-类（推荐）"><a href="#Action-类继承一个-ActionSupport-类（推荐）" class="headerlink" title="Action 类继承一个 ActionSupport 类（推荐）"></a>Action 类继承一个 ActionSupport 类（推荐）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Action 类的编写方式三：Action 类继承 ActionSupport 类</span></span><br><span class="line"><span class="comment"> * 推荐使用这种方式编写 Action 类，ActionSupport 里封装了很多功能</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tong</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActionDemo3</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"ActionDemo3 执行了..."</span>);</span><br><span class="line"><span class="keyword">return</span> NONE;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Action-的访问"><a href="#Action-的访问" class="headerlink" title="Action 的访问"></a>Action 的访问</h3><h4 id="通过-lt-action-gt-标签中-method-的设置"><a href="#通过-lt-action-gt-标签中-method-的设置" class="headerlink" title="通过 &lt;action&gt; 标签中 method 的设置"></a>通过 <code>&lt;action&gt;</code> 标签中 method 的设置</h4><p>action 配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置 Action --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用 method 方式访问 Action 的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"userFind"</span> <span class="attr">class</span>=<span class="string">"com.test.struts.demo3.UserAction"</span> <span class="attr">method</span>=<span class="string">"find"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"userUpdate"</span> <span class="attr">class</span>=<span class="string">"com.test.struts.demo3.UserAction"</span> <span class="attr">method</span>=<span class="string">"update"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"userDelete"</span> <span class="attr">class</span>=<span class="string">"com.test.struts.demo3.UserAction"</span> <span class="attr">method</span>=<span class="string">"delete"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"userSave"</span> <span class="attr">class</span>=<span class="string">"com.test.struts.demo3.UserAction"</span> <span class="attr">method</span>=<span class="string">"save"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>页面访问</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;通过 method 的方式访问 Action&lt;/h3&gt;</span><br><span class="line">&lt;a href="$&#123; pageContext.request.contextPath &#125;/userFind.action"&gt;查询用户&lt;/a&gt;&lt;/br&gt;</span><br><span class="line">&lt;a href="$&#123; pageContext.request.contextPath &#125;/userUpdate.action"&gt;修改用户&lt;/a&gt;&lt;/br&gt;</span><br><span class="line">&lt;a href="$&#123; pageContext.request.contextPath &#125;/userDelete.action"&gt;删除用户&lt;/a&gt;&lt;/br&gt;</span><br><span class="line">&lt;a href="$&#123; pageContext.request.contextPath &#125;/userSave.action"&gt;保存用户&lt;/a&gt;&lt;/br&gt;</span><br></pre></td></tr></table></figure><h4 id="通过通配符的方式进行配置（推荐）"><a href="#通过通配符的方式进行配置（推荐）" class="headerlink" title="通过通配符的方式进行配置（推荐）"></a>通过通配符的方式进行配置（推荐）</h4><p>action 配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过通配符的方式访问 Action 的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"product_*"</span> <span class="attr">class</span>=<span class="string">"com.test.struts.demo3.ProductAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>编写访问路径</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;通过 通配符 的方式访问 Action&lt;/h3&gt;</span><br><span class="line">&lt;a href="$&#123; pageContext.request.contextPath &#125;/product_find.action"&gt;查询商品&lt;/a&gt;&lt;/br&gt;</span><br><span class="line">&lt;a href="$&#123; pageContext.request.contextPath &#125;/product_update.action"&gt;修改商品&lt;/a&gt;&lt;/br&gt;</span><br><span class="line">&lt;a href="$&#123; pageContext.request.contextPath &#125;/product_delete.action"&gt;删除商品&lt;/a&gt;&lt;/br&gt;</span><br><span class="line">&lt;a href="$&#123; pageContext.request.contextPath &#125;/product_save.action"&gt;保存商品&lt;/a&gt;&lt;/br&gt;</span><br></pre></td></tr></table></figure><h4 id="通过动态方法访问的方式"><a href="#通过动态方法访问的方式" class="headerlink" title="通过动态方法访问的方式"></a>通过动态方法访问的方式</h4><p>在使用动态方法访问之前，需要先通过常量开启动态访问</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启动态方式访问 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.enable.DynamicMethodInvocation"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>action 配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过动态方法访问 的方式去访问 Action 的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"com.test.struts.demo3.CustomerAction"</span>&gt;</span><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写访问路径</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;通过动态方法访问的方式去访问 Action&lt;/h3&gt;</span><br><span class="line">&lt;a href="$&#123; pageContext.request.contextPath &#125;/customer!find.action"&gt;查询客户&lt;/a&gt;&lt;/br&gt;</span><br><span class="line">&lt;a href="$&#123; pageContext.request.contextPath &#125;/customer!update.action"&gt;修改客户&lt;/a&gt;&lt;/br&gt;</span><br><span class="line">&lt;a href="$&#123; pageContext.request.contextPath &#125;/customer!delete.action"&gt;删除客户&lt;/a&gt;&lt;/br&gt;</span><br><span class="line">&lt;a href="$&#123; pageContext.request.contextPath &#125;/customer!save.action"&gt;保存客户&lt;/a&gt;&lt;/br&gt;</span><br></pre></td></tr></table></figure><h2 id="CRM-客户列表显示案例"><a href="#CRM-客户列表显示案例" class="headerlink" title="CRM 客户列表显示案例"></a>CRM 客户列表显示案例</h2><h3 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h3><h4 id="创建-web-项目，引入-jar-包"><a href="#创建-web-项目，引入-jar-包" class="headerlink" title="创建 web 项目，引入 jar 包"></a>创建 web 项目，引入 jar 包</h4><p>引入 Struts2、Hibernate、jstl 的 jar 包</p><h4 id="引入配置文件"><a href="#引入配置文件" class="headerlink" title="引入配置文件"></a>引入配置文件</h4><p>核心配置、映射文件、日志文件</p><h4 id="创建数据库和表"><a href="#创建数据库和表" class="headerlink" title="创建数据库和表"></a>创建数据库和表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`cst_customer`</span> (</span><br><span class="line">  <span class="string">`cust_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'客户编号(主键)'</span>,</span><br><span class="line">  <span class="string">`cust_name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户名称(公司名称)'</span>,</span><br><span class="line">  <span class="string">`cust_source`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户信息来源'</span>,</span><br><span class="line">  <span class="string">`cust_industry`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户所属行业'</span>,</span><br><span class="line">  <span class="string">`cust_level`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户级别'</span>,</span><br><span class="line">  <span class="string">`cust_phone`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'固定电话'</span>,</span><br><span class="line">  <span class="string">`cust_mobile`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'移动电话'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`cust_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><h4 id="创建三层架构的包结构"><a href="#创建三层架构的包结构" class="headerlink" title="创建三层架构的包结构"></a>创建三层架构的包结构</h4><p>web、service、dao、domain、utils 包</p><p><img src="D:\下载\PanDownload下载\黑马\我的笔记\23_struts2_day01\包结构.jpg" alt=""></p><h4 id="引入相应的页面"><a href="#引入相应的页面" class="headerlink" title="引入相应的页面"></a>引入相应的页面</h4><h3 id="案例的代码实现"><a href="#案例的代码实现" class="headerlink" title="案例的代码实现"></a>案例的代码实现</h3><h4 id="确定操作位置，修改请求路径"><a href="#确定操作位置，修改请求路径" class="headerlink" title="确定操作位置，修改请求路径"></a>确定操作位置，修改请求路径</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TR</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">TD</span> <span class="attr">class</span>=<span class="string">menuSmall</span>&gt;</span><span class="tag">&lt;<span class="name">A</span> <span class="attr">class</span>=<span class="string">style2</span> <span class="attr">href</span>=<span class="string">"/struts2_crm/customer_find.action"</span> <span class="attr">target</span>=<span class="string">main</span>&gt;</span>－ 客户列表<span class="tag">&lt;/<span class="name">A</span>&gt;</span><span class="tag">&lt;/<span class="name">TD</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">TR</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="编写-Action、Service、Dao-中的接口和实现类"><a href="#编写-Action、Service、Dao-中的接口和实现类" class="headerlink" title="编写 Action、Service、Dao 中的接口和实现类"></a>编写 Action、Service、Dao 中的接口和实现类</h4><p>Action 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.struts2.ServletActionContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"><span class="keyword">import</span> com.test.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> com.test.service.CustomerService;</span><br><span class="line"><span class="keyword">import</span> com.test.service.impl.CustomerServiceImpl;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * CustomerAction 类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CustomerService customerService = <span class="keyword">new</span> CustomerServiceImpl();</span><br><span class="line">List&lt;Customer&gt; list = customerService.find();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得 request 对象，将获取到的数据放到域中返回到页面上</span></span><br><span class="line">ServletActionContext.getRequest().setAttribute(<span class="string">"list"</span>, list);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"findSuccess"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Service 接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.test.dao.CustomerDao;</span><br><span class="line"><span class="keyword">import</span> com.test.dao.impl.CustomerDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.test.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> com.test.service.CustomerService;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * CustomerService 接口的实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">CustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CustomerDao customerDao = <span class="keyword">new</span> CustomerDaoImpl();</span><br><span class="line"><span class="keyword">return</span> customerDao.find();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dao 接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.test.dao.CustomerDao;</span><br><span class="line"><span class="keyword">import</span> com.test.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> com.test.utils.HibernateUtils;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * CustomerDao 接口的实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">implements</span> <span class="title">CustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询所有客户</span></span><br><span class="line">List&lt;Customer&gt; list = session.createQuery(<span class="string">"from Customer"</span>).list();</span><br><span class="line"></span><br><span class="line">tx.commit();</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置-Action"><a href="#配置-Action" class="headerlink" title="配置 Action"></a>配置 Action</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置Struts2的常量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.action.extension"</span> <span class="attr">value</span>=<span class="string">"action"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"crm"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"customer_*"</span> <span class="attr">class</span>=<span class="string">"com.test.web.action.CustomerAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"findSuccess"</span>&gt;</span>/jsp/customer/list.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="编写页面"><a href="#编写页面" class="headerlink" title="编写页面"></a>编写页面</h4><p>使用 jstl 获取 request 域中的数据并显示到页面上</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;TBODY&gt;</span><br><span class="line">    &lt;TR</span><br><span class="line">        style=<span class="string">"FONT-WEIGHT: bold; FONT-STYLE: normal; BACKGROUND-COLOR: #eeeeee; TEXT-DECORATION: none"</span>&gt;</span><br><span class="line">        &lt;TD&gt;客户名称&lt;/TD&gt;</span><br><span class="line">        &lt;TD&gt;客户级别&lt;/TD&gt;</span><br><span class="line">        &lt;TD&gt;客户来源&lt;/TD&gt;</span><br><span class="line">        &lt;TD&gt;客户所属职业&lt;/TD&gt;</span><br><span class="line">        &lt;TD&gt;电话&lt;/TD&gt;</span><br><span class="line">        &lt;TD&gt;手机&lt;/TD&gt;</span><br><span class="line">        &lt;TD&gt;操作&lt;/TD&gt;</span><br><span class="line">    &lt;/TR&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123;list &#125;"</span> <span class="keyword">var</span>=<span class="string">"customer"</span>&gt;</span><br><span class="line">        &lt;TR</span><br><span class="line">            style=<span class="string">"FONT-WEIGHT: normal; FONT-STYLE: normal; BACKGROUND-COLOR: white; TEXT-DECORATION: none"</span>&gt;</span><br><span class="line">            &lt;TD&gt;$&#123;customer.cust_name &#125;&lt;/TD&gt;</span><br><span class="line">            &lt;TD&gt;$&#123;customer.cust_level &#125;&lt;/TD&gt;</span><br><span class="line">            &lt;TD&gt;$&#123;customer.cust_source &#125;&lt;/TD&gt;</span><br><span class="line">            &lt;TD&gt;$&#123;customer.cust_industry &#125;&lt;/TD&gt;</span><br><span class="line">            &lt;TD&gt;$&#123;customer.cust_phone &#125;&lt;/TD&gt;</span><br><span class="line">            &lt;TD&gt;$&#123;customer.cust_mobile &#125;&lt;/TD&gt;</span><br><span class="line">            &lt;TD&gt;</span><br><span class="line">                &lt;a href="$&#123;pageContext.request.contextPath &#125;/customerServlet?method=edit&amp;custId=$&#123;customer.cust_id&#125;"&gt;修改&lt;/a&gt;</span><br><span class="line">                &amp;nbsp;&amp;nbsp;</span><br><span class="line">                &lt;a href="$&#123;pageContext.request.contextPath &#125;/customerServlet?method=delete&amp;custId=$&#123;customer.cust_id&#125;"&gt;删除&lt;/a&gt;</span><br><span class="line">            &lt;/TD&gt;</span><br><span class="line">        &lt;/TR&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/TBODY&gt;</span><br></pre></td></tr></table></figure><h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p><img src="http://pifu006nk.bkt.clouddn.com/blog/20181127/8tK0uFSrJOaO.jpg?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      Struts2 基础篇（一），Struts2 是基于 MVC 设计模式的 Web 层框架，让我们开启 Struts2 学习之旅吧。
    
    </summary>
    
      <category term="Java" scheme="hellotong.ml/categories/Java/"/>
    
    
      <category term="Java" scheme="hellotong.ml/tags/Java/"/>
    
      <category term="Struts2" scheme="hellotong.ml/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate (四)</title>
    <link href="hellotong.ml/hibernate04/"/>
    <id>hellotong.ml/hibernate04/</id>
    <published>2018-11-25T13:48:14.110Z</published>
    <updated>2018-11-25T13:59:38.273Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hibernate-的查询方式"><a href="#Hibernate-的查询方式" class="headerlink" title="Hibernate 的查询方式"></a>Hibernate 的查询方式</h2><blockquote><p>Hibernate 共提供了五种查询方式。</p></blockquote><h3 id="OID-查询"><a href="#OID-查询" class="headerlink" title="OID 查询"></a>OID 查询</h3><h4 id="使用-get-方法"><a href="#使用-get-方法" class="headerlink" title="使用 get 方法"></a>使用 get 方法</h4><p><code>Customer customer = session.get(Customer.class, 1l);</code></p><h4 id="使用-load-方法"><a href="#使用-load-方法" class="headerlink" title="使用 load 方法"></a>使用 load 方法</h4><p><code>Customer customer = session.load(Customer.class, 1l);</code></p><h3 id="对象导航查询"><a href="#对象导航查询" class="headerlink" title="对象导航查询"></a>对象导航查询</h3><p>对象导航查询是 Hibernate 根据一个已经查询到的对象获得其关联的对象的一种查询方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过客户获取联系人</span></span><br><span class="line">Customer customer = session.get(Customer.class, <span class="number">1l</span>);<span class="comment">// 查询 1 号客户</span></span><br><span class="line">Set&lt;LinkMan&gt; linkMans = customer.getLinkMans();<span class="comment">// 获得 1 号客户的所有的联系人的集合</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过联系人获取客户</span></span><br><span class="line">LinkMan linkMan = session.get(LinkMan.class, <span class="number">1l</span>);<span class="comment">// 查询 1 号联系人</span></span><br><span class="line">Customer customer = linkMan.getCustomer();<span class="comment">// 查询 1 号联系人所属的客户</span></span><br></pre></td></tr></table></figure><h3 id="HQL-检索"><a href="#HQL-检索" class="headerlink" title="HQL 检索"></a>HQL 检索</h3><p>HQL（Hibernate Query Language）查询，是一种面向对象的查询语言，语法类似于 SQL，通过 <code>session.createQuery()</code>    接收一个 HQL 语句来进行查询。</p><h4 id="HQL-的简单查询"><a href="#HQL-的简单查询" class="headerlink" title="HQL 的简单查询"></a>HQL 的简单查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HQL 的简单查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// HQL 的简单查询</span></span><br><span class="line">    Query query = session.createQuery(<span class="string">"from Customer"</span>);</span><br><span class="line">    List&lt;Customer&gt; list = query.list();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SQL 中支持 * 号的写法，但 HQL 中不支持</span></span><br><span class="line">    <span class="comment">/*Query query = session.createQuery("select * from Customer");</span></span><br><span class="line"><span class="comment">List&lt;Customer&gt; list = query.list();// 报错   */</span></span><br><span class="line">    <span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HQL-的别名查询"><a href="#HQL-的别名查询" class="headerlink" title="HQL 的别名查询"></a>HQL 的别名查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HQL 的别名查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    Query query = session.createQuery(<span class="string">"from Customer c"</span>);</span><br><span class="line">    List&lt;Customer&gt; list = query.list();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Query query = session.createQuery("select c from Customer c");</span></span><br><span class="line"><span class="comment">List&lt;Customer&gt; list = query.list();*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HQL-的排序查询"><a href="#HQL-的排序查询" class="headerlink" title="HQL 的排序查询"></a>HQL 的排序查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HQL 的排序查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排序查询</span></span><br><span class="line">    <span class="comment">// 默认是升序的：order by ~ asc</span></span><br><span class="line">    <span class="comment">/*Query query = session.createQuery("from Customer order by cust_id");</span></span><br><span class="line"><span class="comment">List&lt;Customer&gt; list = query.list();*/</span></span><br><span class="line">    <span class="comment">// 设置降序排序：order by ~ desc</span></span><br><span class="line">    Query query = session.createQuery(<span class="string">"from Customer order by cust_id desc"</span>);</span><br><span class="line">    List&lt;Customer&gt; list = query.list();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HQL-的条件查询"><a href="#HQL-的条件查询" class="headerlink" title="HQL 的条件查询"></a>HQL 的条件查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* HQL 的条件查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 条件查询，可分为两种</span></span><br><span class="line">    <span class="comment">// 1. 按位置绑定</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一个条件的查询</span></span><br><span class="line">    <span class="comment">/* Query query = session.createQuery("from Customer where cust_name = ?");</span></span><br><span class="line"><span class="comment">// 设置条件</span></span><br><span class="line"><span class="comment">query.setParameter(0, "张三");*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多个条件的查询</span></span><br><span class="line">    <span class="comment">/*Query query = session.createQuery("from Customer where cust_name like ? and cust_source = ?");</span></span><br><span class="line"><span class="comment">// 设置条件</span></span><br><span class="line"><span class="comment">query.setParameter(0, "李%");</span></span><br><span class="line"><span class="comment">query.setParameter(1, "朋友推荐");*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 按名称绑定</span></span><br><span class="line">    Query query = session.createQuery(<span class="string">"from Customer where cust_name like :aaa and cust_source = :bbb"</span>);</span><br><span class="line">    query.setParameter(<span class="string">"aaa"</span>, <span class="string">"李%"</span>);</span><br><span class="line">    query.setParameter(<span class="string">"bbb"</span>, <span class="string">"朋友推荐"</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Customer&gt; list = query.list();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">        System.out.println(customer.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HQL-的投影查询"><a href="#HQL-的投影查询" class="headerlink" title="HQL 的投影查询"></a>HQL 的投影查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HQL 的投影查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 投影查询</span></span><br><span class="line">    <span class="comment">// 单个属性的查询</span></span><br><span class="line">    <span class="comment">/*Query query = session.createQuery("select c.cust_name from Customer c");</span></span><br><span class="line"><span class="comment">List&lt;Object&gt; list = query.list();</span></span><br><span class="line"><span class="comment">for (Object object : list) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(object);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多个属性的查询</span></span><br><span class="line">    <span class="comment">/*Query query = session.createQuery("select c.cust_name,c.cust_source from Customer c");</span></span><br><span class="line"><span class="comment">List&lt;Object[]&gt; list = query.list();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">for (Object[] objects : list) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(Arrays.toString(objects));</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多个属性的查询，并将其每一条查询结果封装到一个对象中</span></span><br><span class="line">    Query query = session.createQuery(<span class="string">"select new Customer(cust_name, cust_source) from Customer"</span>);</span><br><span class="line">    List&lt;Object&gt; list = query.list();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Object object : list) &#123;</span><br><span class="line">        System.out.println(object);</span><br><span class="line">    &#125;</span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HQL-的分页查询"><a href="#HQL-的分页查询" class="headerlink" title="HQL 的分页查询"></a>HQL 的分页查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分页查询</span></span><br><span class="line">    Query query = session.createQuery(<span class="string">"from LinkMan"</span>);</span><br><span class="line">    <span class="comment">// 设置分页的参数</span></span><br><span class="line">    <span class="comment">// 设置从第几条开始</span></span><br><span class="line">    query.setFirstResult(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 设置每页显示几条</span></span><br><span class="line">    query.setMaxResults(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;LinkMan&gt; list = query.list();</span><br><span class="line">    <span class="keyword">for</span> (LinkMan linkMan : list) &#123;</span><br><span class="line">        System.out.println(linkMan);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HQL-的分组统计查询"><a href="#HQL-的分组统计查询" class="headerlink" title="HQL 的分组统计查询"></a>HQL 的分组统计查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HQL 聚合函数使用以及分组统计查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo8</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 聚合函数的使用</span></span><br><span class="line">    Object object = session.createQuery(<span class="string">"select count(*) from Customer"</span>).uniqueResult();</span><br><span class="line">    System.out.println(object);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分组统计查询</span></span><br><span class="line">    List&lt;Object[]&gt; list = session.createQuery(<span class="string">"select cust_name,count(*) from Customer group by cust_source having count(*) &gt;= 2"</span>).list();</span><br><span class="line">    <span class="keyword">for</span> (Object[] objects : list) &#123;</span><br><span class="line">        System.out.println(Arrays.toString(objects));</span><br><span class="line">    &#125;</span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HQL-的多表查询"><a href="#HQL-的多表查询" class="headerlink" title="HQL 的多表查询"></a>HQL 的多表查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HQL 的多表查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo9</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内连接</span></span><br><span class="line">    <span class="comment">/*List&lt;Object[]&gt; list = session.createQuery("from Customer c inner join c.linkMans").list();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">for (Object[] objects : list) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(Arrays.toString(objects));</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 迫切内连接fetch 的作用就是通知 Hibernate 将另一个对象的数据封装到该对象中</span></span><br><span class="line">    List&lt;Customer&gt; list = session.createQuery(<span class="string">"select distinct c from Customer c inner join fetch c.linkMans"</span>).list();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="QBC-检索"><a href="#QBC-检索" class="headerlink" title="QBC 检索"></a>QBC 检索</h3><p>QBC（Query By Criteria）查询，是一种更加面向对象化的查询方式。</p><h4 id="QBC-的简单查询"><a href="#QBC-的简单查询" class="headerlink" title="QBC 的简单查询"></a>QBC 的简单查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 简单查询</span></span><br><span class="line">    Criteria criteria = session.createCriteria(Customer.class);</span><br><span class="line">    List&lt;Customer&gt; list = criteria.list();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="QBC-的排序查询"><a href="#QBC-的排序查询" class="headerlink" title="QBC 的排序查询"></a>QBC 的排序查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 排序查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排序查询</span></span><br><span class="line">    Criteria criteria = session.createCriteria(Customer.class);</span><br><span class="line">    <span class="comment">// 设置排序 </span></span><br><span class="line">    <span class="comment">// asc 为升序，按照 cust_id 升序排序</span></span><br><span class="line">    <span class="comment">//criteria.addOrder(Order.asc("cust_id"));</span></span><br><span class="line">    <span class="comment">// desc 为降序，按照 cust_id 降序排序</span></span><br><span class="line">    criteria.addOrder(Order.desc(<span class="string">"cust_id"</span>));</span><br><span class="line">    List&lt;Customer&gt; list = criteria.list();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="QBC-的分页查询"><a href="#QBC-的分页查询" class="headerlink" title="QBC 的分页查询"></a>QBC 的分页查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分页查询</span></span><br><span class="line">    Criteria criteria = session.createCriteria(LinkMan.class);</span><br><span class="line">    <span class="comment">// 设置分页参数</span></span><br><span class="line">    <span class="comment">// 从第几条数据开始</span></span><br><span class="line">    criteria.setFirstResult(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 每页显示几条数据</span></span><br><span class="line">    criteria.setMaxResults(<span class="number">10</span>);</span><br><span class="line">    List&lt;LinkMan&gt; list = criteria.list();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (LinkMan linkMan : list) &#123;</span><br><span class="line">        System.out.println(linkMan);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="QBC-的条件查询"><a href="#QBC-的条件查询" class="headerlink" title="QBC 的条件查询"></a>QBC 的条件查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 条件查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 条件查询</span></span><br><span class="line">    Criteria criteria = session.createCriteria(Customer.class);</span><br><span class="line">    <span class="comment">// 设置条件</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * =eq</span></span><br><span class="line"><span class="comment"> * &gt;gt</span></span><br><span class="line"><span class="comment"> * &gt;=ge</span></span><br><span class="line"><span class="comment"> * &lt;lt</span></span><br><span class="line"><span class="comment"> * &lt;=le</span></span><br><span class="line"><span class="comment"> * &lt;&gt;ne</span></span><br><span class="line"><span class="comment"> * like模糊匹配</span></span><br><span class="line"><span class="comment"> * in 包含</span></span><br><span class="line"><span class="comment"> * and以及</span></span><br><span class="line"><span class="comment"> * or或者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="comment">// 查询来源是：广告、姓：张  的 记录</span></span><br><span class="line">    criteria.add(Restrictions.eq(<span class="string">"cust_source"</span>, <span class="string">"广告"</span>));</span><br><span class="line">    criteria.add(Restrictions.like(<span class="string">"cust_name"</span>, <span class="string">"张%"</span>));</span><br><span class="line"></span><br><span class="line">    List&lt;Customer&gt; list = criteria.list();</span><br><span class="line">    <span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="QBC-的统计查询"><a href="#QBC-的统计查询" class="headerlink" title="QBC 的统计查询"></a>QBC 的统计查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统计查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统计查询</span></span><br><span class="line">    Criteria criteria = session.createCriteria(Customer.class);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * add: 普通条件</span></span><br><span class="line"><span class="comment"> * addOrder: 排序条件</span></span><br><span class="line"><span class="comment"> * setProjection: 聚合函数条件 和 group by having 条件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    Long num = (Long) criteria.setProjection(Projections.rowCount()).uniqueResult();</span><br><span class="line"></span><br><span class="line">    System.out.println(num);</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="QBC-的离线条件查询"><a href="#QBC-的离线条件查询" class="headerlink" title="QBC 的离线条件查询"></a>QBC 的离线条件查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 离线条件查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// web 层 需要做的</span></span><br><span class="line">    DetachedCriteria detachedCriteria = DetachedCriteria.forClass(Customer.class);</span><br><span class="line">    detachedCriteria.add(Restrictions.like(<span class="string">"cust_name"</span>, <span class="string">"李%"</span>));</span><br><span class="line"></span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 离线查询对象与 Session 绑定</span></span><br><span class="line">    Criteria criteria = detachedCriteria.getExecutableCriteria(session);</span><br><span class="line">    List&lt;Customer&gt; list = criteria.list();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hibernate-的抓取策略（优化）"><a href="#Hibernate-的抓取策略（优化）" class="headerlink" title="Hibernate 的抓取策略（优化）"></a>Hibernate 的抓取策略（优化）</h2><h3 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h3><h4 id="什么是延迟加载"><a href="#什么是延迟加载" class="headerlink" title="什么是延迟加载"></a>什么是延迟加载</h4><p>延迟加载即 lazy（懒加载）。执行到该行代码时，不会马上发送 SQL 语句去查询，而是在真正的使用这个对象的时候才会去发送 SQL 语句去查询。</p><h4 id="延迟加载的分类"><a href="#延迟加载的分类" class="headerlink" title="延迟加载的分类"></a>延迟加载的分类</h4><h5 id="类级别的延迟加载"><a href="#类级别的延迟加载" class="headerlink" title="类级别的延迟加载"></a>类级别的延迟加载</h5><p>类级别的延迟加载指的是通过 load 方法查询某个对象的时候，是否采用延迟。它是通过在 <code>&lt;class&gt;</code> 标签上的 lazy 进行配置，如果要让 lazy 失效，可以采用以下几种方式：</p><ol><li>将 lazy 设置为 false</li><li>将持久化类使用 final 修改，不可继承</li><li>使用 Hibernate.initialize() 方法</li></ol><h5 id="关联级别的延迟加载"><a href="#关联级别的延迟加载" class="headerlink" title="关联级别的延迟加载"></a>关联级别的延迟加载</h5><p>关联级别的延迟加载指的是在查询到某个对象的时候，同时查询其关联对象的时候，是否采用延迟加载。</p><h3 id="抓取策略"><a href="#抓取策略" class="headerlink" title="抓取策略"></a>抓取策略</h3><blockquote><p>抓取策略往往会和关联级别的延迟加载一起使用来优化语句。</p></blockquote><h4 id="抓取策略的概述"><a href="#抓取策略的概述" class="headerlink" title="抓取策略的概述"></a>抓取策略的概述</h4><p>通过一个对象抓取其关联对象时需要发送 SQL 语句，如何发送 SQL 语句，以什么样的格式发送，是可以通过策略去配置的，即可以通过 <code>&lt;set&gt;</code> 标签和 <code>&lt;many-to-one&gt;</code> 标签上的 fetch 和 lazy 属性进行设置。</p><h4 id="lt-set-gt-标签上的-fetch-和-lazy-的配置"><a href="#lt-set-gt-标签上的-fetch-和-lazy-的配置" class="headerlink" title="&lt;set&gt; 标签上的 fetch 和 lazy 的配置"></a><code>&lt;set&gt;</code> 标签上的 fetch 和 lazy 的配置</h4><ul><li><p>fetch：即抓取策略，控制发送 SQL 语句的格式</p><p>取值：</p><ul><li>select ：默认值，发送普通的 select 语句查询关联对象</li><li>join ：发送一条迫切左外连接查询关联对象</li><li>subselect ：发送一条子查询查询其关联对象</li></ul></li><li><p>lazy：即延迟加载，控制查询关联对象时是否采用延迟</p><p>取值：</p><ul><li>true     ：默认值，采用延迟加载</li><li>false ：不采用延迟加载</li><li>extra ：采用延迟加载，比 true 更懒 </li></ul></li></ul><h4 id="lt-many-to-one-gt-标签上的-fetch-和-lazy-的配置"><a href="#lt-many-to-one-gt-标签上的-fetch-和-lazy-的配置" class="headerlink" title="&lt;many-to-one&gt; 标签上的 fetch 和 lazy 的配置"></a><code>&lt;many-to-one&gt;</code> 标签上的 fetch 和 lazy 的配置</h4><ul><li><p>fetch：即抓取策略，控制发送 SQL 语句的格式</p><p>取值：</p><ul><li>select ：默认值，发送普通的 SQL 语句查询关联对象</li><li>join：发送一条迫切左外连接 SQL 语句               </li></ul></li><li><p>lazy：即延迟加载，控制查询关联对象时是否采用延迟</p><p>取值：</p><ul><li>proxy ：默认值，proxy 具体的取值取决于关联对方的 <code>&lt;class&gt;</code> 标签上的 lazy 的取值</li><li>false：不采用延迟加载</li><li>no-proxy：该取值不用</li></ul></li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>在实际开发过程中，一般都采用默认值，如果有特殊需要，可能会用到配置 join。但是面试会问抓取策略的优化。</p><h3 id="批量抓取"><a href="#批量抓取" class="headerlink" title="批量抓取"></a>批量抓取</h3><p>抓取一批关联对象，默认只会抓取一个，可以通过在<code>&lt;set&gt;</code>标签和<code>&lt;class&gt;</code>标签上通过<code>batch-size</code>属性来设置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.hibernate.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Transaction;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.test.hibernate.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> com.test.hibernate.domain.LinkMan;</span><br><span class="line"><span class="keyword">import</span> com.test.hibernate.utils.HibernateUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 批量抓取的测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tong</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateDemo3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取客户的时候，批量抓取联系人</span></span><br><span class="line"><span class="comment"> * 需要在客户的配置文件中的 &lt;set&gt; 上配置 batch-size 属性，默认值为 1，即每次抓取一个</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询所有客户</span></span><br><span class="line">List&lt;Customer&gt; list = session.createQuery(<span class="string">"from Customer"</span>).list();</span><br><span class="line"><span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">System.out.println(customer.getCust_name());</span><br><span class="line"><span class="comment">// 查看每个客户的所有联系人</span></span><br><span class="line"><span class="keyword">for</span> (LinkMan linkMan : customer.getLinkMans()) &#123;</span><br><span class="line">System.out.println(linkMan.getLkm_name());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tx.commit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取联系人的时候，批量抓取客户</span></span><br><span class="line"><span class="comment"> * 需要在客户的配置文件中的 &lt;class&gt; 上配置 batch-size 属性，默认值为 1，即每次抓取一个</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询所有的联系人</span></span><br><span class="line">List&lt;LinkMan&gt; list = session.createQuery(<span class="string">"from LinkMan"</span>).list();</span><br><span class="line"><span class="keyword">for</span> (LinkMan linkMan : list) &#123;</span><br><span class="line">System.out.println(linkMan.getLkm_name());</span><br><span class="line">System.out.println(linkMan.getCustomer().getCust_name());</span><br><span class="line">&#125;</span><br><span class="line">tx.commit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Hibernate 基础完结篇（四），我们一起学习 Hibernate。
    
    </summary>
    
      <category term="Java" scheme="hellotong.ml/categories/Java/"/>
    
    
      <category term="Java" scheme="hellotong.ml/tags/Java/"/>
    
      <category term="Hibernate" scheme="hellotong.ml/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate (三)</title>
    <link href="hellotong.ml/hibernate03/"/>
    <id>hellotong.ml/hibernate03/</id>
    <published>2018-11-23T13:28:32.432Z</published>
    <updated>2018-11-25T13:49:29.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库表与表之间的关系"><a href="#数据库表与表之间的关系" class="headerlink" title="数据库表与表之间的关系"></a>数据库表与表之间的关系</h2><h3 id="一对多的关系"><a href="#一对多的关系" class="headerlink" title="一对多的关系"></a>一对多的关系</h3><h4 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h4><p>一个部门可以有多名员工，但一个员工只能隶属于一个部门。</p><h4 id="建表原则"><a href="#建表原则" class="headerlink" title="建表原则"></a>建表原则</h4><p>在多的一方创建外键指向一的一方的主键。</p><h3 id="多对多关系"><a href="#多对多关系" class="headerlink" title="多对多关系"></a>多对多关系</h3><h4 id="举例说明-1"><a href="#举例说明-1" class="headerlink" title="举例说明"></a>举例说明</h4><p>一个学生可以选修多门课程，同时一门课程也可以被多名学生选修。</p><h4 id="建表原则-1"><a href="#建表原则-1" class="headerlink" title="建表原则"></a>建表原则</h4><p>创建一个中间表，中间表至少有两个字段分别作为外键指向多对多双方的主键。</p><h3 id="一对一关系"><a href="#一对一关系" class="headerlink" title="一对一关系"></a>一对一关系</h3><h4 id="举例说明-2"><a href="#举例说明-2" class="headerlink" title="举例说明"></a>举例说明</h4><p>一个人只能对应一个身份证号，一个身份证号也只能归属于一个人。</p><h4 id="建表原则-2"><a href="#建表原则-2" class="headerlink" title="建表原则"></a>建表原则</h4><ol><li>唯一外键对应。假设把一对一关系看成是一对多关系，在多的一方建立唯一外键指向一的一方的主键。</li><li>主键对应。两个表的主键相同。</li></ol><h2 id="Hibernate-的一对多关系的关联映射"><a href="#Hibernate-的一对多关系的关联映射" class="headerlink" title="Hibernate 的一对多关系的关联映射"></a>Hibernate 的一对多关系的关联映射</h2><h3 id="Hibernate-的一对多的关系的配置"><a href="#Hibernate-的一对多的关系的配置" class="headerlink" title="Hibernate 的一对多的关系的配置"></a>Hibernate 的一对多的关系的配置</h3><h4 id="创建一个项目引入响应的-jar-包和配置文件"><a href="#创建一个项目引入响应的-jar-包和配置文件" class="headerlink" title="创建一个项目引入响应的 jar 包和配置文件"></a>创建一个项目引入响应的 jar 包和配置文件</h4><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><h5 id="客户表"><a href="#客户表" class="headerlink" title="客户表"></a>客户表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`cst_customer`</span> (</span><br><span class="line">  <span class="string">`cust_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'客户编号(主键)'</span>,</span><br><span class="line">  <span class="string">`cust_name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户名称(公司名称)'</span>,</span><br><span class="line">  <span class="string">`cust_source`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户信息来源'</span>,</span><br><span class="line">  <span class="string">`cust_industry`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户所属行业'</span>,</span><br><span class="line">  <span class="string">`cust_level`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户级别'</span>,</span><br><span class="line">  <span class="string">`cust_phone`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'固定电话'</span>,</span><br><span class="line">  <span class="string">`cust_mobile`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'移动电话'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`cust_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><h5 id="联系人"><a href="#联系人" class="headerlink" title="联系人"></a>联系人</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`cst_linkman`</span> (</span><br><span class="line">  <span class="string">`lkm_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'联系人编号(主键)'</span>,</span><br><span class="line">  <span class="string">`lkm_name`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人姓名'</span>,</span><br><span class="line">  <span class="string">`lkm_cust_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户id'</span>,</span><br><span class="line">  <span class="string">`lkm_gender`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人性别'</span>,</span><br><span class="line">  <span class="string">`lkm_phone`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人办公电话'</span>,</span><br><span class="line">  <span class="string">`lkm_mobile`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人手机'</span>,</span><br><span class="line">  <span class="string">`lkm_email`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人邮箱'</span>,</span><br><span class="line">  <span class="string">`lkm_qq`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人qq'</span>,</span><br><span class="line">  <span class="string">`lkm_position`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人职位'</span>,</span><br><span class="line">  <span class="string">`lkm_memo`</span> <span class="built_in">varchar</span>(<span class="number">512</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'联系人备注'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`lkm_id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`FK_cst_linkman_lkm_cust_id`</span> (<span class="string">`lkm_cust_id`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`FK_cst_linkman_lkm_cust_id`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`lkm_cust_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`cst_customer`</span> (<span class="string">`cust_id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><h4 id="创建与数据库表对应的实体类"><a href="#创建与数据库表对应的实体类" class="headerlink" title="创建与数据库表对应的实体类"></a>创建与数据库表对应的实体类</h4><h5 id="客户实体类"><a href="#客户实体类" class="headerlink" title="客户实体类"></a>客户实体类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.hibernate.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tong</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Long cust_id;</span><br><span class="line"><span class="keyword">private</span> String cust_name;</span><br><span class="line"><span class="keyword">private</span> String cust_source;</span><br><span class="line"><span class="keyword">private</span> String cust_industry;</span><br><span class="line"><span class="keyword">private</span> String cust_level;</span><br><span class="line"><span class="keyword">private</span> String cust_phone;</span><br><span class="line"><span class="keyword">private</span> String cust_mobile;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 ORM 的方式表示：一个客户可以有多个联系人</span></span><br><span class="line"><span class="comment">// 一的一方创建多的一方的 Set 集合，Hibernate 中默认使用的是 Set 集合</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;LinkMan&gt; linkMans = <span class="keyword">new</span> HashSet&lt;LinkMan&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">getCust_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cust_id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_id</span><span class="params">(Long cust_id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cust_id = cust_id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCust_name</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cust_name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_name</span><span class="params">(String cust_name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cust_name = cust_name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCust_source</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cust_source;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_source</span><span class="params">(String cust_source)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cust_source = cust_source;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCust_industry</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cust_industry;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_industry</span><span class="params">(String cust_industry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cust_industry = cust_industry;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCust_level</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cust_level;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_level</span><span class="params">(String cust_level)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cust_level = cust_level;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCust_phone</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cust_phone;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_phone</span><span class="params">(String cust_phone)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cust_phone = cust_phone;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCust_mobile</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cust_mobile;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_mobile</span><span class="params">(String cust_mobile)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cust_mobile = cust_mobile;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;LinkMan&gt; <span class="title">getLinkMans</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> linkMans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLinkMans</span><span class="params">(Set&lt;LinkMan&gt; linkMans)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.linkMans = linkMans;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="联系人实体类"><a href="#联系人实体类" class="headerlink" title="联系人实体类"></a>联系人实体类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.hibernate.domain;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 联系人类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tong</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkMan</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Long lkm_id;</span><br><span class="line"><span class="keyword">private</span> String lkm_name;</span><br><span class="line"><span class="keyword">private</span> String lkm_gender;</span><br><span class="line"><span class="keyword">private</span> String lkm_phone;</span><br><span class="line"><span class="keyword">private</span> String lkm_mobile;</span><br><span class="line"><span class="keyword">private</span> String lkm_email;</span><br><span class="line"><span class="keyword">private</span> String lkm_qq;</span><br><span class="line"><span class="keyword">private</span> String lkm_memo;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 ORM 的方式表示：一个联系人只能属于一个客户</span></span><br><span class="line"><span class="comment">// 多的一方创建一的一方的对象</span></span><br><span class="line"><span class="keyword">private</span> Customer customer;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">getLkm_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lkm_id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkm_id</span><span class="params">(Long lkm_id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lkm_id = lkm_id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLkm_name</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lkm_name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkm_name</span><span class="params">(String lkm_name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lkm_name = lkm_name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLkm_gender</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lkm_gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkm_gender</span><span class="params">(String lkm_gender)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lkm_gender = lkm_gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLkm_phone</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lkm_phone;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkm_phone</span><span class="params">(String lkm_phone)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lkm_phone = lkm_phone;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLkm_mobile</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lkm_mobile;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkm_mobile</span><span class="params">(String lkm_mobile)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lkm_mobile = lkm_mobile;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLkm_email</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lkm_email;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkm_email</span><span class="params">(String lkm_email)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lkm_email = lkm_email;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLkm_qq</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lkm_qq;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkm_qq</span><span class="params">(String lkm_qq)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lkm_qq = lkm_qq;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLkm_memo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lkm_memo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLkm_memo</span><span class="params">(String lkm_memo)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.lkm_memo = lkm_memo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Customer <span class="title">getCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> customer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.customer = customer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建映射文件（重点）"><a href="#创建映射文件（重点）" class="headerlink" title="创建映射文件（重点）"></a>创建映射文件（重点）</h4><h5 id="多的一方的映射的创建"><a href="#多的一方的映射的创建" class="headerlink" title="多的一方的映射的创建"></a>多的一方的映射的创建</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC </span></span><br><span class="line"><span class="meta">    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 建立实体类与数据库表的映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.test.hibernate.domain.Customer"</span> <span class="attr">table</span>=<span class="string">"cst_customer"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 建立 OID 与数据库表中主键的映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"cust_id"</span> <span class="attr">column</span>=<span class="string">"cust_id"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 建立类中其他属性与数据库表字段的映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_name"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_source"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_industry"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_level"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_phone"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_mobile"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置一对多的关系映射：放置的是多的一方的对象的 set 集合 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">set 标签：</span></span><br><span class="line"><span class="comment">* name : 多的一方的对象集合名称</span></span><br><span class="line"><span class="comment">* inverse : 是否放弃对外键的管理，默认为 false，即不放弃</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"linkMans"</span> <span class="attr">cascade</span>=<span class="string">"save-update,delete"</span> <span class="attr">inverse</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">key 标签：</span></span><br><span class="line"><span class="comment">* column : 多的一方的外键名称</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"lkm_cust_id"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">one-to-many:</span></span><br><span class="line"><span class="comment">* class : 多的一方的类的全路径</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"com.test.hibernate.domain.LinkMan"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="一的一方的映射的创建"><a href="#一的一方的映射的创建" class="headerlink" title="一的一方的映射的创建"></a>一的一方的映射的创建</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC </span></span><br><span class="line"><span class="meta">    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 建立实体类与数据库之间的映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.test.hibernate.domain.Role"</span> <span class="attr">table</span>=<span class="string">"sys_role"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 建立 OID 与数据库表主键的映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"role_id"</span> <span class="attr">column</span>=<span class="string">"role_id"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 建立普通属性与表中其他字段的映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"role_name"</span> <span class="attr">column</span>=<span class="string">"role_name"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"role_memo"</span> <span class="attr">column</span>=<span class="string">"role_memo"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 建立角色与用户的多对多关系 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">set 标签：</span></span><br><span class="line"><span class="comment">* name: 对方在本类中的集合的名称</span></span><br><span class="line"><span class="comment">* table: 中间表的名称</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"users"</span> <span class="attr">table</span>=<span class="string">"sys_user_role"</span> <span class="attr">cascade</span>=<span class="string">"save-update,delete"</span>   <span class="attr">inverse</span>=<span class="string">"true"</span> &gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">key 标签：</span></span><br><span class="line"><span class="comment">* column: 当前对象对应中间表中外键的名称</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"role_id"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">many-to-many 标签</span></span><br><span class="line"><span class="comment">* class: 对方类的全路径</span></span><br><span class="line"><span class="comment">* column: 对方对象对应中间表的外键名称</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">"com.test.hibernate.domain.User"</span> <span class="attr">column</span>=<span class="string">"user_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">many-to-many</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建核心配置文件"><a href="#创建核心配置文件" class="headerlink" title="创建核心配置文件"></a>创建核心配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class="line"><span class="meta">"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1. 连接数据库的基本参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql:///hibernate_day03<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置Hibernate的方言 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2. 可选配置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 打印 SQL 语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 格式化 SQL 语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 自动建表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置C3P0连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.provider_class"</span>&gt;</span>org.hibernate.connection.C3P0ConnectionProvider<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--在连接池中可用的数据库连接的最少数目 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.min_size"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--在连接池中所有数据库连接的最大数目 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.max_size"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设定数据库连接的过期时间,以秒为单位, 如果连接池中的某个数据库连接处于空闲状态的时间超过了timeout时间,就会从连接池中清除 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.timeout"</span>&gt;</span>120<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--每3000秒检查所有连接池中的空闲连接 以秒为单位 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.idle_test_period"</span>&gt;</span>3000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置事务的隔离级别 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 4 为 mysql 的默认隔离级别 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.isolation"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置 Session 绑定当前线程--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3. 引入映射文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/test/hibernate/domain/Customer.hbm.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/test/hibernate/domain/LinkMan.hbm.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.hibernate.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Transaction;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.test.hibernate.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> com.test.hibernate.domain.LinkMan;</span><br><span class="line"><span class="keyword">import</span> com.test.hibernate.utils.HibernateUtils;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一对多关系映射的测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tong</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 保存 2 个客户  3 个联系，并且建立好关系存到数据库中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建两个客户</span></span><br><span class="line">Customer customer1 = <span class="keyword">new</span> Customer();</span><br><span class="line">customer1.setCust_name(<span class="string">"张三"</span>);</span><br><span class="line">Customer customer2 = <span class="keyword">new</span> Customer();</span><br><span class="line">customer2.setCust_name(<span class="string">"李四"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建三个联系人</span></span><br><span class="line">LinkMan linkMan1 = <span class="keyword">new</span> LinkMan();</span><br><span class="line">linkMan1.setLkm_name(<span class="string">"王五"</span>);</span><br><span class="line">LinkMan linkMan2 = <span class="keyword">new</span> LinkMan();</span><br><span class="line">linkMan2.setLkm_name(<span class="string">"赵六"</span>);</span><br><span class="line">LinkMan linkMan3 = <span class="keyword">new</span> LinkMan();</span><br><span class="line">linkMan3.setLkm_name(<span class="string">"田七"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立关系</span></span><br><span class="line"><span class="comment">// 一个联系人对应一个客户</span></span><br><span class="line">linkMan1.setCustomer(customer1);</span><br><span class="line">linkMan2.setCustomer(customer1);</span><br><span class="line">linkMan3.setCustomer(customer2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个客户可以有多个联系人</span></span><br><span class="line">customer1.getLinkMans().add(linkMan1);</span><br><span class="line">customer1.getLinkMans().add(linkMan2);</span><br><span class="line">customer2.getLinkMans().add(linkMan3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存数据</span></span><br><span class="line"><span class="comment">// 保存联系人</span></span><br><span class="line">session.save(linkMan1);</span><br><span class="line">session.save(linkMan2);</span><br><span class="line">session.save(linkMan3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存客户</span></span><br><span class="line">session.save(customer1);</span><br><span class="line">session.save(customer2);</span><br><span class="line"></span><br><span class="line">tx.commit();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Hibernate-的一对多的相关操作"><a href="#Hibernate-的一对多的相关操作" class="headerlink" title="Hibernate 的一对多的相关操作"></a>Hibernate 的一对多的相关操作</h3><h4 id="一对多关系只保存一边是否可以成功"><a href="#一对多关系只保存一边是否可以成功" class="headerlink" title="一对多关系只保存一边是否可以成功"></a>一对多关系只保存一边是否可以成功</h4><p>只保存一边是不可以的，会报一个瞬时态对象异常，因为持久态关联了一个瞬时态的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 测试一对多关系只保存一边是否可以</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">    customer.setCust_name(<span class="string">"张三"</span>);</span><br><span class="line"></span><br><span class="line">    LinkMan linkMan = <span class="keyword">new</span> LinkMan();</span><br><span class="line">    linkMan.setLkm_name(<span class="string">"李四"</span>);</span><br><span class="line"></span><br><span class="line">    linkMan.setCustomer(customer);</span><br><span class="line">    customer.getLinkMans().add(linkMan);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只保存客户，不可以，报一个瞬时态对象异常，因为持久态对象关联了一个瞬时态对象</span></span><br><span class="line">    session.save(customer);</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一对多的级联操作"><a href="#一对多的级联操作" class="headerlink" title="一对多的级联操作"></a>一对多的级联操作</h4><blockquote><p>级联指的是在操作一个对象的时候会同时操作其关联的对象。</p></blockquote><h5 id="级联保存或更新"><a href="#级联保存或更新" class="headerlink" title="级联保存或更新"></a>级联保存或更新</h5><h6 id="保存客户级联保存联系人"><a href="#保存客户级联保存联系人" class="headerlink" title="保存客户级联保存联系人"></a>保存客户级联保存联系人</h6><p>要完成级联操作首先需要在客户的映射文件中的 set 集合上进行级联配置</p><p><code>&lt;set name=&quot;linkMans&quot; cascade=&quot;save-update,delete&quot; ...</code></p><p>编写测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  级联保存或更新</span></span><br><span class="line"><span class="comment"> *  * 保存客户级联联系人，操作的主体是客户，需要在 Customer.hbm.xml 中配置</span></span><br><span class="line"><span class="comment"> *  * &lt;set name="linkMans" cascade="save-update"&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">    customer.setCust_name(<span class="string">"张三"</span>);</span><br><span class="line"></span><br><span class="line">    LinkMan linkMan = <span class="keyword">new</span> LinkMan();</span><br><span class="line">    linkMan.setLkm_name(<span class="string">"李四"</span>);</span><br><span class="line"></span><br><span class="line">    linkMan.setCustomer(customer);</span><br><span class="line">    customer.getLinkMans().add(linkMan);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存客户级联保存联系人</span></span><br><span class="line">    session.save(customer);</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="保存联系人级联保存客户"><a href="#保存联系人级联保存客户" class="headerlink" title="保存联系人级联保存客户"></a>保存联系人级联保存客户</h5><p>与保存客户级联保存联系人同理，只需进行相应的配置即可，首先在联系人的映射文件中的<code>many-to-one</code>标签上添加一个属性<code>cascade=&quot;save-update&quot;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *  级联保存或更新</span></span><br><span class="line"><span class="comment">  *  * 保存联系人级联客户，操作的主体是联系人，需要在 LinkMan.hbm.xml 中配置</span></span><br><span class="line"><span class="comment">  *  * &lt;many-to-one name="customer" cascade="save-update" class="com.test.hibernate.domain.Customer" column="lkm_cust_id" /&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">    customer.setCust_name(<span class="string">"王五"</span>);</span><br><span class="line"></span><br><span class="line">    LinkMan linkMan = <span class="keyword">new</span> LinkMan();</span><br><span class="line">    linkMan.setLkm_name(<span class="string">"赵六"</span>);</span><br><span class="line"></span><br><span class="line">    linkMan.setCustomer(customer);</span><br><span class="line">    customer.getLinkMans().add(linkMan);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存联系人级联客户</span></span><br><span class="line">    session.save(customer);</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试对象的导航"><a href="#测试对象的导航" class="headerlink" title="测试对象的导航"></a>测试对象的导航</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试对象的导航</span></span><br><span class="line"><span class="comment"> * * 前提：一对多的双方都设置了 cascade="save-update"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">    customer.setCust_name(<span class="string">"张三"</span>);</span><br><span class="line"></span><br><span class="line">    LinkMan linkMan1 = <span class="keyword">new</span> LinkMan();</span><br><span class="line">    linkMan1.setLkm_name(<span class="string">"李四"</span>);</span><br><span class="line">    LinkMan linkMan2 = <span class="keyword">new</span> LinkMan();</span><br><span class="line">    linkMan2.setLkm_name(<span class="string">"王五"</span>);</span><br><span class="line">    LinkMan linkMan3 = <span class="keyword">new</span> LinkMan();</span><br><span class="line">    linkMan3.setLkm_name(<span class="string">"赵六"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置关联关系</span></span><br><span class="line">    linkMan1.setCustomer(customer);</span><br><span class="line">    customer.getLinkMans().add(linkMan2);</span><br><span class="line">    customer.getLinkMans().add(linkMan3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前提双方都设置了级联</span></span><br><span class="line">    session.save(linkMan1);    <span class="comment">// 会发送 4 条 insert 语句</span></span><br><span class="line">    <span class="comment">// session.save(customer);// 会发送 3 条 insert 语句</span></span><br><span class="line">    <span class="comment">// session.save(linkMan2);// 会发送 1 条 insert 语句</span></span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="级联删除（基本不用）"><a href="#级联删除（基本不用）" class="headerlink" title="级联删除（基本不用）"></a>级联删除（基本不用）</h5><blockquote><p>删除一边的时候，同时将另一边的数据也一并删除。</p><p>如果要使用级联删除，前提是需要在主体方的映射文件中配置一个属性 <code>cascade=&quot;delete&quot;</code>，这样的话，只有主体方的数据被删除，那么相应的与它有关联的客体的数据也会被级联删除。</p></blockquote><h6 id="删除客户级联删除联系人"><a href="#删除客户级联删除联系人" class="headerlink" title="删除客户级联删除联系人"></a>删除客户级联删除联系人</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 级联删除</span></span><br><span class="line"><span class="comment"> * * 删除客户级联删除联系人，操作的主体是客户，需要在 Customer.hbm.xml 中配置</span></span><br><span class="line"><span class="comment"> * * &lt;set name="linkMans" cascade="delete"&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先查询再删除</span></span><br><span class="line">    <span class="comment">// 默认情况：先将联系人的外键置为 null，然后删除客户</span></span><br><span class="line">    <span class="comment">/*Customer customer = session.get(Customer.class, 1l);</span></span><br><span class="line"><span class="comment">session.delete(customer);*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 级联删除</span></span><br><span class="line">    Customer customer = session.get(Customer.class, <span class="number">1l</span>);</span><br><span class="line">    session.delete(customer);</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="删除联系人级联删除客户"><a href="#删除联系人级联删除客户" class="headerlink" title="删除联系人级联删除客户"></a>删除联系人级联删除客户</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 级联删除</span></span><br><span class="line"><span class="comment"> * * 删除联系人级联删除客户（很少用），操作的主体是联系人，需要在 LinkMan.hbm.xml 中配置</span></span><br><span class="line"><span class="comment"> * * &lt;set name="customer" cascade="delete"&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先查询再删除</span></span><br><span class="line">    <span class="comment">// 级联删除</span></span><br><span class="line">    LinkMan linkMan = session.get(LinkMan.class, <span class="number">5l</span>);</span><br><span class="line">    session.delete(linkMan);</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一对多设置了双向关联产生多余-SQL-语句问题"><a href="#一对多设置了双向关联产生多余-SQL-语句问题" class="headerlink" title="一对多设置了双向关联产生多余 SQL 语句问题"></a>一对多设置了双向关联产生多余 SQL 语句问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原来 2 号联系人属于 1 号客户，现将其改为隶属于 2 号客户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo8</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询 2 号联系人</span></span><br><span class="line">    LinkMan linkMan = session.get(LinkMan.class, <span class="number">2l</span>);</span><br><span class="line">    <span class="comment">// 查询 2 号客户</span></span><br><span class="line">    Customer customer = session.get(Customer.class, <span class="number">2l</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 双向的关联：会发送重复的 SQL 语句，一的一方放弃外键的管理可以解决资源的浪费。</span></span><br><span class="line">    linkMan.setCustomer(customer);</span><br><span class="line">    customer.getLinkMans().add(linkMan);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 持久化对象可以自动更新数据库</span></span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="分析产生多余-SQL-的原因"><a href="#分析产生多余-SQL-的原因" class="headerlink" title="分析产生多余 SQL 的原因"></a>分析产生多余 SQL 的原因</h5><p>第 10 行代码和带 12 行代码分别会查询 2 号联系人和 2 号客户，查到之后会将查到的数据放到一级缓存的缓存区和快照区各一份。</p><p>那么当执行到第 15 行代码时，联系人 2 要关联客户 2，此时先会将这条数据放到缓存区中，与快照区中的数据进行对比，如果发生改变就会发送 SQL 语句去更新数据库，如果没有发生改变，就不会发送 SQL 也不会更新数据库，那么经过对比后显然数据发生了改变，这时候就会发送一条 SQL 去更新。</p><p>当执行到第 16 行代码时，又进行了一次对比，数据不一致，那么就会再发送一条 SQL 语句去更新数据库。</p><p>显然如果设置双向关联之后，就会产生多余的 SQL，进行重复的操作。</p><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><p>即单向维护关系，使得一方主动放弃外键维护权，一般是被动的一方主动放弃外键维护权。在放弃方的 set 集合上配置<code>inverse=&quot;true&quot;</code>属性，即为放弃外键维护权。</p><h4 id="区分-cascade-和-inverse"><a href="#区分-cascade-和-inverse" class="headerlink" title="区分 cascade 和 inverse"></a>区分 cascade 和 inverse</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 区别 cascade 和 inverse </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo9</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询 2 号联系人</span></span><br><span class="line">    LinkMan linkMan = session.get(LinkMan.class, <span class="number">2l</span>);</span><br><span class="line">    <span class="comment">// 查询 2 号客户</span></span><br><span class="line">    Customer customer = session.get(Customer.class, <span class="number">2l</span>);</span><br><span class="line"></span><br><span class="line">    customer.getLinkMans().add(linkMan);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 条件：在 Customer.hbm.xml 上的 set 中配置 cascade="save-update" inverse="true"</span></span><br><span class="line">    session.save(customer);<span class="comment">// 客户会插入到数据库中、联系人也会插入到数据库中，但是外键会为 null</span></span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hibernate-的多对多的关联映射"><a href="#Hibernate-的多对多的关联映射" class="headerlink" title="Hibernate 的多对多的关联映射"></a>Hibernate 的多对多的关联映射</h2><h3 id="Hibernate-的多对多关系的配置"><a href="#Hibernate-的多对多关系的配置" class="headerlink" title="Hibernate 的多对多关系的配置"></a>Hibernate 的多对多关系的配置</h3><h4 id="创建表-1"><a href="#创建表-1" class="headerlink" title="创建表"></a>创建表</h4><h5 id="用户表"><a href="#用户表" class="headerlink" title="用户表"></a>用户表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`sys_user`</span> (</span><br><span class="line">  <span class="string">`user_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'用户id'</span>,</span><br><span class="line">  <span class="string">`user_code`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户账号'</span>,</span><br><span class="line">  <span class="string">`user_name`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户名称'</span>,</span><br><span class="line">  <span class="string">`user_password`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户密码'</span>,</span><br><span class="line">  <span class="string">`user_state`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'1:正常,0:暂停'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`user_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><h5 id="角色表"><a href="#角色表" class="headerlink" title="角色表"></a>角色表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`sys_role`</span> (</span><br><span class="line">  <span class="string">`role_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`role_name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'角色名称'</span>,</span><br><span class="line">  <span class="string">`role_memo`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'备注'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`role_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><h5 id="中间表"><a href="#中间表" class="headerlink" title="中间表"></a>中间表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`sys_user_role`</span> (</span><br><span class="line">  <span class="string">`role_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'角色id'</span>,</span><br><span class="line">  <span class="string">`user_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户id'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`role_id`</span>,<span class="string">`user_id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`FK_user_role_user_id`</span> (<span class="string">`user_id`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`FK_user_role_role_id`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`role_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`sys_role`</span> (<span class="string">`role_id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span>,</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`FK_user_role_user_id`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`user_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`sys_user`</span> (<span class="string">`user_id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><h4 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h4><h5 id="用户实体类"><a href="#用户实体类" class="headerlink" title="用户实体类"></a>用户实体类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.hibernate.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tong</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> Long user_id;</span><br><span class="line"><span class="keyword">private</span> String user_code;</span><br><span class="line"><span class="keyword">private</span> String user_name;</span><br><span class="line"><span class="keyword">private</span> String user_password;</span><br><span class="line"><span class="keyword">private</span> String user_state;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多对多关系，放置的是对方的集合</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;Role&gt; roles = <span class="keyword">new</span> HashSet&lt;Role&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">getUser_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> user_id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser_id</span><span class="params">(Long user_id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.user_id = user_id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUser_code</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> user_code;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser_code</span><span class="params">(String user_code)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.user_code = user_code;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUser_name</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> user_name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser_name</span><span class="params">(String user_name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.user_name = user_name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUser_password</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> user_password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser_password</span><span class="params">(String user_password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.user_password = user_password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUser_state</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> user_state;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser_state</span><span class="params">(String user_state)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.user_state = user_state;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;Role&gt; <span class="title">getRoles</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> roles;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoles</span><span class="params">(Set&lt;Role&gt; roles)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.roles = roles;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="角色实体类"><a href="#角色实体类" class="headerlink" title="角色实体类"></a>角色实体类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.hibernate.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 角色实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tong</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> Long role_id;</span><br><span class="line"><span class="keyword">private</span> String role_name;</span><br><span class="line"><span class="keyword">private</span> String role_memo;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多对多关系，放置的是对方的集合</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;User&gt; users = <span class="keyword">new</span> HashSet&lt;User&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">getRole_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> role_id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRole_id</span><span class="params">(Long role_id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.role_id = role_id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRole_name</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> role_name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRole_name</span><span class="params">(String role_name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.role_name = role_name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRole_memo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> role_memo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRole_memo</span><span class="params">(String role_memo)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.role_memo = role_memo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> users;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsers</span><span class="params">(Set&lt;User&gt; users)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.users = users;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建映射配置文件"><a href="#创建映射配置文件" class="headerlink" title="创建映射配置文件"></a>创建映射配置文件</h4><h5 id="用户的映射文件"><a href="#用户的映射文件" class="headerlink" title="用户的映射文件"></a>用户的映射文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC </span></span><br><span class="line"><span class="meta">    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置实体类与数据库表的映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.test.hibernate.domain.User"</span> <span class="attr">table</span>=<span class="string">"sys_user"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 建立 OID 与数据库表主键的映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"user_id"</span> <span class="attr">column</span>=<span class="string">"user_id"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 建立普通属性与表其他字段的映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user_code"</span> <span class="attr">column</span>=<span class="string">"user_code"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user_name"</span> <span class="attr">column</span>=<span class="string">"user_name"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user_password"</span> <span class="attr">column</span>=<span class="string">"user_password"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user_state"</span> <span class="attr">column</span>=<span class="string">"user_state"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 建立用户与角色的多对多关系的映射 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">set 标签：</span></span><br><span class="line"><span class="comment">* name ： 对方集合的属性名称</span></span><br><span class="line"><span class="comment">* table ： 多对多关系需要中间表，放的是中间表的表名</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"roles"</span> <span class="attr">table</span>=<span class="string">"sys_user_role"</span> <span class="attr">cascade</span>=<span class="string">"save-update,delete"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">key 标签：</span></span><br><span class="line"><span class="comment">* column： 当前的对象在中间表中的外键名称</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"user_id"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">many-to-many 标签：</span></span><br><span class="line"><span class="comment">* class： 对方类的全路径</span></span><br><span class="line"><span class="comment">* column： 对方对象在中间表中的外键名称</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">"com.test.hibernate.domain.Role"</span> <span class="attr">column</span>=<span class="string">"role_id"</span> &gt;</span><span class="tag">&lt;/<span class="name">many-to-many</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="角色的映射文件"><a href="#角色的映射文件" class="headerlink" title="角色的映射文件"></a>角色的映射文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC </span></span><br><span class="line"><span class="meta">    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 建立实体类与数据库之间的映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.test.hibernate.domain.Role"</span> <span class="attr">table</span>=<span class="string">"sys_role"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 建立 OID 与数据库表主键的映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"role_id"</span> <span class="attr">column</span>=<span class="string">"role_id"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 建立普通属性与表中其他字段的映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"role_name"</span> <span class="attr">column</span>=<span class="string">"role_name"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"role_memo"</span> <span class="attr">column</span>=<span class="string">"role_memo"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 建立角色与用户的多对多关系 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">set 标签：</span></span><br><span class="line"><span class="comment">* name: 对方在本类中的集合的名称</span></span><br><span class="line"><span class="comment">* table: 中间表的名称</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"users"</span> <span class="attr">table</span>=<span class="string">"sys_user_role"</span> <span class="attr">cascade</span>=<span class="string">"save-update,delete"</span>   <span class="attr">inverse</span>=<span class="string">"true"</span> &gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">key 标签：</span></span><br><span class="line"><span class="comment">* column: 当前对象对应中间表中外键的名称</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"role_id"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">many-to-many 标签</span></span><br><span class="line"><span class="comment">* class: 对方类的全路径</span></span><br><span class="line"><span class="comment">* column: 对方对象对应中间表的外键名称</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">"com.test.hibernate.domain.User"</span> <span class="attr">column</span>=<span class="string">"user_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">many-to-many</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="在核心配置文件中引入两个对象的映射文件"><a href="#在核心配置文件中引入两个对象的映射文件" class="headerlink" title="在核心配置文件中引入两个对象的映射文件"></a>在核心配置文件中引入两个对象的映射文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 3. 引入映射文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/test/hibernate/domain/User.hbm.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/test/hibernate/domain/Role.hbm.xml"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="编写测试类-1"><a href="#编写测试类-1" class="headerlink" title="编写测试类"></a>编写测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.hibernate.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Transaction;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.test.hibernate.domain.Role;</span><br><span class="line"><span class="keyword">import</span> com.test.hibernate.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.test.hibernate.utils.HibernateUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试多对多的关系映射</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tong</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateDemo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 保存数据，保存 2 个用户，3 个角色，并建立关系</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 2 个用户</span></span><br><span class="line">User user1 = <span class="keyword">new</span> User();</span><br><span class="line">user1.setUser_name(<span class="string">"张三"</span>);</span><br><span class="line">User user2 = <span class="keyword">new</span> User();</span><br><span class="line">user2.setUser_name(<span class="string">"李四"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 3 个角色</span></span><br><span class="line">Role role1 = <span class="keyword">new</span> Role();</span><br><span class="line">role1.setRole_name(<span class="string">"研发部"</span>);</span><br><span class="line">Role role2 = <span class="keyword">new</span> Role();</span><br><span class="line">role2.setRole_name(<span class="string">"市场部"</span>);</span><br><span class="line">Role role3 = <span class="keyword">new</span> Role();</span><br><span class="line">role3.setRole_name(<span class="string">"公关部"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多对多建立双向关联映射，需要一方主动放弃外键维护权</span></span><br><span class="line"><span class="comment">// ***一般被动方放弃外键维护权</span></span><br><span class="line">user1.getRoles().add(role1);</span><br><span class="line">user1.getRoles().add(role2);</span><br><span class="line">user2.getRoles().add(role2);</span><br><span class="line">user2.getRoles().add(role3);</span><br><span class="line">role1.getUsers().add(user1);</span><br><span class="line">role2.getUsers().add(user1);</span><br><span class="line">role2.getUsers().add(user2);</span><br><span class="line">role3.getUsers().add(user2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存数据</span></span><br><span class="line">session.save(user1);</span><br><span class="line">session.save(user2);</span><br><span class="line">session.save(role1);</span><br><span class="line">session.save(role2);</span><br><span class="line">session.save(role3);</span><br><span class="line"></span><br><span class="line">tx.commit();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Hibernate-的多对多的操作"><a href="#Hibernate-的多对多的操作" class="headerlink" title="Hibernate 的多对多的操作"></a>Hibernate 的多对多的操作</h3><h4 id="多对多关系只保存一边是否能够成功"><a href="#多对多关系只保存一边是否能够成功" class="headerlink" title="多对多关系只保存一边是否能够成功"></a>多对多关系只保存一边是否能够成功</h4><p>不可以，必须要一方放弃外键维护权。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 只保存一边是否可以？</span></span><br><span class="line"><span class="comment"> * 不可以，会报瞬时态对象异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 1 个用户</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUser_name(<span class="string">"张三"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 1 个角色</span></span><br><span class="line">    Role role = <span class="keyword">new</span> Role();</span><br><span class="line">    role.setRole_name(<span class="string">"研发部"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建立关系</span></span><br><span class="line">    user.getRoles().add(role);</span><br><span class="line">    role.getUsers().add(user);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只保存一边，会报异常</span></span><br><span class="line">    <span class="comment">// session.save(user);</span></span><br><span class="line">    session.save(role);</span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多对多的级联保存或更新"><a href="#多对多的级联保存或更新" class="headerlink" title="多对多的级联保存或更新"></a>多对多的级联保存或更新</h4><blockquote><p>要完成级联操作，前提是需要在主动方的 set 集合上配置一个<code>cascade=&quot;save-update&quot;</code>属性。</p></blockquote><h5 id="保存用户级联保存角色"><a href="#保存用户级联保存角色" class="headerlink" title="保存用户级联保存角色"></a>保存用户级联保存角色</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 级联保存：</span></span><br><span class="line"><span class="comment"> * * 保存用户级联保存角色，需要在用户的映射文件中配置</span></span><br><span class="line"><span class="comment"> * * 在 User.hbm.xml 中的 set 上配置 cascade="save-update"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 1 个用户</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUser_name(<span class="string">"张三"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 1 个角色</span></span><br><span class="line">    Role role = <span class="keyword">new</span> Role();</span><br><span class="line">    role.setRole_name(<span class="string">"研发部"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建立关系</span></span><br><span class="line">    user.getRoles().add(role);</span><br><span class="line">    role.getUsers().add(user);</span><br><span class="line"></span><br><span class="line">    session.save(user);</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="保存角色级联保存用户"><a href="#保存角色级联保存用户" class="headerlink" title="保存角色级联保存用户"></a>保存角色级联保存用户</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 级联保存：</span></span><br><span class="line"><span class="comment"> * * 保存角色级联保存用户，需要在角色的映射文件中配置</span></span><br><span class="line"><span class="comment"> * * 在 Role.hbm.xml 中的 set 上配置 cascade="save-update"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 1 个用户</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUser_name(<span class="string">"张三"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 1 个角色</span></span><br><span class="line">    Role role = <span class="keyword">new</span> Role();</span><br><span class="line">    role.setRole_name(<span class="string">"研发部"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建立关系</span></span><br><span class="line">    user.getRoles().add(role);</span><br><span class="line">    role.getUsers().add(user);</span><br><span class="line"></span><br><span class="line">    session.save(role);</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多对多的级联删除（基本不用）"><a href="#多对多的级联删除（基本不用）" class="headerlink" title="多对多的级联删除（基本不用）"></a>多对多的级联删除（基本不用）</h4><blockquote><p>同样要完成级联删除操作，需要在主动方的 set 集合上配置一个 <code>cascade=&quot;delete&quot;</code>属性。</p></blockquote><h5 id="删除用户级联删除角色"><a href="#删除用户级联删除角色" class="headerlink" title="删除用户级联删除角色"></a>删除用户级联删除角色</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 级联删除：</span></span><br><span class="line"><span class="comment"> * * 删除用户级联删除角色，需要在用户的映射文件中配置</span></span><br><span class="line"><span class="comment"> * * 在 User.hbm.xml 中的 set 上配置 cascade="delete"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询 1 号客户</span></span><br><span class="line">    User user = session.get(User.class, <span class="number">1l</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除 1 号客户级联删除相应的角色</span></span><br><span class="line">    session.delete(user);</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="删除角色级联删除用户"><a href="#删除角色级联删除用户" class="headerlink" title="删除角色级联删除用户"></a>删除角色级联删除用户</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 级联删除：</span></span><br><span class="line"><span class="comment"> * * 删除角色级联删除用户，需要在角色的映射文件中配置</span></span><br><span class="line"><span class="comment"> * * 在 Role.hbm.xml 中的 set 上配置 cascade="delete"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询 2 号角色</span></span><br><span class="line">    Role role = session.get(Role.class, <span class="number">3l</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除 3 号角色级联删除相应的客户</span></span><br><span class="line">    session.delete(role);</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多对多的其他操作"><a href="#多对多的其他操作" class="headerlink" title="多对多的其他操作"></a>多对多的其他操作</h3><h4 id="给用户添加角色"><a href="#给用户添加角色" class="headerlink" title="给用户添加角色"></a>给用户添加角色</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给用户添加角色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给 1 号用户添加 2 号 角色</span></span><br><span class="line">    <span class="comment">// 先查询 1 号用户</span></span><br><span class="line">    User user = session.get(User.class, <span class="number">1l</span>);</span><br><span class="line">    <span class="comment">// 再查询 2 号角色</span></span><br><span class="line">    Role role = session.get(Role.class, <span class="number">2l</span>);</span><br><span class="line"></span><br><span class="line">    user.getRoles().add(role);</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="给用户改选角色"><a href="#给用户改选角色" class="headerlink" title="给用户改选角色"></a>给用户改选角色</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给用户改选角色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo8</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给 2 号用户的 2 号 角色改选为 3 号角色</span></span><br><span class="line">    <span class="comment">// 先查询 2 号用户</span></span><br><span class="line">    User user = session.get(User.class, <span class="number">2l</span>);</span><br><span class="line">    <span class="comment">// 查询 2 号角色和 3 号角色</span></span><br><span class="line">    Role role2 = session.get(Role.class, <span class="number">2l</span>);</span><br><span class="line">    Role role3 = session.get(Role.class, <span class="number">3l</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先移除 2 号角色再添加 3 号角色</span></span><br><span class="line">    user.getRoles().remove(role2);</span><br><span class="line">    user.getRoles().add(role3);</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="给用户删除角色"><a href="#给用户删除角色" class="headerlink" title="给用户删除角色"></a>给用户删除角色</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给用户删除角色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo9</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给 2 号用户删除 3 号 角色</span></span><br><span class="line">    <span class="comment">// 先查询 2 号用户</span></span><br><span class="line">    User user = session.get(User.class, <span class="number">2l</span>);</span><br><span class="line">    <span class="comment">// 查询 2 号角色</span></span><br><span class="line">    Role role3 = session.get(Role.class, <span class="number">3l</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除 2 号角色</span></span><br><span class="line">    user.getRoles().remove(role3);</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><p>能够使用 Hibernate 搭建一对多或多对多的配置环境。</p>]]></content>
    
    <summary type="html">
    
      Hibernate 基础篇（三），我们一起学习 Hibernate。
    
    </summary>
    
      <category term="Java" scheme="hellotong.ml/categories/Java/"/>
    
    
      <category term="Java" scheme="hellotong.ml/tags/Java/"/>
    
      <category term="Hibernate" scheme="hellotong.ml/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate (二)</title>
    <link href="hellotong.ml/hibernate02/"/>
    <id>hellotong.ml/hibernate02/</id>
    <published>2018-11-22T11:27:11.009Z</published>
    <updated>2018-11-22T11:42:42.026Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hibernate-持久化类的编写规则"><a href="#Hibernate-持久化类的编写规则" class="headerlink" title="Hibernate 持久化类的编写规则"></a>Hibernate 持久化类的编写规则</h2><h3 id="什么是持久化类"><a href="#什么是持久化类" class="headerlink" title="什么是持久化类"></a>什么是持久化类</h3><p>持久化：就是将内存中的数据永久的存储在关系型数据库中。</p><p>持久化类：指的是一个 Java 类与数据库表建立了映射关系，那么这么类就称之为持久化类。</p><h3 id="持久化类的编写规则"><a href="#持久化类的编写规则" class="headerlink" title="持久化类的编写规则"></a>持久化类的编写规则</h3><ol><li>首先编写持久化类需要提供无参的构造方法，在 Java 中默认构造即无参构造。</li><li>持久化类的属性需要私有，对私有的属性提供公共的 set 和 get 方法。</li><li>持久化类的属性要尽量使用包装类的类型。举个例子，假如使用基本数据类型 int，它默认值是 0，那么如果把这个 0 存到数据库中，就会产生歧义，到底是用户存的 0 呢，还是用户没有设置呢，它的默认值就是 0 呀。如果使用包装类 Integer 的话就可以避免发生这种情况，我们一起来分析一下，它的默认值是 null，如果用户存一个数，数据库中就会显示相应的数值，如果用户没有设置值，那么数据库中就会显示为 null，一目了然，歧义就解决了。</li><li>持久化类要有一个唯一标识 OID 与表的主键对应。</li><li>持久化类尽量不要使用 final 进行修饰。因为 Hibernate 中有延时加载优化机制，这个机制中会产生代理对象，会继承持久化类产生子类，从而产生代理对象，如果用 final 修饰的话，这个优化机制就失效了。</li></ol><h2 id="Hibernate-主键生成策略"><a href="#Hibernate-主键生成策略" class="headerlink" title="Hibernate 主键生成策略"></a>Hibernate 主键生成策略</h2><h3 id="主键类型"><a href="#主键类型" class="headerlink" title="主键类型"></a>主键类型</h3><p>自然主键：把具有业务含义的字段作为主键，称为自然主键。</p><p>代理主键：把不具备业务含义的字段作为主键，称之为代理主键，通常使用 id 来作为主键。</p><h3 id="Hibernate-的主键生成策略"><a href="#Hibernate-的主键生成策略" class="headerlink" title="Hibernate 的主键生成策略"></a>Hibernate 的主键生成策略</h3><blockquote><p>在实际开发中一般是不允许用户手动设置主键的，一般是手动编写程序进行设置，再交给数据库，在 Hibernate 中为了减少程序代码的编写，它提供了很多中的主键生成策略。</p></blockquote><ol><li>increment：hibernate 中提供的自增长机制，适用 short、int、long 类型的主键。线程不安全，建议在单线程中使用。</li><li>identity：适用 short、int、long 类型的主键，采用的是数据库底层的自动增长机制。适用于有自动增长机制的数据库，如 MySQL 等。Oracle 是没有自动增长的。</li><li>sequence：适用 short、int、long 类型的主键，采用的是序列化的方式，支持 Oracle 等。</li><li>uuid：适用于字符串类型的主键。使用 hibernate 中的随机方式生成字符串主键，类似于 Java 给提供的 UUID 对象。</li><li>native：根据本地机制进行自动调整，可以在 identity 和 sequence 之间进行自动切换。</li><li>assigned：hibernate 放弃对主键的管理，需要手动编写程序或用户自己设置。</li><li>foreign：外部主键。</li></ol><h2 id="Hibernate-的持久化的三种状态"><a href="#Hibernate-的持久化的三种状态" class="headerlink" title="Hibernate 的持久化的三种状态"></a>Hibernate 的持久化的三种状态</h2><p>Hibernate 为了更好的管理持久化类，将持久化类分成了三种状态。分别是瞬时态、持久态、脱管态或游离态。</p><h3 id="瞬时态"><a href="#瞬时态" class="headerlink" title="瞬时态"></a>瞬时态</h3><p>此状态对象没有唯一标识 OID，没有被 session 管理，称为是瞬时态对象。</p><h3 id="持久态"><a href="#持久态" class="headerlink" title="持久态"></a>持久态</h3><p><strong>此状态对象有唯一标识 OID，且被 session 管理，称为持久态对象。</strong></p><h3 id="脱管态"><a href="#脱管态" class="headerlink" title="脱管态"></a>脱管态</h3><p>此状态对象有唯一标识 OID，但没有被 session 管理，称为脱管态对象。</p><h3 id="如何区分三种状态对象"><a href="#如何区分三种状态对象" class="headerlink" title="如何区分三种状态对象"></a>如何区分三种状态对象</h3><p>通过一段代码解释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    Customer customer = <span class="keyword">new</span> Customer();    <span class="comment">// 瞬时态对象，没有唯一标识 OID，没有被 session 管理</span></span><br><span class="line">    customer.setCust_name(<span class="string">"李四"</span>);</span><br><span class="line">    Serializable id = session.save(customer);<span class="comment">// 持久态对象，有唯一标识 OID，被 session 管理</span></span><br><span class="line"></span><br><span class="line">    transaction.commit();</span><br><span class="line">    session.close();  <span class="comment">// 脱管态对象，有唯一标识 OID，没有被 session 管理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三种状态对象的转换"><a href="#三种状态对象的转换" class="headerlink" title="三种状态对象的转换"></a>三种状态对象的转换</h3><p><img src="http://pifu006nk.bkt.clouddn.com/blog/20181122/IaarSkIsG8j2.jpg?imageslim" alt="mark"></p><h4 id="瞬时态对象"><a href="#瞬时态对象" class="headerlink" title="瞬时态对象"></a>瞬时态对象</h4><p>获得：<code>Customer customer = new Customer()</code>，简单来说就是 new</p><p>状态转换：</p><ul><li><p>瞬时态 –&gt; 持久态</p><p>调用保存方法<code>save(Object obj)</code>、调用保存或更新方法<code>saveOrUpdate(Object obj)</code></p></li><li><p>瞬时态 –&gt; 脱管态</p><p>设置 id，<code>customer.setCust_id()</code></p></li></ul><h4 id="持久态对象"><a href="#持久态对象" class="headerlink" title="持久态对象"></a>持久态对象</h4><p>获得：可通过查询方法<code>get()、load()</code>获得</p><p>状态转换：</p><ul><li><p>持久态 –&gt; 瞬时态</p><p>调用删除方法<code>delete()</code></p></li><li><p>持久态 –&gt; 脱管态</p><p>session 关闭<code>close()</code>、清除所有<code>clear()</code>、清除某一个对象<code>evict(Object obj)</code></p></li></ul><h4 id="脱管态对象"><a href="#脱管态对象" class="headerlink" title="脱管态对象"></a>脱管态对象</h4><p>获得：两部曲，先 new 对象，然后设置 id。<code>Customer customer = new Customer(); customer.setCust_id(1l);</code></p><p>状态转换：</p><ul><li><p>脱管态 –&gt; 瞬时态</p><p>将该对象的 id 置为 null 即可</p></li><li><p>脱管态 –&gt; 持久态</p><p><code>update()</code>、<code>saveOrUpdate()</code></p></li></ul><h3 id="持久态对象的特性"><a href="#持久态对象的特性" class="headerlink" title="持久态对象的特性"></a>持久态对象的特性</h3><p>持久态对象能够自动更新数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得持久化对象，持久化对象可以自动更新数据库</span></span><br><span class="line">    Customer customer = session.get(Customer.class, <span class="number">1l</span>);</span><br><span class="line">    customer.setCust_name(<span class="string">"哈哈"</span>);</span><br><span class="line">    <span class="comment">// session.update(customer);</span></span><br><span class="line">    transaction.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>持久态对象之所以有自动更新数据库的特性是依赖于 Hibernate 的一级缓存。</p><h2 id="Hibernate-的一级缓存"><a href="#Hibernate-的一级缓存" class="headerlink" title="Hibernate 的一级缓存"></a>Hibernate 的一级缓存</h2><h3 id="什么是缓存"><a href="#什么是缓存" class="headerlink" title="什么是缓存"></a>什么是缓存</h3><p>缓存：是一种优化方式，将数据存到内存当中，使用时从缓存中获取，减少直接向永久性数据源的读取次数，提高应用的性能。</p><h3 id="Hibernate-的一级缓存-1"><a href="#Hibernate-的一级缓存-1" class="headerlink" title="Hibernate 的一级缓存"></a>Hibernate 的一级缓存</h3><blockquote><p>Hibernate 中提供的优化手段：缓存、抓取策略。Hibernate 中提供了两种缓存机制：一级缓存、二级缓存。</p></blockquote><p>Hibernate 的一级缓存，也称为是 Session 级别的缓存，一级缓存的生命周期与 Session 对象一致，其实一级缓存就是由 Session 对象中的一系列 Java 集合构成的。<strong>一级缓存是自带的且不可卸载的。</strong></p><p>Hibernate 的二级缓存是基于 SessionFactory 级别的缓存，是需要配置的，通常二级缓存使用 Redis 替代较多。</p><h3 id="证明一级缓存的存在"><a href="#证明一级缓存的存在" class="headerlink" title="证明一级缓存的存在"></a>证明一级缓存的存在</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 证明一级缓存的存在</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Customer customer1 = session.get(Customer.class, 1l);// 发送 SQL，从数据库中查询之后放到一级缓存中</span></span><br><span class="line"><span class="comment">    System.out.println(customer1);</span></span><br><span class="line"><span class="comment">    Customer customer2 = session.get(Customer.class, 1l);// 不发送 SQL，直接从一级缓存中取</span></span><br><span class="line"><span class="comment">    System.out.println(customer2);</span></span><br><span class="line"><span class="comment">    System.out.println(customer1 == customer2);*/</span></span><br><span class="line"></span><br><span class="line">    Customer customer1 = <span class="keyword">new</span> Customer();</span><br><span class="line">    customer1.setCust_name(<span class="string">"张三"</span>);</span><br><span class="line">    Serializable id = session.save(customer1);</span><br><span class="line">    System.out.println(id);</span><br><span class="line"></span><br><span class="line">    Customer customer2 = session.get(Customer.class, id);<span class="comment">// 不发送 SQL，save() 之后，会将保存的对象放到缓存中</span></span><br><span class="line">    System.out.println(customer2);</span><br><span class="line">    System.out.println(customer1 == customer2);</span><br><span class="line"></span><br><span class="line">    transaction.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Hibernate-的一级缓存结构"><a href="#Hibernate-的一级缓存结构" class="headerlink" title="Hibernate 的一级缓存结构"></a>Hibernate 的一级缓存结构</h3><blockquote><p>一级缓存内部存在一个特殊的区域：快照区</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 测试一级缓存的快照区</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    Customer customer1 = session.get(Customer.class, <span class="number">1l</span>);<span class="comment">// 发送 SQL 语句，同时放到一级缓存和快照区</span></span><br><span class="line">    customer1.setCust_name(<span class="string">"李四"</span>);</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hibernate-的事务管理"><a href="#Hibernate-的事务管理" class="headerlink" title="Hibernate 的事务管理"></a>Hibernate 的事务管理</h2><h3 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h3><p>事务指的是逻辑上的一组操作，组成这组操作的各个逻辑单元要么全部成功，要么全部失败。</p><h3 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h3><ol><li>原子性：代表事务不可分割。</li><li>一致性：代表事务执行前后，数据完整性保持一致。</li><li>隔离性：代表一个事务在执行过程中，不应该受到其他事务的干扰。</li><li>持久性：代表事务执行结束后，数据会持久保存到数据库中。</li></ol><h3 id="如果不考虑隔离性，引发的安全性问题"><a href="#如果不考虑隔离性，引发的安全性问题" class="headerlink" title="如果不考虑隔离性，引发的安全性问题"></a>如果不考虑隔离性，引发的安全性问题</h3><h4 id="读问题"><a href="#读问题" class="headerlink" title="读问题"></a>读问题</h4><ul><li>脏读： 一个事务读到另一个事务未提交的数据。</li><li>不可重复读：一个事务读到另一个事务已提交的 update 更新数据，导致在前一个事务中多次查询结果不一致。</li><li>虚读：一个事务读到另一个事务已提交的 insert 添加数据，导致在前一个事务中多次查询结果不一致。</li></ul><h4 id="写问题"><a href="#写问题" class="headerlink" title="写问题"></a>写问题</h4><ul><li>引发两类丢失更新</li></ul><h4 id="读写问题的解决"><a href="#读写问题的解决" class="headerlink" title="读写问题的解决"></a>读写问题的解决</h4><p>通过设置事务的更新级别控制</p><ul><li>Read uncommited：不能解决任何问题。</li><li>Read commited：可以解决脏读，但是不可重复读和虚读可能发生。（Oracle 的默认事务隔离级别）</li><li>Repeatable read：可以解决脏读和不可重复读，但是虚读可能发生。（MySQL 的默认事务隔离级别）</li><li>Serializable：可以解决所有的读问题，它属于死锁，安全性高，但效率低。</li></ul><h3 id="Hibernate-中设置事务隔离级别"><a href="#Hibernate-中设置事务隔离级别" class="headerlink" title="Hibernate 中设置事务隔离级别"></a>Hibernate 中设置事务隔离级别</h3><p>可以在 hibernate 的核心配置文件中设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置事务隔离级别 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 4 为 MySql 的默认级别 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.isolation"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="线程绑定-Session"><a href="#线程绑定-Session" class="headerlink" title="线程绑定 Session"></a>线程绑定 Session</h2><blockquote><p>将 Session 与当前线程绑定方便事务控制</p></blockquote><h3 id="改写使用-Hibernate-操作数据库的工具类"><a href="#改写使用-Hibernate-操作数据库的工具类" class="headerlink" title="改写使用 Hibernate 操作数据库的工具类"></a>改写使用 Hibernate 操作数据库的工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 Configuration 对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Configuration cfg;</span><br><span class="line"><span class="comment">// 创建 SessionFactory 对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> SessionFactory sf;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给两个变量赋值</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">cfg = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line">sf = cfg.buildSessionFactory();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对外提供公共的方法获得连接对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">openSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sf.openSession();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 Session 与当前线程绑定</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">getCurrentSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sf.getCurrentSession();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在-Hibernate-核心配置文件中配置"><a href="#在-Hibernate-核心配置文件中配置" class="headerlink" title="在 Hibernate 核心配置文件中配置"></a>在 Hibernate 核心配置文件中配置</h3><blockquote><p>要使用 getCurrentSession() 方法，需要在 hibernate 核心配置文件中配置后才能使用</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置 session 绑定当前线程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Hibernate-的其他-API"><a href="#Hibernate-的其他-API" class="headerlink" title="Hibernate 的其他 API"></a>Hibernate 的其他 API</h2><h3 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h3><p>Query 代表面向对象的一个 Hibernate 查询操作，通常使用 session.createQuery() 方法接收一个 HQL（Hibernate Query Language）语句，然后进行查询操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// Query</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 简单查询/查询所有</span></span><br><span class="line">    <span class="comment">// 通过 Session 获得 Query 接口，HQL：hibernate query language</span></span><br><span class="line">    <span class="comment">/* String hql = "from Customer";</span></span><br><span class="line"><span class="comment">Query query = session.createQuery(hql);*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 条件查询</span></span><br><span class="line">    <span class="comment">/*String hql = "from Customer where cust_name like ?";</span></span><br><span class="line"><span class="comment">Query query = session.createQuery(hql);</span></span><br><span class="line"><span class="comment">// 设置条件</span></span><br><span class="line"><span class="comment">query.setParameter(0, "张%");// 在 hibernate 中 0 代表第一个问号*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分页查询</span></span><br><span class="line">    String hql = <span class="string">"from Customer"</span>;</span><br><span class="line">    Query query = session.createQuery(hql);</span><br><span class="line">    <span class="comment">// 设置分页</span></span><br><span class="line">    query.setFirstResult(<span class="number">0</span>);<span class="comment">// 从第一条数据开始</span></span><br><span class="line">    query.setMaxResults(<span class="number">3</span>);<span class="comment">// 每页显示 3 条数据</span></span><br><span class="line"></span><br><span class="line">    List&lt;Customer&gt; list = query.list();</span><br><span class="line">    <span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Criteria"><a href="#Criteria" class="headerlink" title="Criteria"></a>Criteria</h3><p>Criteria 是一个完全面向对象，可扩展的条件查询 API，Criteria 查询又称为 QBC（Query By Criteria）查询。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// Criteria</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 Session 获得 Criteria 接口</span></span><br><span class="line">    Criteria criteria = session.createCriteria(Customer.class);</span><br><span class="line">    <span class="comment">// 简单查询/查询所有</span></span><br><span class="line">    <span class="comment">// List&lt;Customer&gt; list = criteria.list();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 条件查询</span></span><br><span class="line">    <span class="comment">/*criteria.add(Restrictions.like("cust_name", "张", MatchMode.START));// 匹配名字开头是张的数据</span></span><br><span class="line"><span class="comment">List&lt;Customer&gt; list = criteria.list();*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分页查询</span></span><br><span class="line">    criteria.setFirstResult(<span class="number">3</span>);</span><br><span class="line">    criteria.setMaxResults(<span class="number">3</span>);</span><br><span class="line">    List&lt;Customer&gt; list = criteria.list();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SQLQuery"><a href="#SQLQuery" class="headerlink" title="SQLQuery"></a>SQLQuery</h3><p>SQLQuery 这个接口用于接收一个 sql 语句进行查询。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// SQLQuery</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 简单查询/查询所有</span></span><br><span class="line">    <span class="comment">/*String sql = "select * from cst_customer";</span></span><br><span class="line"><span class="comment">SQLQuery query = session.createSQLQuery(sql);*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 条件查询</span></span><br><span class="line">    <span class="comment">/*String sql = "select * from cst_customer where cust_name=?";</span></span><br><span class="line"><span class="comment">SQLQuery query = session.createSQLQuery(sql);</span></span><br><span class="line"><span class="comment">// 设置条件</span></span><br><span class="line"><span class="comment">query.setParameter(0, "哈哈");*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分页查询</span></span><br><span class="line">    String sql = <span class="string">"select * from cst_customer limit ?, ?"</span>;</span><br><span class="line">    SQLQuery query = session.createSQLQuery(sql);</span><br><span class="line">    <span class="comment">// 设置分页</span></span><br><span class="line">    query.setParameter(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">    query.setParameter(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Object[]&gt; list = query.list();</span><br><span class="line">    <span class="keyword">for</span> (Object[] objects : list) &#123;</span><br><span class="line">        System.out.println(Arrays.toString(objects));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><strong>将 Session 绑定在线程上后，当线程执行完毕之后，Session 对象也会自动关闭，不需要手动 <code>session.close()</code> 关闭，否则会报错。</strong> </p>]]></content>
    
    <summary type="html">
    
      Hibernate 基础篇（二），我们一起学习 Hibernate。
    
    </summary>
    
      <category term="Java" scheme="hellotong.ml/categories/Java/"/>
    
    
      <category term="Java" scheme="hellotong.ml/tags/Java/"/>
    
      <category term="Hibernate" scheme="hellotong.ml/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate (一)</title>
    <link href="hellotong.ml/hibernate01/"/>
    <id>hellotong.ml/hibernate01/</id>
    <published>2018-11-21T13:42:23.612Z</published>
    <updated>2018-11-26T00:57:08.130Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hibernate-框架概述"><a href="#Hibernate-框架概述" class="headerlink" title="Hibernate 框架概述"></a>Hibernate 框架概述</h2><ul><li><p>什么是框架</p><p>框架是软件的半成品，已经完成了部分功能，可以提交开发效率。</p></li><li><p>什么是 Hibernate</p><p>简单地说，Hibernate 就是持久层（dao 层） 的 ORM 框架。</p></li><li><p>什么是 ORM</p><p>ORM：全称 Object Relational Mapping，意思即对象关系映射，指的是将一个 Java 中的实体类与关系型数据库中的表建立一种映射关系，从而操作对象就可以操作数据库中的表。</p></li></ul><h2 id="Hibernate-的入门"><a href="#Hibernate-的入门" class="headerlink" title="Hibernate 的入门"></a>Hibernate 的入门</h2><ol><li><p>下载 Hibernate 开发环境并解压到本地</p><p><a href="https://sourceforge.net/projects/hibernate/files/hibernate-orm/5.0.7.Final/" target="_blank" rel="noopener">下载地址</a></p></li><li><p>创建一个项目，引入相应的 jar 包</p><ul><li>数据库驱动包</li><li>Hibernate 开发的必须 jar 包</li><li>Hibernate 的日志记录包</li></ul><p><img src="http://pifu006nk.bkt.clouddn.com/blog/20181121/6gMcolIF6d5p.png?imageslim" alt="mark"></p></li><li><p>在数据库中创建表</p><p>建表 SQL 语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`cst_customer`</span> (</span><br><span class="line">  <span class="string">`cust_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'客户编号(主键)'</span>,</span><br><span class="line">  <span class="string">`cust_name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户名称(公司名称)'</span>,</span><br><span class="line">  <span class="string">`cust_source`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户信息来源'</span>,</span><br><span class="line">  <span class="string">`cust_industry`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户所属行业'</span>,</span><br><span class="line">  <span class="string">`cust_level`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'客户级别'</span>,</span><br><span class="line">  <span class="string">`cust_phone`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'固定电话'</span>,</span><br><span class="line">  <span class="string">`cust_mobile`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'移动电话'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`cust_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure></li><li><p>创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Long cust_id;</span><br><span class="line"><span class="keyword">private</span> String cust_name;</span><br><span class="line"><span class="keyword">private</span> String cust_source;</span><br><span class="line"><span class="keyword">private</span> String cust_industry;</span><br><span class="line"><span class="keyword">private</span> String cust_level;</span><br><span class="line"><span class="keyword">private</span> String cust_phone;</span><br><span class="line"><span class="keyword">private</span> String cust_mobile;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getCust_id</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cust_id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_id</span><span class="params">(Long cust_id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cust_id = cust_id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCust_name</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cust_name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_name</span><span class="params">(String cust_name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cust_name = cust_name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCust_source</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cust_source;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_source</span><span class="params">(String cust_source)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cust_source = cust_source;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCust_industry</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cust_industry;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_industry</span><span class="params">(String cust_industry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cust_industry = cust_industry;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCust_level</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cust_level;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_level</span><span class="params">(String cust_level)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cust_level = cust_level;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCust_phone</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cust_phone;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_phone</span><span class="params">(String cust_phone)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cust_phone = cust_phone;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCust_mobile</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cust_mobile;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCust_mobile</span><span class="params">(String cust_mobile)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cust_mobile = cust_mobile;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Customer [cust_id="</span> + cust_id + <span class="string">", cust_name="</span> + cust_name + <span class="string">", cust_source="</span> + cust_source</span><br><span class="line">+ <span class="string">", cust_industry="</span> + cust_industry + <span class="string">", cust_level="</span> + cust_level + <span class="string">", cust_phone="</span> + cust_phone</span><br><span class="line">+ <span class="string">", cust_mobile="</span> + cust_mobile + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>创建映射</strong></p><p>映射通过 XML 的配置文件完成，配置文件可以任意命名，但通常使用统一命名规范（类名.hbm.xml）[hbm : hibernate mapping]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC </span><br><span class="line">    &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</span><br><span class="line">    &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-mapping&gt;</span><br><span class="line">&lt;!-- 建立类与表的映射 --&gt;</span><br><span class="line">&lt;class name=&quot;com.test.hibernate.demo1.Customer&quot; table=&quot;cst_customer&quot;&gt;</span><br><span class="line">&lt;!-- 建立类中的属性与表中的主键对应 --&gt;</span><br><span class="line">&lt;id name=&quot;cust_id&quot; column=&quot;cust_id&quot; &gt;</span><br><span class="line">&lt;generator class=&quot;native&quot;/&gt;</span><br><span class="line">&lt;/id&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 建立类中的普通的属性和表的字段的对应 --&gt;</span><br><span class="line">&lt;property name=&quot;cust_name&quot; column=&quot;cust_name&quot; length=&quot;32&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;cust_source&quot; column=&quot;cust_source&quot; length=&quot;32&quot;/&gt;</span><br><span class="line">&lt;property name=&quot;cust_industry&quot; column=&quot;cust_industry&quot;/&gt;</span><br><span class="line">&lt;property name=&quot;cust_level&quot; column=&quot;cust_level&quot;/&gt;</span><br><span class="line">&lt;property name=&quot;cust_phone&quot; column=&quot;cust_phone&quot;/&gt;</span><br><span class="line">&lt;property name=&quot;cust_mobile&quot; column=&quot;cust_mobile&quot;/&gt;</span><br><span class="line">&lt;/class&gt;</span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure></li><li><p>创建一个 Hibernate 核心配置文件</p><p>Hibernate 核心配置文件的名称：hibernate.cfg.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-configuration PUBLIC</span><br><span class="line">&quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;</span><br><span class="line">&quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-configuration&gt;</span><br><span class="line">&lt;session-factory&gt;</span><br><span class="line">&lt;!-- 1. 连接数据库的基本参数 --&gt;</span><br><span class="line">&lt;property name=&quot;hibernate.connection.driver_class&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;hibernate.connection.url&quot;&gt;jdbc:mysql:///hibernate_day01&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;hibernate.connection.username&quot;&gt;root&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;hibernate.connection.password&quot;&gt;1&lt;/property&gt;</span><br><span class="line">&lt;!-- 配置Hibernate的方言 --&gt;</span><br><span class="line">&lt;property name=&quot;hibernate.dialect&quot;&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 2. 可选配置 --&gt;</span><br><span class="line">&lt;!-- 打印SQL --&gt;</span><br><span class="line">&lt;property name=&quot;hibernate.show_sql&quot;&gt;true&lt;/property&gt;</span><br><span class="line">&lt;!-- 格式化SQL --&gt;</span><br><span class="line">&lt;property name=&quot;hibernate.format_sql&quot;&gt;true&lt;/property&gt;</span><br><span class="line">&lt;!-- 自动创建表 --&gt;</span><br><span class="line">&lt;property name=&quot;hibernate.hbm2ddl.auto&quot;&gt;update&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 3. 导入映射文件 --&gt;</span><br><span class="line">&lt;mapping resource=&quot;com/test/hibernate/demo1/Customer.hbm.xml&quot; /&gt;</span><br><span class="line">&lt;/session-factory&gt;</span><br><span class="line">&lt;/hibernate-configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写测试代码</p><p>保存客户 java 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hibernate 的入门案例 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tong</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Transaction;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.cfg.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 保存客户的案例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 1.加载 Hibernate 核心配置文件</span></span><br><span class="line">Configuration configuration = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line"><span class="comment">// 手动加载映射</span></span><br><span class="line"><span class="comment">//configuration.addResource("com/test/hibernate/demo1/Customer.hbm.xml");</span></span><br><span class="line"><span class="comment">// 2.创建一个 SessionFactory 对象，类似于 JDBC 的连接池</span></span><br><span class="line">SessionFactory SessionFactory = configuration.buildSessionFactory();</span><br><span class="line"><span class="comment">// 3.通过 SessionFactory 对象获得一个 Session 对象，相当于 JDBC 中的 Connection</span></span><br><span class="line">Session session = SessionFactory.openSession();</span><br><span class="line"><span class="comment">// 4.手动开启事务</span></span><br><span class="line">Transaction transaction = session.beginTransaction();</span><br><span class="line"><span class="comment">// 5.编写代码</span></span><br><span class="line"></span><br><span class="line">Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">customer.setCust_name(<span class="string">"赵六"</span>);</span><br><span class="line">session.save(customer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.提交事务</span></span><br><span class="line">transaction.commit();</span><br><span class="line"><span class="comment">// 7.释放资源</span></span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据库表</p><p><img src="http://pifu006nk.bkt.clouddn.com/blog/20181121/liNCVivGbQyl.png?imageslim" alt="mark"></p></li></ol><h2 id="Hibernate-的常见配置"><a href="#Hibernate-的常见配置" class="headerlink" title="Hibernate 的常见配置"></a>Hibernate 的常见配置</h2><h3 id="XML-提示配置"><a href="#XML-提示配置" class="headerlink" title="XML 提示配置"></a>XML 提示配置</h3><p><img src="http://pifu006nk.bkt.clouddn.com/blog/20181121/SBqVUrQ3qYoT.png?imageslim" alt="mark"></p><p><img src="http://pifu006nk.bkt.clouddn.com/blog/20181121/ok7u0rK5SSqs.png?imageslim" alt="mark"></p><h3 id="Hibernate-映射文件的配置"><a href="#Hibernate-映射文件的配置" class="headerlink" title="Hibernate 映射文件的配置"></a>Hibernate 映射文件的配置</h3><ul><li><p>class 标签的配置</p><p>class 标签用来建立类与表的映射关系</p><p>常用属性：</p><p>​    name：类的全路径</p><p>​    table：表名（类名与表名一致时，table 可以省略）</p></li><li><p>id 标签的配置</p><p>id 标签用来建立类中属性与表中主键的对应关系</p><p>常用属性：</p><p>​    name：类中的属性名</p><p>​    column：表中的字段名（类中的属性名与表中的字段名一致时，column 属性可以省略）</p><p>​    length：长度</p><p>​    type：类型</p></li><li><p>property 标签的配置</p><p>property 标签用来建立类中的普通属性与表中字段的对应关系</p><p>常用属性：</p><p>​    name：类中的属性名</p><p>​    column：表中的字段名</p><p>​    length：长度</p><p>​    type：类型</p><p>​    not-null：设置非空</p><p>​    unique：设置唯一</p></li></ul><h3 id="Hibernate-的核心配置"><a href="#Hibernate-的核心配置" class="headerlink" title="Hibernate 的核心配置"></a>Hibernate 的核心配置</h3><blockquote><p>可以分为三部分</p></blockquote><ul><li><p>必须的配置</p><ul><li><p>连接数据库的基本参数</p><p> 驱动类、url 路径、用户名、密码</p></li><li><p>方言</p></li></ul></li><li><p>可选的配置</p><ul><li><p>显示 SQL：hibernate.show_sql</p></li><li><p>格式化 SQL：hibernate.format_sql</p></li><li><p>自动建表：hibernate.hbm2ddl.auto</p><ul><li><p>取值</p><p>none：不使用 hibernate 的自动建表</p><p>ceate：如果数据库中有表，删除原有表，重新创建，如果没有表，则新建表</p><p>create-drop：如果数据库中有表，删除原有表新建表，执行操作后再删除表。如果没有表，则新建表，使用完后再删除该表</p><p>update：如果数据库中有表，使用原有表（update 会该表表结构），如果没有表，则创建新表</p><p>validate：如果数据库中没有表，不会创建表，如果有表，则会校验映射和表结构</p></li></ul></li></ul></li><li><p>映射文件的引入</p><p>引入映射文件的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;mapping resource=&quot;com/test/hibernate/demo1/Customer.hbm.xml&quot; /&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Hibernate-的核心-API"><a href="#Hibernate-的核心-API" class="headerlink" title="Hibernate 的核心 API"></a>Hibernate 的核心 API</h2><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><ul><li><p>Hibernate 的配置对象</p></li><li><p>作用</p><ol><li><p>加载核心配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Configuration configuration = <span class="keyword">new</span> Configuration().configure();</span><br></pre></td></tr></table></figure></li><li><p>可手动加载映射文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configuration.addResource(<span class="string">"com/test/hibernate/demo1/Customer.hbm.xml"</span>);</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="SessionFactory"><a href="#SessionFactory" class="headerlink" title="SessionFactory"></a>SessionFactory</h3><ul><li><p>Session 工厂，SessionFactory 内部维护了 Hibernate 的连接池和 Hibernate 的二级缓存，是线程安全的对象，其次一个项目创建一个对象即可。</p></li><li><p>配置连接池</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置C3P0连接池 --&gt;</span><br><span class="line">&lt;property name=&quot;connection.provider_class&quot;&gt;org.hibernate.connection.C3P0ConnectionProvider&lt;/property&gt;</span><br><span class="line">&lt;!--在连接池中可用的数据库连接的最少数目 --&gt;</span><br><span class="line">&lt;property name=&quot;c3p0.min_size&quot;&gt;5&lt;/property&gt;</span><br><span class="line">&lt;!--在连接池中所有数据库连接的最大数目  --&gt;</span><br><span class="line">&lt;property name=&quot;c3p0.max_size&quot;&gt;20&lt;/property&gt;</span><br><span class="line">&lt;!--设定数据库连接的过期时间,以秒为单位,</span><br><span class="line">如果连接池中的某个数据库连接处于空闲状态的时间超过了timeout时间,就会从连接池中清除 --&gt;</span><br><span class="line">&lt;property name=&quot;c3p0.timeout&quot;&gt;120&lt;/property&gt;</span><br><span class="line">&lt;!--每3000秒检查所有连接池中的空闲连接 以秒为单位--&gt;</span><br><span class="line">&lt;property name=&quot;c3p0.idle_test_period&quot;&gt;3000&lt;/property&gt;</span><br></pre></td></tr></table></figure></li><li><p>抽取 Hibernate 工具类，方便使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hibernate 的工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tong</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 Configuration 对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Configuration cfg;</span><br><span class="line"><span class="comment">// 创建 SessionFactory 对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> SessionFactory sf;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给两个变量赋值</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">cfg = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line">sf = cfg.buildSessionFactory();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对外提供公共的方法获得连接对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">openSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sf.openSession();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><ul><li><p>Session 代表的是 Hibernate 与数据库的连接对象，是与数据库交互的桥梁，不同于 HttpSession，它是线程不安全的，所以一般在局部使用。</p></li><li><p>Session 中的 API</p><ul><li><p>保存方法</p><p><code>session.save(Object)</code>返回值是一个<code>Serializable id</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 保存客户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获得 Session 连接对象</span></span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    <span class="comment">// 手动开启事务</span></span><br><span class="line">    Transaction transaction = session.beginTransaction();</span><br><span class="line">    <span class="comment">// 编写代码</span></span><br><span class="line">    Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">    customer.setCust_name(<span class="string">"张三"</span>);</span><br><span class="line">    session.save(customer);</span><br><span class="line">    <span class="comment">// 提交事务</span></span><br><span class="line">    transaction.commit();</span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查询方法</p><p><code>T get(Class c, Serializable id)</code></p><p><code>T load(Class c, Serialzable id)</code></p><p><strong>get 方法和 load 方法的区别？</strong></p><ul><li><p>get 方法</p><p>get 方法是立即加载，当执行到 get() 方法这行代码时，会立即发送 SQL 语句去查询</p><p>查询之后是真实对象本身</p><p>当查询一个不存在的对象时，返回的结果是 null</p></li><li><p>load 方法</p><p>load 方法是延时加载（懒加载），当执行到 load() 方法这行代码时，不会发送 SQL 语句去查询，直到调用该对象时才会发送 SQL 语句去查询</p><p>查询之后是通过第三方 javassist 技术处理的代理对象</p><p>当查询一个不存在的对象时，会抛出 ObjectNotFoundException 异常</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 查询客户</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 get 方法查询</span></span><br><span class="line">    Customer customer = session.get(Customer.class, <span class="number">1L</span>);</span><br><span class="line">    System.out.println(customer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 load 方法查询</span></span><br><span class="line">    <span class="comment">/*Customer customer = session.load(Customer.class, 2l);</span></span><br><span class="line"><span class="comment">System.out.println(customer);*/</span></span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改方法</p><p><code>void update(Object obj)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 修改操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 直接创建对象修改</span></span><br><span class="line">    <span class="comment">/*Customer customer = new Customer();</span></span><br><span class="line"><span class="comment">customer.setCust_id(1l);</span></span><br><span class="line"><span class="comment">customer.setCust_name("王五");;</span></span><br><span class="line"><span class="comment">session.update(customer);*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先查询，再修改(推荐)</span></span><br><span class="line">    Customer customer = session.get(Customer.class, <span class="number">1l</span>);</span><br><span class="line">    customer.setCust_name(<span class="string">"赵六"</span>);</span><br><span class="line">    session.update(customer);</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除方法</p><p><code>void delete(Object obj)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 删除操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建对象直接删除</span></span><br><span class="line">    <span class="comment">/*Customer customer = new Customer();</span></span><br><span class="line"><span class="comment">customer.setCust_id(2l);</span></span><br><span class="line"><span class="comment">session.delete(customer);*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先查询，再删除(推荐) -- 多表关系时可以实现级联删除</span></span><br><span class="line">    Customer customer = session.get(Customer.class, <span class="number">3l</span>);</span><br><span class="line">    session.delete(customer);</span><br><span class="line"></span><br><span class="line">    tx.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>保存或更新</p><p><code>void saveOrUpdate(Object obj)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 保存或更新</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表中没有此数据，保存</span></span><br><span class="line">    <span class="comment">/*Customer customer = new Customer();</span></span><br><span class="line"><span class="comment">customer.setCust_name("赵二");</span></span><br><span class="line"><span class="comment">session.saveOrUpdate(customer);*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表中有此数据，更新</span></span><br><span class="line">    Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">    customer.setCust_id(<span class="number">2l</span>);</span><br><span class="line">    customer.setCust_name(<span class="string">"天一"</span>);</span><br><span class="line">    session.saveOrUpdate(customer);</span><br><span class="line">    tx.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查询所有</p><p>通过 HQL createQuery 和 SQL createSQLQuery 查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收 HQL，hibernate query language</span></span><br><span class="line">    <span class="comment">/*Query query = session.createQuery("from Customer");</span></span><br><span class="line"><span class="comment">List&lt;Customer&gt; list = query.list();</span></span><br><span class="line"><span class="comment">for (Customer customer : list) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(customer.toString());</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收 SQL</span></span><br><span class="line">    SQLQuery query = session.createSQLQuery(<span class="string">"select * from cst_customer"</span>);</span><br><span class="line">    List&lt;Object[]&gt; list = query.list();</span><br><span class="line">    <span class="keyword">for</span> (Object[] objects : list) &#123;</span><br><span class="line">        <span class="comment">// 对象数组以字符串形式打印输出</span></span><br><span class="line">        System.out.println(Arrays.toString(objects));</span><br><span class="line">    &#125;</span><br><span class="line">    tx.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Transaction </p><ul><li><p>事务对象</p></li><li><p>常用 API</p><p><code>commit():提交事务</code></p><p><code>rollback():回滚事务</code></p></li></ul></li></ul><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><p>通过以上知识的学习能够独立搭建 Hibernate 的开发环境完成 CRUD 操作即可。</p>]]></content>
    
    <summary type="html">
    
      Hibernate 基础篇（一），我们一起学习 Hibernate。
    
    </summary>
    
      <category term="Java" scheme="hellotong.ml/categories/Java/"/>
    
    
      <category term="Java" scheme="hellotong.ml/tags/Java/"/>
    
      <category term="Hibernate" scheme="hellotong.ml/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>my first blog</title>
    <link href="hellotong.ml/my-first-blog/"/>
    <id>hellotong.ml/my-first-blog/</id>
    <published>2018-11-19T04:17:55.000Z</published>
    <updated>2018-11-22T11:25:52.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="This-is-my-first-blog"><a href="#This-is-my-first-blog" class="headerlink" title="This is my first blog."></a>This is my first blog.</h1><p>Hello, everyone!</p><blockquote><p>This is my first blog!</p></blockquote><p><code>java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hibernate 的其他 API</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tong</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateDemo5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// Query</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单查询/查询所有</span></span><br><span class="line"><span class="comment">// 通过 Session 获得 Query 接口，HQL：hibernate query language</span></span><br><span class="line"><span class="comment">/* String hql = "from Customer";</span></span><br><span class="line"><span class="comment">Query query = session.createQuery(hql);*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件查询</span></span><br><span class="line"><span class="comment">/*String hql = "from Customer where cust_name like ?";</span></span><br><span class="line"><span class="comment">Query query = session.createQuery(hql);</span></span><br><span class="line"><span class="comment">// 设置条件</span></span><br><span class="line"><span class="comment">query.setParameter(0, "张%");// 在 hibernate 中 0 代表第一个问号*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分页查询</span></span><br><span class="line">String hql = <span class="string">"from Customer"</span>;</span><br><span class="line">Query query = session.createQuery(hql);</span><br><span class="line"><span class="comment">// 设置分页</span></span><br><span class="line">query.setFirstResult(<span class="number">0</span>);<span class="comment">// 从第一条数据开始</span></span><br><span class="line">query.setMaxResults(<span class="number">3</span>);<span class="comment">// 每页显示 3 条数据</span></span><br><span class="line"></span><br><span class="line">List&lt;Customer&gt; list = query.list();</span><br><span class="line"><span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">System.out.println(customer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tx.commit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// Criteria</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 Session 获得 Criteria 接口</span></span><br><span class="line">Criteria criteria = session.createCriteria(Customer.class);</span><br><span class="line"><span class="comment">// 简单查询/查询所有</span></span><br><span class="line"><span class="comment">// List&lt;Customer&gt; list = criteria.list();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件查询</span></span><br><span class="line"><span class="comment">/*criteria.add(Restrictions.like("cust_name", "张", MatchMode.START));// 匹配名字开头是张的数据</span></span><br><span class="line"><span class="comment">List&lt;Customer&gt; list = criteria.list();*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分页查询</span></span><br><span class="line">criteria.setFirstResult(<span class="number">3</span>);</span><br><span class="line">criteria.setMaxResults(<span class="number">3</span>);</span><br><span class="line">List&lt;Customer&gt; list = criteria.list();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">System.out.println(customer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tx.commit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// SQLQuery</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单查询/查询所有</span></span><br><span class="line"><span class="comment">/*String sql = "select * from cst_customer";</span></span><br><span class="line"><span class="comment">SQLQuery query = session.createSQLQuery(sql);*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件查询</span></span><br><span class="line"><span class="comment">/*String sql = "select * from cst_customer where cust_name=?";</span></span><br><span class="line"><span class="comment">SQLQuery query = session.createSQLQuery(sql);</span></span><br><span class="line"><span class="comment">// 设置条件</span></span><br><span class="line"><span class="comment">query.setParameter(0, "哈哈");*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分页查询</span></span><br><span class="line">String sql = <span class="string">"select * from cst_customer limit ?, ?"</span>;</span><br><span class="line">SQLQuery query = session.createSQLQuery(sql);</span><br><span class="line"><span class="comment">// 设置分页</span></span><br><span class="line">query.setParameter(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">query.setParameter(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">List&lt;Object[]&gt; list = query.list();</span><br><span class="line"><span class="keyword">for</span> (Object[] objects : list) &#123;</span><br><span class="line">System.out.println(Arrays.toString(objects));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tx.commit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      This is my first blog！
    
    </summary>
    
    
  </entry>
  
</feed>
