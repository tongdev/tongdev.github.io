<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hibernate (四)]]></title>
    <url>%2Fhibernate04%2F</url>
    <content type="text"><![CDATA[Hibernate 的查询方式 Hibernate 共提供了五种查询方式。 OID 查询使用 get 方法Customer customer = session.get(Customer.class, 1l); 使用 load 方法Customer customer = session.load(Customer.class, 1l); 对象导航查询对象导航查询是 Hibernate 根据一个已经查询到的对象获得其关联的对象的一种查询方式。 1234567//通过客户获取联系人Customer customer = session.get(Customer.class, 1l); // 查询 1 号客户Set&lt;LinkMan&gt; linkMans = customer.getLinkMans(); // 获得 1 号客户的所有的联系人的集合//通过联系人获取客户LinkMan linkMan = session.get(LinkMan.class, 1l); // 查询 1 号联系人Customer customer = linkMan.getCustomer(); // 查询 1 号联系人所属的客户 HQL 检索HQL（Hibernate Query Language）查询，是一种面向对象的查询语言，语法类似于 SQL，通过 session.createQuery() 接收一个 HQL 语句来进行查询。 HQL 的简单查询123456789101112131415161718192021@Test/** * HQL 的简单查询 */public void demo2() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // HQL 的简单查询 Query query = session.createQuery("from Customer"); List&lt;Customer&gt; list = query.list(); // SQL 中支持 * 号的写法，但 HQL 中不支持 /*Query query = session.createQuery("select * from Customer"); List&lt;Customer&gt; list = query.list(); // 报错 */ for (Customer customer : list) &#123; System.out.println(customer); &#125; tx.commit();&#125; HQL 的别名查询1234567891011121314151617181920@Test/** * HQL 的别名查询 */public void demo3() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); Query query = session.createQuery("from Customer c"); List&lt;Customer&gt; list = query.list(); /*Query query = session.createQuery("select c from Customer c"); List&lt;Customer&gt; list = query.list();*/ for (Customer customer : list) &#123; System.out.println(customer); &#125; tx.commit();&#125; HQL 的排序查询12345678910111213141516171819202122@Test/** * HQL 的排序查询 */public void demo4() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 排序查询 // 默认是升序的：order by ~ asc /*Query query = session.createQuery("from Customer order by cust_id"); List&lt;Customer&gt; list = query.list();*/ // 设置降序排序：order by ~ desc Query query = session.createQuery("from Customer order by cust_id desc"); List&lt;Customer&gt; list = query.list(); for (Customer customer : list) &#123; System.out.println(customer); &#125; tx.commit();&#125; HQL 的条件查询1234567891011121314151617181920212223242526272829303132333435@Test/*** HQL 的条件查询 */public void demo5() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 条件查询，可分为两种 // 1. 按位置绑定 // 一个条件的查询 /* Query query = session.createQuery("from Customer where cust_name = ?"); // 设置条件 query.setParameter(0, "张三");*/ // 多个条件的查询 /*Query query = session.createQuery("from Customer where cust_name like ? and cust_source = ?"); // 设置条件 query.setParameter(0, "李%"); query.setParameter(1, "朋友推荐");*/ // 2. 按名称绑定 Query query = session.createQuery("from Customer where cust_name like :aaa and cust_source = :bbb"); query.setParameter("aaa", "李%"); query.setParameter("bbb", "朋友推荐"); List&lt;Customer&gt; list = query.list(); for (Customer customer : list) &#123; System.out.println(customer.toString()); &#125; tx.commit();&#125; HQL 的投影查询12345678910111213141516171819202122232425262728293031323334@Test/** * HQL 的投影查询 */public void demo6() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 投影查询 // 单个属性的查询 /*Query query = session.createQuery("select c.cust_name from Customer c"); List&lt;Object&gt; list = query.list(); for (Object object : list) &#123; System.out.println(object); &#125; */ // 多个属性的查询 /*Query query = session.createQuery("select c.cust_name,c.cust_source from Customer c"); List&lt;Object[]&gt; list = query.list(); for (Object[] objects : list) &#123; System.out.println(Arrays.toString(objects)); &#125;*/ // 多个属性的查询，并将其每一条查询结果封装到一个对象中 Query query = session.createQuery("select new Customer(cust_name, cust_source) from Customer"); List&lt;Object&gt; list = query.list(); for (Object object : list) &#123; System.out.println(object); &#125; tx.commit();&#125; HQL 的分页查询1234567891011121314151617181920212223@Test/** * 分页查询 */public void demo7() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 分页查询 Query query = session.createQuery("from LinkMan"); // 设置分页的参数 // 设置从第几条开始 query.setFirstResult(0); // 设置每页显示几条 query.setMaxResults(10); List&lt;LinkMan&gt; list = query.list(); for (LinkMan linkMan : list) &#123; System.out.println(linkMan); &#125; tx.commit();&#125; HQL 的分组统计查询12345678910111213141516171819@Test/** * HQL 聚合函数使用以及分组统计查询 */public void demo8() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 聚合函数的使用 Object object = session.createQuery("select count(*) from Customer").uniqueResult(); System.out.println(object); // 分组统计查询 List&lt;Object[]&gt; list = session.createQuery("select cust_name,count(*) from Customer group by cust_source having count(*) &gt;= 2").list(); for (Object[] objects : list) &#123; System.out.println(Arrays.toString(objects)); &#125; tx.commit();&#125; HQL 的多表查询1234567891011121314151617181920212223@Test/** * HQL 的多表查询 */public void demo9() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 内连接 /*List&lt;Object[]&gt; list = session.createQuery("from Customer c inner join c.linkMans").list(); for (Object[] objects : list) &#123; System.out.println(Arrays.toString(objects)); &#125;*/ // 迫切内连接 fetch 的作用就是通知 Hibernate 将另一个对象的数据封装到该对象中 List&lt;Customer&gt; list = session.createQuery("select distinct c from Customer c inner join fetch c.linkMans").list(); for (Customer customer : list) &#123; System.out.println(customer); &#125; tx.commit();&#125; QBC 检索QBC（Query By Criteria）查询，是一种更加面向对象化的查询方式。 QBC 的简单查询123456789101112131415161718@Test/** * 简单查询 */public void demo1() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 简单查询 Criteria criteria = session.createCriteria(Customer.class); List&lt;Customer&gt; list = criteria.list(); for (Customer customer : list) &#123; System.out.println(customer); &#125; tx.commit();&#125; QBC 的排序查询1234567891011121314151617181920212223@Test/** * 排序查询 */public void demo2() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 排序查询 Criteria criteria = session.createCriteria(Customer.class); // 设置排序 // asc 为升序，按照 cust_id 升序排序 //criteria.addOrder(Order.asc("cust_id")); // desc 为降序，按照 cust_id 降序排序 criteria.addOrder(Order.desc("cust_id")); List&lt;Customer&gt; list = criteria.list(); for (Customer customer : list) &#123; System.out.println(customer); &#125; tx.commit();&#125; QBC 的分页查询1234567891011121314151617181920212223@Test/** * 分页查询 */public void demo3() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 分页查询 Criteria criteria = session.createCriteria(LinkMan.class); // 设置分页参数 // 从第几条数据开始 criteria.setFirstResult(0); // 每页显示几条数据 criteria.setMaxResults(10); List&lt;LinkMan&gt; list = criteria.list(); for (LinkMan linkMan : list) &#123; System.out.println(linkMan); &#125; tx.commit();&#125; QBC 的条件查询12345678910111213141516171819202122232425262728293031323334@Test/** * 条件查询 */public void demo4() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 条件查询 Criteria criteria = session.createCriteria(Customer.class); // 设置条件 /** * = eq * &gt; gt * &gt;= ge * &lt; lt * &lt;= le * &lt;&gt; ne * like 模糊匹配 * in 包含 * and 以及 * or 或者 */ // 查询来源是：广告、姓：张 的 记录 criteria.add(Restrictions.eq("cust_source", "广告")); criteria.add(Restrictions.like("cust_name", "张%")); List&lt;Customer&gt; list = criteria.list(); for (Customer customer : list) &#123; System.out.println(customer); &#125; tx.commit();&#125; QBC 的统计查询123456789101112131415161718192021@Test/** * 统计查询 */public void demo5() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 统计查询 Criteria criteria = session.createCriteria(Customer.class); /** * add : 普通条件 * addOrder : 排序条件 * setProjection : 聚合函数条件 和 group by having 条件 */ Long num = (Long) criteria.setProjection(Projections.rowCount()).uniqueResult(); System.out.println(num); tx.commit();&#125; QBC 的离线条件查询12345678910111213141516171819202122@Test/** * 离线条件查询 */public void demo6() &#123; // web 层 需要做的 DetachedCriteria detachedCriteria = DetachedCriteria.forClass(Customer.class); detachedCriteria.add(Restrictions.like("cust_name", "李%")); Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 离线查询对象与 Session 绑定 Criteria criteria = detachedCriteria.getExecutableCriteria(session); List&lt;Customer&gt; list = criteria.list(); for (Customer customer : list) &#123; System.out.println(customer); &#125; tx.commit();&#125; Hibernate 的抓取策略（优化）延迟加载什么是延迟加载延迟加载即 lazy（懒加载）。执行到该行代码时，不会马上发送 SQL 语句去查询，而是在真正的使用这个对象的时候才会去发送 SQL 语句去查询。 延迟加载的分类类级别的延迟加载类级别的延迟加载指的是通过 load 方法查询某个对象的时候，是否采用延迟。它是通过在 &lt;class&gt; 标签上的 lazy 进行配置，如果要让 lazy 失效，可以采用以下几种方式： 将 lazy 设置为 false 将持久化类使用 final 修改，不可继承 使用 Hibernate.initialize() 方法 关联级别的延迟加载关联级别的延迟加载指的是在查询到某个对象的时候，同时查询其关联对象的时候，是否采用延迟加载。 抓取策略 抓取策略往往会和关联级别的延迟加载一起使用来优化语句。 抓取策略的概述通过一个对象抓取其关联对象时需要发送 SQL 语句，如何发送 SQL 语句，以什么样的格式发送，是可以通过策略去配置的，即可以通过 &lt;set&gt; 标签和 &lt;many-to-one&gt; 标签上的 fetch 和 lazy 属性进行设置。 &lt;set&gt; 标签上的 fetch 和 lazy 的配置 fetch：即抓取策略，控制发送 SQL 语句的格式 取值： select ：默认值，发送普通的 select 语句查询关联对象 join ：发送一条迫切左外连接查询关联对象 subselect ：发送一条子查询查询其关联对象 lazy：即延迟加载，控制查询关联对象时是否采用延迟 取值： true ：默认值，采用延迟加载 false ：不采用延迟加载 extra ：采用延迟加载，比 true 更懒 &lt;many-to-one&gt; 标签上的 fetch 和 lazy 的配置 fetch：即抓取策略，控制发送 SQL 语句的格式 取值： select ：默认值，发送普通的 SQL 语句查询关联对象 join：发送一条迫切左外连接 SQL 语句 lazy：即延迟加载，控制查询关联对象时是否采用延迟 取值： proxy ：默认值，proxy 具体的取值取决于关联对方的 &lt;class&gt; 标签上的 lazy 的取值 false：不采用延迟加载 no-proxy：该取值不用 注意在实际开发过程中，一般都采用默认值，如果有特殊需要，可能会用到配置 join。但是面试会问抓取策略的优化。 批量抓取抓取一批关联对象，默认只会抓取一个，可以通过在&lt;set&gt;标签和&lt;class&gt;标签上通过batch-size属性来设置。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960package com.test.hibernate.demo2;import java.util.List;import org.hibernate.Session;import org.hibernate.Transaction;import org.junit.Test;import com.test.hibernate.domain.Customer;import com.test.hibernate.domain.LinkMan;import com.test.hibernate.utils.HibernateUtils;/** * 批量抓取的测试类 * @author Tong * */public class HibernateDemo3 &#123; @Test /** * 获取客户的时候，批量抓取联系人 * 需要在客户的配置文件中的 &lt;set&gt; 上配置 batch-size 属性，默认值为 1，即每次抓取一个 */ public void demo1() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 查询所有客户 List&lt;Customer&gt; list = session.createQuery("from Customer").list(); for (Customer customer : list) &#123; System.out.println(customer.getCust_name()); // 查看每个客户的所有联系人 for (LinkMan linkMan : customer.getLinkMans()) &#123; System.out.println(linkMan.getLkm_name()); &#125; &#125; tx.commit(); &#125; @Test /** * 获取联系人的时候，批量抓取客户 * 需要在客户的配置文件中的 &lt;class&gt; 上配置 batch-size 属性，默认值为 1，即每次抓取一个 */ public void demo2() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 查询所有的联系人 List&lt;LinkMan&gt; list = session.createQuery("from LinkMan").list(); for (LinkMan linkMan : list) &#123; System.out.println(linkMan.getLkm_name()); System.out.println(linkMan.getCustomer().getCust_name()); &#125; tx.commit(); &#125; &#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Hibernate</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hibernate (三)]]></title>
    <url>%2Fhibernate03%2F</url>
    <content type="text"><![CDATA[数据库表与表之间的关系一对多的关系举例说明一个部门可以有多名员工，但一个员工只能隶属于一个部门。 建表原则在多的一方创建外键指向一的一方的主键。 多对多关系举例说明一个学生可以选修多门课程，同时一门课程也可以被多名学生选修。 建表原则创建一个中间表，中间表至少有两个字段分别作为外键指向多对多双方的主键。 一对一关系举例说明一个人只能对应一个身份证号，一个身份证号也只能归属于一个人。 建表原则 唯一外键对应。假设把一对一关系看成是一对多关系，在多的一方建立唯一外键指向一的一方的主键。 主键对应。两个表的主键相同。 Hibernate 的一对多关系的关联映射Hibernate 的一对多的关系的配置创建一个项目引入响应的 jar 包和配置文件创建表客户表12345678910CREATE TABLE `cst_customer` ( `cust_id` bigint(32) NOT NULL AUTO_INCREMENT COMMENT '客户编号(主键)', `cust_name` varchar(32) NOT NULL COMMENT '客户名称(公司名称)', `cust_source` varchar(32) DEFAULT NULL COMMENT '客户信息来源', `cust_industry` varchar(32) DEFAULT NULL COMMENT '客户所属行业', `cust_level` varchar(32) DEFAULT NULL COMMENT '客户级别', `cust_phone` varchar(64) DEFAULT NULL COMMENT '固定电话', `cust_mobile` varchar(16) DEFAULT NULL COMMENT '移动电话', PRIMARY KEY (`cust_id`)) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8; 联系人123456789101112131415CREATE TABLE `cst_linkman` ( `lkm_id` bigint(32) NOT NULL AUTO_INCREMENT COMMENT '联系人编号(主键)', `lkm_name` varchar(16) DEFAULT NULL COMMENT '联系人姓名', `lkm_cust_id` bigint(32) DEFAULT NULL COMMENT '客户id', `lkm_gender` char(1) DEFAULT NULL COMMENT '联系人性别', `lkm_phone` varchar(16) DEFAULT NULL COMMENT '联系人办公电话', `lkm_mobile` varchar(16) DEFAULT NULL COMMENT '联系人手机', `lkm_email` varchar(64) DEFAULT NULL COMMENT '联系人邮箱', `lkm_qq` varchar(16) DEFAULT NULL COMMENT '联系人qq', `lkm_position` varchar(16) DEFAULT NULL COMMENT '联系人职位', `lkm_memo` varchar(512) DEFAULT NULL COMMENT '联系人备注', PRIMARY KEY (`lkm_id`), KEY `FK_cst_linkman_lkm_cust_id` (`lkm_cust_id`), CONSTRAINT `FK_cst_linkman_lkm_cust_id` FOREIGN KEY (`lkm_cust_id`) REFERENCES `cst_customer` (`cust_id`) ON DELETE NO ACTION ON UPDATE NO ACTION) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8; 创建与数据库表对应的实体类客户实体类1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374package com.test.hibernate.domain;import java.util.HashSet;import java.util.Set;/** * 客户类 * @author Tong * */public class Customer &#123; private Long cust_id; private String cust_name; private String cust_source; private String cust_industry; private String cust_level; private String cust_phone; private String cust_mobile; // 通过 ORM 的方式表示：一个客户可以有多个联系人 // 一的一方创建多的一方的 Set 集合，Hibernate 中默认使用的是 Set 集合 private Set&lt;LinkMan&gt; linkMans = new HashSet&lt;LinkMan&gt;(); public Long getCust_id() &#123; return cust_id; &#125; public void setCust_id(Long cust_id) &#123; this.cust_id = cust_id; &#125; public String getCust_name() &#123; return cust_name; &#125; public void setCust_name(String cust_name) &#123; this.cust_name = cust_name; &#125; public String getCust_source() &#123; return cust_source; &#125; public void setCust_source(String cust_source) &#123; this.cust_source = cust_source; &#125; public String getCust_industry() &#123; return cust_industry; &#125; public void setCust_industry(String cust_industry) &#123; this.cust_industry = cust_industry; &#125; public String getCust_level() &#123; return cust_level; &#125; public void setCust_level(String cust_level) &#123; this.cust_level = cust_level; &#125; public String getCust_phone() &#123; return cust_phone; &#125; public void setCust_phone(String cust_phone) &#123; this.cust_phone = cust_phone; &#125; public String getCust_mobile() &#123; return cust_mobile; &#125; public void setCust_mobile(String cust_mobile) &#123; this.cust_mobile = cust_mobile; &#125; public Set&lt;LinkMan&gt; getLinkMans() &#123; return linkMans; &#125; public void setLinkMans(Set&lt;LinkMan&gt; linkMans) &#123; this.linkMans = linkMans; &#125; &#125; 联系人实体类12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576package com.test.hibernate.domain;/** * 联系人类 * @author Tong */public class LinkMan &#123; private Long lkm_id; private String lkm_name; private String lkm_gender; private String lkm_phone; private String lkm_mobile; private String lkm_email; private String lkm_qq; private String lkm_memo; // 通过 ORM 的方式表示：一个联系人只能属于一个客户 // 多的一方创建一的一方的对象 private Customer customer; public Long getLkm_id() &#123; return lkm_id; &#125; public void setLkm_id(Long lkm_id) &#123; this.lkm_id = lkm_id; &#125; public String getLkm_name() &#123; return lkm_name; &#125; public void setLkm_name(String lkm_name) &#123; this.lkm_name = lkm_name; &#125; public String getLkm_gender() &#123; return lkm_gender; &#125; public void setLkm_gender(String lkm_gender) &#123; this.lkm_gender = lkm_gender; &#125; public String getLkm_phone() &#123; return lkm_phone; &#125; public void setLkm_phone(String lkm_phone) &#123; this.lkm_phone = lkm_phone; &#125; public String getLkm_mobile() &#123; return lkm_mobile; &#125; public void setLkm_mobile(String lkm_mobile) &#123; this.lkm_mobile = lkm_mobile; &#125; public String getLkm_email() &#123; return lkm_email; &#125; public void setLkm_email(String lkm_email) &#123; this.lkm_email = lkm_email; &#125; public String getLkm_qq() &#123; return lkm_qq; &#125; public void setLkm_qq(String lkm_qq) &#123; this.lkm_qq = lkm_qq; &#125; public String getLkm_memo() &#123; return lkm_memo; &#125; public void setLkm_memo(String lkm_memo) &#123; this.lkm_memo = lkm_memo; &#125; public Customer getCustomer() &#123; return customer; &#125; public void setCustomer(Customer customer) &#123; this.customer = customer; &#125; &#125; 创建映射文件（重点）多的一方的映射的创建12345678910111213141516171819202122232425262728293031323334353637383940&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;&lt;hibernate-mapping&gt; &lt;!-- 建立实体类与数据库表的映射 --&gt; &lt;class name="com.test.hibernate.domain.Customer" table="cst_customer"&gt; &lt;!-- 建立 OID 与数据库表中主键的映射 --&gt; &lt;id name="cust_id" column="cust_id"&gt; &lt;generator class="native" /&gt; &lt;/id&gt; &lt;!-- 建立类中其他属性与数据库表字段的映射 --&gt; &lt;property name="cust_name" /&gt; &lt;property name="cust_source" /&gt; &lt;property name="cust_industry" /&gt; &lt;property name="cust_level" /&gt; &lt;property name="cust_phone" /&gt; &lt;property name="cust_mobile" /&gt; &lt;!-- 配置一对多的关系映射：放置的是多的一方的对象的 set 集合 --&gt; &lt;!-- set 标签： * name : 多的一方的对象集合名称 * inverse : 是否放弃对外键的管理，默认为 false，即不放弃 --&gt; &lt;set name="linkMans" cascade="save-update,delete" inverse="true"&gt; &lt;!-- key 标签： * column : 多的一方的外键名称 --&gt; &lt;key column="lkm_cust_id" /&gt; &lt;!-- one-to-many: * class : 多的一方的类的全路径 --&gt; &lt;one-to-many class="com.test.hibernate.domain.LinkMan"/&gt; &lt;/set&gt; &lt;/class&gt;&lt;/hibernate-mapping&gt; 一的一方的映射的创建123456789101112131415161718192021222324252627282930313233343536&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;&lt;hibernate-mapping&gt; &lt;!-- 建立实体类与数据库之间的映射 --&gt; &lt;class name="com.test.hibernate.domain.Role" table="sys_role"&gt; &lt;!-- 建立 OID 与数据库表主键的映射 --&gt; &lt;id name="role_id" column="role_id"&gt; &lt;generator class="native" /&gt; &lt;/id&gt; &lt;!-- 建立普通属性与表中其他字段的映射 --&gt; &lt;property name="role_name" column="role_name" /&gt; &lt;property name="role_memo" column="role_memo" /&gt; &lt;!-- 建立角色与用户的多对多关系 --&gt; &lt;!-- set 标签： * name : 对方在本类中的集合的名称 * table : 中间表的名称 --&gt; &lt;set name="users" table="sys_user_role" cascade="save-update,delete" inverse="true" &gt; &lt;!-- key 标签： * column : 当前对象对应中间表中外键的名称 --&gt; &lt;key column="role_id" /&gt; &lt;!-- many-to-many 标签 * class : 对方类的全路径 * column : 对方对象对应中间表的外键名称 --&gt; &lt;many-to-many class="com.test.hibernate.domain.User" column="user_id"&gt;&lt;/many-to-many&gt; &lt;/set&gt; &lt;/class&gt;&lt;/hibernate-mapping&gt; 创建核心配置文件123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;&lt;hibernate-configuration&gt; &lt;session-factory&gt; &lt;!-- 1. 连接数据库的基本参数 --&gt; &lt;property name="hibernate.connection.driver_class"&gt;com.mysql.jdbc.Driver&lt;/property&gt; &lt;property name="hibernate.connection.url"&gt;jdbc:mysql:///hibernate_day03&lt;/property&gt; &lt;property name="hibernate.connection.username"&gt;root&lt;/property&gt; &lt;property name="hibernate.connection.password"&gt;1&lt;/property&gt; &lt;!-- 配置Hibernate的方言 --&gt; &lt;property name="hibernate.dialect"&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt; &lt;!-- 2. 可选配置 --&gt; &lt;!-- 打印 SQL 语句 --&gt; &lt;property name="hibernate.show_sql"&gt;true&lt;/property&gt; &lt;!-- 格式化 SQL 语句 --&gt; &lt;property name="hibernate.format_sql"&gt;true&lt;/property&gt; &lt;!-- 自动建表 --&gt; &lt;property name="hibernate.hbm2ddl.auto"&gt;update&lt;/property&gt; &lt;!-- 配置C3P0连接池 --&gt; &lt;property name="connection.provider_class"&gt;org.hibernate.connection.C3P0ConnectionProvider&lt;/property&gt; &lt;!--在连接池中可用的数据库连接的最少数目 --&gt; &lt;property name="c3p0.min_size"&gt;5&lt;/property&gt; &lt;!--在连接池中所有数据库连接的最大数目 --&gt; &lt;property name="c3p0.max_size"&gt;20&lt;/property&gt; &lt;!--设定数据库连接的过期时间,以秒为单位, 如果连接池中的某个数据库连接处于空闲状态的时间超过了timeout时间,就会从连接池中清除 --&gt; &lt;property name="c3p0.timeout"&gt;120&lt;/property&gt; &lt;!--每3000秒检查所有连接池中的空闲连接 以秒为单位 --&gt; &lt;property name="c3p0.idle_test_period"&gt;3000&lt;/property&gt; &lt;!-- 设置事务的隔离级别 --&gt; &lt;!-- 4 为 mysql 的默认隔离级别 --&gt; &lt;property name="hibernate.connection.isolation"&gt;4&lt;/property&gt; &lt;!-- 配置 Session 绑定当前线程--&gt; &lt;property name="hibernate.current_session_context_class"&gt;thread&lt;/property&gt; &lt;!-- 3. 引入映射文件 --&gt; &lt;mapping resource="com/test/hibernate/domain/Customer.hbm.xml"/&gt; &lt;mapping resource="com/test/hibernate/domain/LinkMan.hbm.xml"/&gt; &lt;/session-factory&gt;&lt;/hibernate-configuration&gt; 编写测试类12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061package com.test.hibernate.demo1;import org.hibernate.Session;import org.hibernate.Transaction;import org.junit.Test;import com.test.hibernate.domain.Customer;import com.test.hibernate.domain.LinkMan;import com.test.hibernate.utils.HibernateUtils;/** * 一对多关系映射的测试类 * @author Tong * */public class HibernateDemo1 &#123; @Test // 保存 2 个客户 3 个联系，并且建立好关系存到数据库中 public void demo1() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 创建两个客户 Customer customer1 = new Customer(); customer1.setCust_name("张三"); Customer customer2 = new Customer(); customer2.setCust_name("李四"); // 创建三个联系人 LinkMan linkMan1 = new LinkMan(); linkMan1.setLkm_name("王五"); LinkMan linkMan2 = new LinkMan(); linkMan2.setLkm_name("赵六"); LinkMan linkMan3 = new LinkMan(); linkMan3.setLkm_name("田七"); // 建立关系 // 一个联系人对应一个客户 linkMan1.setCustomer(customer1); linkMan2.setCustomer(customer1); linkMan3.setCustomer(customer2); // 一个客户可以有多个联系人 customer1.getLinkMans().add(linkMan1); customer1.getLinkMans().add(linkMan2); customer2.getLinkMans().add(linkMan3); // 保存数据 // 保存联系人 session.save(linkMan1); session.save(linkMan2); session.save(linkMan3); // 保存客户 session.save(customer1); session.save(customer2); tx.commit(); &#125; &#125; Hibernate 的一对多的相关操作一对多关系只保存一边是否可以成功只保存一边是不可以的，会报一个瞬时态对象异常，因为持久态关联了一个瞬时态的对象。 1234567891011121314151617181920@Test// 测试一对多关系只保存一边是否可以public void demo2() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); Customer customer = new Customer(); customer.setCust_name("张三"); LinkMan linkMan = new LinkMan(); linkMan.setLkm_name("李四"); linkMan.setCustomer(customer); customer.getLinkMans().add(linkMan); // 只保存客户，不可以，报一个瞬时态对象异常，因为持久态对象关联了一个瞬时态对象 session.save(customer); tx.commit();&#125; 一对多的级联操作 级联指的是在操作一个对象的时候会同时操作其关联的对象。 级联保存或更新保存客户级联保存联系人要完成级联操作首先需要在客户的映射文件中的 set 集合上进行级联配置 &lt;set name=&quot;linkMans&quot; cascade=&quot;save-update,delete&quot; ... 编写测试代码 123456789101112131415161718192021222324@Test/** * 级联保存或更新 * * 保存客户级联联系人，操作的主体是客户，需要在 Customer.hbm.xml 中配置 * * &lt;set name="linkMans" cascade="save-update"&gt; */public void demo3() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); Customer customer = new Customer(); customer.setCust_name("张三"); LinkMan linkMan = new LinkMan(); linkMan.setLkm_name("李四"); linkMan.setCustomer(customer); customer.getLinkMans().add(linkMan); // 保存客户级联保存联系人 session.save(customer); tx.commit();&#125; 保存联系人级联保存客户与保存客户级联保存联系人同理，只需进行相应的配置即可，首先在联系人的映射文件中的many-to-one标签上添加一个属性cascade=&quot;save-update&quot; 123456789101112131415161718192021222324@Test/** * 级联保存或更新 * * 保存联系人级联客户，操作的主体是联系人，需要在 LinkMan.hbm.xml 中配置 * * &lt;many-to-one name="customer" cascade="save-update" class="com.test.hibernate.domain.Customer" column="lkm_cust_id" /&gt; */public void demo4() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); Customer customer = new Customer(); customer.setCust_name("王五"); LinkMan linkMan = new LinkMan(); linkMan.setLkm_name("赵六"); linkMan.setCustomer(customer); customer.getLinkMans().add(linkMan); // 保存联系人级联客户 session.save(customer); tx.commit();&#125; 测试对象的导航12345678910111213141516171819202122232425262728293031@Test/** * 测试对象的导航 * * 前提：一对多的双方都设置了 cascade="save-update" */public void demo5() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); Customer customer = new Customer(); customer.setCust_name("张三"); LinkMan linkMan1 = new LinkMan(); linkMan1.setLkm_name("李四"); LinkMan linkMan2 = new LinkMan(); linkMan2.setLkm_name("王五"); LinkMan linkMan3 = new LinkMan(); linkMan3.setLkm_name("赵六"); // 设置关联关系 linkMan1.setCustomer(customer); customer.getLinkMans().add(linkMan2); customer.getLinkMans().add(linkMan3); // 前提双方都设置了级联 session.save(linkMan1); // 会发送 4 条 insert 语句 // session.save(customer); // 会发送 3 条 insert 语句 // session.save(linkMan2); // 会发送 1 条 insert 语句 tx.commit();&#125; 级联删除（基本不用） 删除一边的时候，同时将另一边的数据也一并删除。 如果要使用级联删除，前提是需要在主体方的映射文件中配置一个属性 cascade=&quot;delete&quot;，这样的话，只有主体方的数据被删除，那么相应的与它有关联的客体的数据也会被级联删除。 删除客户级联删除联系人123456789101112131415161718192021@Test/** * 级联删除 * * 删除客户级联删除联系人，操作的主体是客户，需要在 Customer.hbm.xml 中配置 * * &lt;set name="linkMans" cascade="delete"&gt; */public void demo6() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 先查询再删除 // 默认情况：先将联系人的外键置为 null，然后删除客户 /*Customer customer = session.get(Customer.class, 1l); session.delete(customer);*/ // 级联删除 Customer customer = session.get(Customer.class, 1l); session.delete(customer); tx.commit();&#125; 删除联系人级联删除客户1234567891011121314151617@Test/** * 级联删除 * * 删除联系人级联删除客户（很少用），操作的主体是联系人，需要在 LinkMan.hbm.xml 中配置 * * &lt;set name="customer" cascade="delete"&gt; */public void demo7() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 先查询再删除 // 级联删除 LinkMan linkMan = session.get(LinkMan.class, 5l); session.delete(linkMan); tx.commit();&#125; 一对多设置了双向关联产生多余 SQL 语句问题123456789101112131415161718192021@Test/** * 原来 2 号联系人属于 1 号客户，现将其改为隶属于 2 号客户 */public void demo8() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 查询 2 号联系人 LinkMan linkMan = session.get(LinkMan.class, 2l); // 查询 2 号客户 Customer customer = session.get(Customer.class, 2l); // 双向的关联：会发送重复的 SQL 语句，一的一方放弃外键的管理可以解决资源的浪费。 linkMan.setCustomer(customer); customer.getLinkMans().add(linkMan); // 持久化对象可以自动更新数据库 tx.commit();&#125; 分析产生多余 SQL 的原因第 10 行代码和带 12 行代码分别会查询 2 号联系人和 2 号客户，查到之后会将查到的数据放到一级缓存的缓存区和快照区各一份。 那么当执行到第 15 行代码时，联系人 2 要关联客户 2，此时先会将这条数据放到缓存区中，与快照区中的数据进行对比，如果发生改变就会发送 SQL 语句去更新数据库，如果没有发生改变，就不会发送 SQL 也不会更新数据库，那么经过对比后显然数据发生了改变，这时候就会发送一条 SQL 去更新。 当执行到第 16 行代码时，又进行了一次对比，数据不一致，那么就会再发送一条 SQL 语句去更新数据库。 显然如果设置双向关联之后，就会产生多余的 SQL，进行重复的操作。 解决方法即单向维护关系，使得一方主动放弃外键维护权，一般是被动的一方主动放弃外键维护权。在放弃方的 set 集合上配置inverse=&quot;true&quot;属性，即为放弃外键维护权。 区分 cascade 和 inverse1234567891011121314151617181920@Test/** * 区别 cascade 和 inverse */public void demo9() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 查询 2 号联系人 LinkMan linkMan = session.get(LinkMan.class, 2l); // 查询 2 号客户 Customer customer = session.get(Customer.class, 2l); customer.getLinkMans().add(linkMan); // 条件：在 Customer.hbm.xml 上的 set 中配置 cascade="save-update" inverse="true" session.save(customer); // 客户会插入到数据库中、联系人也会插入到数据库中，但是外键会为 null tx.commit();&#125; Hibernate 的多对多的关联映射Hibernate 的多对多关系的配置创建表用户表12345678CREATE TABLE `sys_user` ( `user_id` bigint(32) NOT NULL AUTO_INCREMENT COMMENT '用户id', `user_code` varchar(32) NOT NULL COMMENT '用户账号', `user_name` varchar(64) NOT NULL COMMENT '用户名称', `user_password` varchar(32) NOT NULL COMMENT '用户密码', `user_state` char(1) NOT NULL COMMENT '1:正常,0:暂停', PRIMARY KEY (`user_id`)) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8; 角色表123456CREATE TABLE `sys_role` ( `role_id` bigint(32) NOT NULL AUTO_INCREMENT, `role_name` varchar(32) NOT NULL COMMENT '角色名称', `role_memo` varchar(128) DEFAULT NULL COMMENT '备注', PRIMARY KEY (`role_id`)) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8; 中间表12345678CREATE TABLE `sys_user_role` ( `role_id` bigint(32) NOT NULL COMMENT '角色id', `user_id` bigint(32) NOT NULL COMMENT '用户id', PRIMARY KEY (`role_id`,`user_id`), KEY `FK_user_role_user_id` (`user_id`), CONSTRAINT `FK_user_role_role_id` FOREIGN KEY (`role_id`) REFERENCES `sys_role` (`role_id`) ON DELETE NO ACTION ON UPDATE NO ACTION, CONSTRAINT `FK_user_role_user_id` FOREIGN KEY (`user_id`) REFERENCES `sys_user` (`user_id`) ON DELETE NO ACTION ON UPDATE NO ACTION) ENGINE=InnoDB DEFAULT CHARSET=utf8; 创建实体类用户实体类12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758package com.test.hibernate.domain;import java.util.HashSet;import java.util.Set;/** * 用户实体类 * @author Tong */public class User &#123; private Long user_id; private String user_code; private String user_name; private String user_password; private String user_state; // 多对多关系，放置的是对方的集合 private Set&lt;Role&gt; roles = new HashSet&lt;Role&gt;(); public Long getUser_id() &#123; return user_id; &#125; public void setUser_id(Long user_id) &#123; this.user_id = user_id; &#125; public String getUser_code() &#123; return user_code; &#125; public void setUser_code(String user_code) &#123; this.user_code = user_code; &#125; public String getUser_name() &#123; return user_name; &#125; public void setUser_name(String user_name) &#123; this.user_name = user_name; &#125; public String getUser_password() &#123; return user_password; &#125; public void setUser_password(String user_password) &#123; this.user_password = user_password; &#125; public String getUser_state() &#123; return user_state; &#125; public void setUser_state(String user_state) &#123; this.user_state = user_state; &#125; public Set&lt;Role&gt; getRoles() &#123; return roles; &#125; public void setRoles(Set&lt;Role&gt; roles) &#123; this.roles = roles; &#125; &#125; 角色实体类1234567891011121314151617181920212223242526272829303132333435363738394041424344package com.test.hibernate.domain;import java.util.HashSet;import java.util.Set;/** * 角色实体类 * @author Tong */public class Role &#123; private Long role_id; private String role_name; private String role_memo; // 多对多关系，放置的是对方的集合 private Set&lt;User&gt; users = new HashSet&lt;User&gt;(); public Long getRole_id() &#123; return role_id; &#125; public void setRole_id(Long role_id) &#123; this.role_id = role_id; &#125; public String getRole_name() &#123; return role_name; &#125; public void setRole_name(String role_name) &#123; this.role_name = role_name; &#125; public String getRole_memo() &#123; return role_memo; &#125; public void setRole_memo(String role_memo) &#123; this.role_memo = role_memo; &#125; public Set&lt;User&gt; getUsers() &#123; return users; &#125; public void setUsers(Set&lt;User&gt; users) &#123; this.users = users; &#125; &#125; 创建映射配置文件用户的映射文件123456789101112131415161718192021222324252627282930313233343536373839&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;&lt;hibernate-mapping&gt; &lt;!-- 配置实体类与数据库表的映射 --&gt; &lt;class name="com.test.hibernate.domain.User" table="sys_user"&gt; &lt;!-- 建立 OID 与数据库表主键的映射 --&gt; &lt;id name="user_id" column="user_id"&gt; &lt;generator class="native" /&gt; &lt;/id&gt; &lt;!-- 建立普通属性与表其他字段的映射 --&gt; &lt;property name="user_code" column="user_code" /&gt; &lt;property name="user_name" column="user_name" /&gt; &lt;property name="user_password" column="user_password" /&gt; &lt;property name="user_state" column="user_state" /&gt; &lt;!-- 建立用户与角色的多对多关系的映射 --&gt; &lt;!-- set 标签： * name ： 对方集合的属性名称 * table ： 多对多关系需要中间表，放的是中间表的表名 --&gt; &lt;set name="roles" table="sys_user_role" cascade="save-update,delete"&gt; &lt;!-- key 标签： * column ： 当前的对象在中间表中的外键名称 --&gt; &lt;key column="user_id" /&gt; &lt;!-- many-to-many 标签： * class ： 对方类的全路径 * column ： 对方对象在中间表中的外键名称 --&gt; &lt;many-to-many class="com.test.hibernate.domain.Role" column="role_id" &gt;&lt;/many-to-many&gt; &lt;/set&gt; &lt;/class&gt;&lt;/hibernate-mapping&gt; 角色的映射文件123456789101112131415161718192021222324252627282930313233343536&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;&lt;hibernate-mapping&gt; &lt;!-- 建立实体类与数据库之间的映射 --&gt; &lt;class name="com.test.hibernate.domain.Role" table="sys_role"&gt; &lt;!-- 建立 OID 与数据库表主键的映射 --&gt; &lt;id name="role_id" column="role_id"&gt; &lt;generator class="native" /&gt; &lt;/id&gt; &lt;!-- 建立普通属性与表中其他字段的映射 --&gt; &lt;property name="role_name" column="role_name" /&gt; &lt;property name="role_memo" column="role_memo" /&gt; &lt;!-- 建立角色与用户的多对多关系 --&gt; &lt;!-- set 标签： * name : 对方在本类中的集合的名称 * table : 中间表的名称 --&gt; &lt;set name="users" table="sys_user_role" cascade="save-update,delete" inverse="true" &gt; &lt;!-- key 标签： * column : 当前对象对应中间表中外键的名称 --&gt; &lt;key column="role_id" /&gt; &lt;!-- many-to-many 标签 * class : 对方类的全路径 * column : 对方对象对应中间表的外键名称 --&gt; &lt;many-to-many class="com.test.hibernate.domain.User" column="user_id"&gt;&lt;/many-to-many&gt; &lt;/set&gt; &lt;/class&gt;&lt;/hibernate-mapping&gt; 在核心配置文件中引入两个对象的映射文件123&lt;!-- 3. 引入映射文件 --&gt;&lt;mapping resource="com/test/hibernate/domain/User.hbm.xml"/&gt;&lt;mapping resource="com/test/hibernate/domain/Role.hbm.xml"/&gt; 编写测试类1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859package com.test.hibernate.demo2;import org.hibernate.Session;import org.hibernate.Transaction;import org.junit.Test;import com.test.hibernate.domain.Role;import com.test.hibernate.domain.User;import com.test.hibernate.utils.HibernateUtils;/** * 测试多对多的关系映射 * @author Tong * */public class HibernateDemo2 &#123; @Test // 保存数据，保存 2 个用户，3 个角色，并建立关系 public void demo1() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 创建 2 个用户 User user1 = new User(); user1.setUser_name("张三"); User user2 = new User(); user2.setUser_name("李四"); // 创建 3 个角色 Role role1 = new Role(); role1.setRole_name("研发部"); Role role2 = new Role(); role2.setRole_name("市场部"); Role role3 = new Role(); role3.setRole_name("公关部"); // 多对多建立双向关联映射，需要一方主动放弃外键维护权 // ***一般被动方放弃外键维护权 user1.getRoles().add(role1); user1.getRoles().add(role2); user2.getRoles().add(role2); user2.getRoles().add(role3); role1.getUsers().add(user1); role2.getUsers().add(user1); role2.getUsers().add(user2); role3.getUsers().add(user2); // 保存数据 session.save(user1); session.save(user2); session.save(role1); session.save(role2); session.save(role3); tx.commit(); &#125; &#125; Hibernate 的多对多的操作多对多关系只保存一边是否能够成功不可以，必须要一方放弃外键维护权。 1234567891011121314151617181920212223242526@Test/** * 只保存一边是否可以？ * 不可以，会报瞬时态对象异常 */public void demo2() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 创建 1 个用户 User user = new User(); user.setUser_name("张三"); // 创建 1 个角色 Role role = new Role(); role.setRole_name("研发部"); // 建立关系 user.getRoles().add(role); role.getUsers().add(user); // 只保存一边，会报异常 // session.save(user); session.save(role); tx.commit();&#125; 多对多的级联保存或更新 要完成级联操作，前提是需要在主动方的 set 集合上配置一个cascade=&quot;save-update&quot;属性。 保存用户级联保存角色1234567891011121314151617181920212223242526@Test/** * 级联保存： * * 保存用户级联保存角色，需要在用户的映射文件中配置 * * 在 User.hbm.xml 中的 set 上配置 cascade="save-update" */public void demo3() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 创建 1 个用户 User user = new User(); user.setUser_name("张三"); // 创建 1 个角色 Role role = new Role(); role.setRole_name("研发部"); // 建立关系 user.getRoles().add(role); role.getUsers().add(user); session.save(user); tx.commit();&#125; 保存角色级联保存用户1234567891011121314151617181920212223242526@Test/** * 级联保存： * * 保存角色级联保存用户，需要在角色的映射文件中配置 * * 在 Role.hbm.xml 中的 set 上配置 cascade="save-update" */public void demo4() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 创建 1 个用户 User user = new User(); user.setUser_name("张三"); // 创建 1 个角色 Role role = new Role(); role.setRole_name("研发部"); // 建立关系 user.getRoles().add(role); role.getUsers().add(user); session.save(role); tx.commit();&#125; 多对多的级联删除（基本不用） 同样要完成级联删除操作，需要在主动方的 set 集合上配置一个 cascade=&quot;delete&quot;属性。 删除用户级联删除角色123456789101112131415161718@Test/** * 级联删除： * * 删除用户级联删除角色，需要在用户的映射文件中配置 * * 在 User.hbm.xml 中的 set 上配置 cascade="delete" */public void demo5() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 查询 1 号客户 User user = session.get(User.class, 1l); // 删除 1 号客户级联删除相应的角色 session.delete(user); tx.commit();&#125; 删除角色级联删除用户123456789101112131415161718@Test/** * 级联删除： * * 删除角色级联删除用户，需要在角色的映射文件中配置 * * 在 Role.hbm.xml 中的 set 上配置 cascade="delete" */public void demo6() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 查询 2 号角色 Role role = session.get(Role.class, 3l); // 删除 3 号角色级联删除相应的客户 session.delete(role); tx.commit();&#125; 多对多的其他操作给用户添加角色123456789101112131415161718@Test/** * 给用户添加角色 */public void demo7() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 给 1 号用户添加 2 号 角色 // 先查询 1 号用户 User user = session.get(User.class, 1l); // 再查询 2 号角色 Role role = session.get(Role.class, 2l); user.getRoles().add(role); tx.commit();&#125; 给用户改选角色123456789101112131415161718192021@Test/** * 给用户改选角色 */public void demo8() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 给 2 号用户的 2 号 角色改选为 3 号角色 // 先查询 2 号用户 User user = session.get(User.class, 2l); // 查询 2 号角色和 3 号角色 Role role2 = session.get(Role.class, 2l); Role role3 = session.get(Role.class, 3l); // 先移除 2 号角色再添加 3 号角色 user.getRoles().remove(role2); user.getRoles().add(role3); tx.commit();&#125; 给用户删除角色12345678910111213141516171819@Test/** * 给用户删除角色 */public void demo9() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 给 2 号用户删除 3 号 角色 // 先查询 2 号用户 User user = session.get(User.class, 2l); // 查询 2 号角色 Role role3 = session.get(Role.class, 3l); // 删除 2 号角色 user.getRoles().remove(role3); tx.commit();&#125; 学习目标能够使用 Hibernate 搭建一对多或多对多的配置环境。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Hibernate</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hibernate (二)]]></title>
    <url>%2Fhibernate02%2F</url>
    <content type="text"><![CDATA[Hibernate 持久化类的编写规则什么是持久化类持久化：就是将内存中的数据永久的存储在关系型数据库中。 持久化类：指的是一个 Java 类与数据库表建立了映射关系，那么这么类就称之为持久化类。 持久化类的编写规则 首先编写持久化类需要提供无参的构造方法，在 Java 中默认构造即无参构造。 持久化类的属性需要私有，对私有的属性提供公共的 set 和 get 方法。 持久化类的属性要尽量使用包装类的类型。举个例子，假如使用基本数据类型 int，它默认值是 0，那么如果把这个 0 存到数据库中，就会产生歧义，到底是用户存的 0 呢，还是用户没有设置呢，它的默认值就是 0 呀。如果使用包装类 Integer 的话就可以避免发生这种情况，我们一起来分析一下，它的默认值是 null，如果用户存一个数，数据库中就会显示相应的数值，如果用户没有设置值，那么数据库中就会显示为 null，一目了然，歧义就解决了。 持久化类要有一个唯一标识 OID 与表的主键对应。 持久化类尽量不要使用 final 进行修饰。因为 Hibernate 中有延时加载优化机制，这个机制中会产生代理对象，会继承持久化类产生子类，从而产生代理对象，如果用 final 修饰的话，这个优化机制就失效了。 Hibernate 主键生成策略主键类型自然主键：把具有业务含义的字段作为主键，称为自然主键。 代理主键：把不具备业务含义的字段作为主键，称之为代理主键，通常使用 id 来作为主键。 Hibernate 的主键生成策略 在实际开发中一般是不允许用户手动设置主键的，一般是手动编写程序进行设置，再交给数据库，在 Hibernate 中为了减少程序代码的编写，它提供了很多中的主键生成策略。 increment：hibernate 中提供的自增长机制，适用 short、int、long 类型的主键。线程不安全，建议在单线程中使用。 identity：适用 short、int、long 类型的主键，采用的是数据库底层的自动增长机制。适用于有自动增长机制的数据库，如 MySQL 等。Oracle 是没有自动增长的。 sequence：适用 short、int、long 类型的主键，采用的是序列化的方式，支持 Oracle 等。 uuid：适用于字符串类型的主键。使用 hibernate 中的随机方式生成字符串主键，类似于 Java 给提供的 UUID 对象。 native：根据本地机制进行自动调整，可以在 identity 和 sequence 之间进行自动切换。 assigned：hibernate 放弃对主键的管理，需要手动编写程序或用户自己设置。 foreign：外部主键。 Hibernate 的持久化的三种状态Hibernate 为了更好的管理持久化类，将持久化类分成了三种状态。分别是瞬时态、持久态、脱管态或游离态。 瞬时态此状态对象没有唯一标识 OID，没有被 session 管理，称为是瞬时态对象。 持久态此状态对象有唯一标识 OID，且被 session 管理，称为持久态对象。 脱管态此状态对象有唯一标识 OID，但没有被 session 管理，称为脱管态对象。 如何区分三种状态对象通过一段代码解释 123456789101112@Testpublic void demo1() &#123; Session session = HibernateUtils.openSession(); Transaction transaction = session.beginTransaction(); Customer customer = new Customer(); // 瞬时态对象，没有唯一标识 OID，没有被 session 管理 customer.setCust_name("李四"); Serializable id = session.save(customer); // 持久态对象，有唯一标识 OID，被 session 管理 transaction.commit(); session.close(); // 脱管态对象，有唯一标识 OID，没有被 session 管理&#125; 三种状态对象的转换 瞬时态对象获得：Customer customer = new Customer()，简单来说就是 new 状态转换： 瞬时态 –&gt; 持久态 调用保存方法save(Object obj)、调用保存或更新方法saveOrUpdate(Object obj) 瞬时态 –&gt; 脱管态 设置 id，customer.setCust_id() 持久态对象获得：可通过查询方法get()、load()获得 状态转换： 持久态 –&gt; 瞬时态 调用删除方法delete() 持久态 –&gt; 脱管态 session 关闭close()、清除所有clear()、清除某一个对象evict(Object obj) 脱管态对象获得：两部曲，先 new 对象，然后设置 id。Customer customer = new Customer(); customer.setCust_id(1l); 状态转换： 脱管态 –&gt; 瞬时态 将该对象的 id 置为 null 即可 脱管态 –&gt; 持久态 update()、saveOrUpdate() 持久态对象的特性持久态对象能够自动更新数据库 123456789101112@Testpublic void demo2() &#123; Session session = HibernateUtils.openSession(); Transaction transaction = session.beginTransaction(); // 获得持久化对象，持久化对象可以自动更新数据库 Customer customer = session.get(Customer.class, 1l); customer.setCust_name("哈哈"); // session.update(customer); transaction.commit(); session.close();&#125; 持久态对象之所以有自动更新数据库的特性是依赖于 Hibernate 的一级缓存。 Hibernate 的一级缓存什么是缓存缓存：是一种优化方式，将数据存到内存当中，使用时从缓存中获取，减少直接向永久性数据源的读取次数，提高应用的性能。 Hibernate 的一级缓存 Hibernate 中提供的优化手段：缓存、抓取策略。Hibernate 中提供了两种缓存机制：一级缓存、二级缓存。 Hibernate 的一级缓存，也称为是 Session 级别的缓存，一级缓存的生命周期与 Session 对象一致，其实一级缓存就是由 Session 对象中的一系列 Java 集合构成的。一级缓存是自带的且不可卸载的。 Hibernate 的二级缓存是基于 SessionFactory 级别的缓存，是需要配置的，通常二级缓存使用 Redis 替代较多。 证明一级缓存的存在123456789101112131415161718192021222324@Test// 证明一级缓存的存在public void demo1() &#123; Session session = HibernateUtils.openSession(); Transaction transaction = session.beginTransaction(); /*Customer customer1 = session.get(Customer.class, 1l); // 发送 SQL，从数据库中查询之后放到一级缓存中 System.out.println(customer1); Customer customer2 = session.get(Customer.class, 1l); // 不发送 SQL，直接从一级缓存中取 System.out.println(customer2); System.out.println(customer1 == customer2);*/ Customer customer1 = new Customer(); customer1.setCust_name("张三"); Serializable id = session.save(customer1); System.out.println(id); Customer customer2 = session.get(Customer.class, id); // 不发送 SQL，save() 之后，会将保存的对象放到缓存中 System.out.println(customer2); System.out.println(customer1 == customer2); transaction.commit(); session.close();&#125; Hibernate 的一级缓存结构 一级缓存内部存在一个特殊的区域：快照区 123456789101112@Test// 测试一级缓存的快照区public void demo2() &#123; Session session = HibernateUtils.openSession(); Transaction tx = session.beginTransaction(); Customer customer1 = session.get(Customer.class, 1l); // 发送 SQL 语句，同时放到一级缓存和快照区 customer1.setCust_name("李四"); tx.commit(); session.close();&#125; Hibernate 的事务管理什么是事务事务指的是逻辑上的一组操作，组成这组操作的各个逻辑单元要么全部成功，要么全部失败。 事务的特性 原子性：代表事务不可分割。 一致性：代表事务执行前后，数据完整性保持一致。 隔离性：代表一个事务在执行过程中，不应该受到其他事务的干扰。 持久性：代表事务执行结束后，数据会持久保存到数据库中。 如果不考虑隔离性，引发的安全性问题读问题 脏读： 一个事务读到另一个事务未提交的数据。 不可重复读：一个事务读到另一个事务已提交的 update 更新数据，导致在前一个事务中多次查询结果不一致。 虚读：一个事务读到另一个事务已提交的 insert 添加数据，导致在前一个事务中多次查询结果不一致。 写问题 引发两类丢失更新 读写问题的解决通过设置事务的更新级别控制 Read uncommited：不能解决任何问题。 Read commited：可以解决脏读，但是不可重复读和虚读可能发生。（Oracle 的默认事务隔离级别） Repeatable read：可以解决脏读和不可重复读，但是虚读可能发生。（MySQL 的默认事务隔离级别） Serializable：可以解决所有的读问题，它属于死锁，安全性高，但效率低。 Hibernate 中设置事务隔离级别可以在 hibernate 的核心配置文件中设置 123&lt;!-- 设置事务隔离级别 --&gt;&lt;!-- 4 为 MySql 的默认级别 --&gt;&lt;property name="hibernate.connection.isolation"&gt;4&lt;/property&gt; 线程绑定 Session 将 Session 与当前线程绑定方便事务控制 改写使用 Hibernate 操作数据库的工具类123456789101112131415161718192021222324public class HibernateUtils &#123; // 创建 Configuration 对象 private final static Configuration cfg; // 创建 SessionFactory 对象 private final static SessionFactory sf; // 给两个变量赋值 static &#123; cfg = new Configuration().configure(); sf = cfg.buildSessionFactory(); &#125; // 对外提供公共的方法获得连接对象 public static Session openSession() &#123; return sf.openSession(); &#125; // 将 Session 与当前线程绑定 public static Session getCurrentSession() &#123; return sf.getCurrentSession(); &#125; &#125; 在 Hibernate 核心配置文件中配置 要使用 getCurrentSession() 方法，需要在 hibernate 核心配置文件中配置后才能使用 12&lt;!-- 配置 session 绑定当前线程 --&gt;&lt;property name="hibernate.current_session_context_class"&gt;thread&lt;/property&gt; Hibernate 的其他 APIQueryQuery 代表面向对象的一个 Hibernate 查询操作，通常使用 session.createQuery() 方法接收一个 HQL（Hibernate Query Language）语句，然后进行查询操作。 12345678910111213141516171819202122232425262728293031@Test// Querypublic void demo1() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 简单查询/查询所有 // 通过 Session 获得 Query 接口，HQL：hibernate query language /* String hql = "from Customer"; Query query = session.createQuery(hql);*/ // 条件查询 /*String hql = "from Customer where cust_name like ?"; Query query = session.createQuery(hql); // 设置条件 query.setParameter(0, "张%"); // 在 hibernate 中 0 代表第一个问号*/ // 分页查询 String hql = "from Customer"; Query query = session.createQuery(hql); // 设置分页 query.setFirstResult(0); // 从第一条数据开始 query.setMaxResults(3); // 每页显示 3 条数据 List&lt;Customer&gt; list = query.list(); for (Customer customer : list) &#123; System.out.println(customer); &#125; tx.commit();&#125; CriteriaCriteria 是一个完全面向对象，可扩展的条件查询 API，Criteria 查询又称为 QBC（Query By Criteria）查询。 1234567891011121314151617181920212223242526@Test// Criteriapublic void demo2() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 通过 Session 获得 Criteria 接口 Criteria criteria = session.createCriteria(Customer.class); // 简单查询/查询所有 // List&lt;Customer&gt; list = criteria.list(); // 条件查询 /*criteria.add(Restrictions.like("cust_name", "张", MatchMode.START)); // 匹配名字开头是张的数据 List&lt;Customer&gt; list = criteria.list();*/ // 分页查询 criteria.setFirstResult(3); criteria.setMaxResults(3); List&lt;Customer&gt; list = criteria.list(); for (Customer customer : list) &#123; System.out.println(customer); &#125; tx.commit();&#125; SQLQuerySQLQuery 这个接口用于接收一个 sql 语句进行查询。 123456789101112131415161718192021222324252627282930@Test// SQLQuerypublic void demo3() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 简单查询/查询所有 /*String sql = "select * from cst_customer"; SQLQuery query = session.createSQLQuery(sql);*/ // 条件查询 /*String sql = "select * from cst_customer where cust_name=?"; SQLQuery query = session.createSQLQuery(sql); // 设置条件 query.setParameter(0, "哈哈");*/ // 分页查询 String sql = "select * from cst_customer limit ?, ?"; SQLQuery query = session.createSQLQuery(sql); // 设置分页 query.setParameter(0, 3); query.setParameter(1, 3); List&lt;Object[]&gt; list = query.list(); for (Object[] objects : list) &#123; System.out.println(Arrays.toString(objects)); &#125; tx.commit();&#125; 注意将 Session 绑定在线程上后，当线程执行完毕之后，Session 对象也会自动关闭，不需要手动 session.close() 关闭，否则会报错。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Hibernate</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hibernate (一)]]></title>
    <url>%2Fhibernate01%2F</url>
    <content type="text"><![CDATA[Hibernate 框架概述 什么是框架 框架是软件的半成品，已经完成了部分功能，可以提交开发效率。 什么是 Hibernate 简单地说，Hibernate 就是持久层（dao 层） 的 ORM 框架。 什么是 ORM ORM：全称 Object Relational Mapping，意思即对象关系映射，指的是将一个 Java 中的实体类与关系型数据库中的表建立一种映射关系，从而操作对象就可以操作数据库中的表。 Hibernate 的入门 下载 Hibernate 开发环境并解压到本地 下载地址 创建一个项目，引入相应的 jar 包 数据库驱动包 Hibernate 开发的必须 jar 包 Hibernate 的日志记录包 在数据库中创建表 建表 SQL 语句 12345678910CREATE TABLE `cst_customer` ( `cust_id` bigint(32) NOT NULL AUTO_INCREMENT COMMENT '客户编号(主键)', `cust_name` varchar(32) NOT NULL COMMENT '客户名称(公司名称)', `cust_source` varchar(32) DEFAULT NULL COMMENT '客户信息来源', `cust_industry` varchar(32) DEFAULT NULL COMMENT '客户所属行业', `cust_level` varchar(32) DEFAULT NULL COMMENT '客户级别', `cust_phone` varchar(64) DEFAULT NULL COMMENT '固定电话', `cust_mobile` varchar(16) DEFAULT NULL COMMENT '移动电话', PRIMARY KEY (`cust_id`)) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8; 创建实体类 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657public class Customer &#123; private Long cust_id; private String cust_name; private String cust_source; private String cust_industry; private String cust_level; private String cust_phone; private String cust_mobile; public Long getCust_id() &#123; return cust_id; &#125; public void setCust_id(Long cust_id) &#123; this.cust_id = cust_id; &#125; public String getCust_name() &#123; return cust_name; &#125; public void setCust_name(String cust_name) &#123; this.cust_name = cust_name; &#125; public String getCust_source() &#123; return cust_source; &#125; public void setCust_source(String cust_source) &#123; this.cust_source = cust_source; &#125; public String getCust_industry() &#123; return cust_industry; &#125; public void setCust_industry(String cust_industry) &#123; this.cust_industry = cust_industry; &#125; public String getCust_level() &#123; return cust_level; &#125; public void setCust_level(String cust_level) &#123; this.cust_level = cust_level; &#125; public String getCust_phone() &#123; return cust_phone; &#125; public void setCust_phone(String cust_phone) &#123; this.cust_phone = cust_phone; &#125; public String getCust_mobile() &#123; return cust_mobile; &#125; public void setCust_mobile(String cust_mobile) &#123; this.cust_mobile = cust_mobile; &#125; @Override public String toString() &#123; return "Customer [cust_id=" + cust_id + ", cust_name=" + cust_name + ", cust_source=" + cust_source + ", cust_industry=" + cust_industry + ", cust_level=" + cust_level + ", cust_phone=" + cust_phone + ", cust_mobile=" + cust_mobile + "]"; &#125;&#125; 创建映射 映射通过 XML 的配置文件完成，配置文件可以任意命名，但通常使用统一命名规范（类名.hbm.xml）[hbm : hibernate mapping] 123456789101112131415161718192021&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE hibernate-mapping PUBLIC &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot; &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&gt;&lt;hibernate-mapping&gt; &lt;!-- 建立类与表的映射 --&gt; &lt;class name=&quot;com.test.hibernate.demo1.Customer&quot; table=&quot;cst_customer&quot;&gt; &lt;!-- 建立类中的属性与表中的主键对应 --&gt; &lt;id name=&quot;cust_id&quot; column=&quot;cust_id&quot; &gt; &lt;generator class=&quot;native&quot;/&gt; &lt;/id&gt; &lt;!-- 建立类中的普通的属性和表的字段的对应 --&gt; &lt;property name=&quot;cust_name&quot; column=&quot;cust_name&quot; length=&quot;32&quot; /&gt; &lt;property name=&quot;cust_source&quot; column=&quot;cust_source&quot; length=&quot;32&quot;/&gt; &lt;property name=&quot;cust_industry&quot; column=&quot;cust_industry&quot;/&gt; &lt;property name=&quot;cust_level&quot; column=&quot;cust_level&quot;/&gt; &lt;property name=&quot;cust_phone&quot; column=&quot;cust_phone&quot;/&gt; &lt;property name=&quot;cust_mobile&quot; column=&quot;cust_mobile&quot;/&gt; &lt;/class&gt;&lt;/hibernate-mapping&gt; 创建一个 Hibernate 核心配置文件 Hibernate 核心配置文件的名称：hibernate.cfg.xml 1234567891011121314151617181920212223242526&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE hibernate-configuration PUBLIC &quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot; &quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;&gt;&lt;hibernate-configuration&gt; &lt;session-factory&gt; &lt;!-- 1. 连接数据库的基本参数 --&gt; &lt;property name=&quot;hibernate.connection.driver_class&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt; &lt;property name=&quot;hibernate.connection.url&quot;&gt;jdbc:mysql:///hibernate_day01&lt;/property&gt; &lt;property name=&quot;hibernate.connection.username&quot;&gt;root&lt;/property&gt; &lt;property name=&quot;hibernate.connection.password&quot;&gt;1&lt;/property&gt; &lt;!-- 配置Hibernate的方言 --&gt; &lt;property name=&quot;hibernate.dialect&quot;&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt; &lt;!-- 2. 可选配置 --&gt; &lt;!-- 打印SQL --&gt; &lt;property name=&quot;hibernate.show_sql&quot;&gt;true&lt;/property&gt; &lt;!-- 格式化SQL --&gt; &lt;property name=&quot;hibernate.format_sql&quot;&gt;true&lt;/property&gt; &lt;!-- 自动创建表 --&gt; &lt;property name=&quot;hibernate.hbm2ddl.auto&quot;&gt;update&lt;/property&gt; &lt;!-- 3. 导入映射文件 --&gt; &lt;mapping resource=&quot;com/test/hibernate/demo1/Customer.hbm.xml&quot; /&gt; &lt;/session-factory&gt;&lt;/hibernate-configuration&gt; 编写测试代码 保存客户 java 代码 123456789101112131415161718192021222324252627282930313233343536373839/** * Hibernate 的入门案例 * @author Tong * */import org.hibernate.Session;import org.hibernate.SessionFactory;import org.hibernate.Transaction;import org.hibernate.cfg.Configuration;import org.junit.Test;public class HibernateDemo1 &#123; @Test // 保存客户的案例 public void demo1() &#123; // 1.加载 Hibernate 核心配置文件 Configuration configuration = new Configuration().configure(); // 手动加载映射 //configuration.addResource("com/test/hibernate/demo1/Customer.hbm.xml"); // 2.创建一个 SessionFactory 对象，类似于 JDBC 的连接池 SessionFactory SessionFactory = configuration.buildSessionFactory(); // 3.通过 SessionFactory 对象获得一个 Session 对象，相当于 JDBC 中的 Connection Session session = SessionFactory.openSession(); // 4.手动开启事务 Transaction transaction = session.beginTransaction(); // 5.编写代码 Customer customer = new Customer(); customer.setCust_name("赵六"); session.save(customer); // 6.提交事务 transaction.commit(); // 7.释放资源 session.close(); &#125; &#125; 数据库表 Hibernate 的常见配置XML 提示配置 Hibernate 映射文件的配置 class 标签的配置 class 标签用来建立类与表的映射关系 常用属性： ​ name：类的全路径 ​ table：表名（类名与表名一致时，table 可以省略） id 标签的配置 id 标签用来建立类中属性与表中主键的对应关系 常用属性： ​ name：类中的属性名 ​ column：表中的字段名（类中的属性名与表中的字段名一致时，column 属性可以省略） ​ length：长度 ​ type：类型 property 标签的配置 property 标签用来建立类中的普通属性与表中字段的对应关系 常用属性： ​ name：类中的属性名 ​ column：表中的字段名 ​ length：长度 ​ type：类型 ​ not-null：设置非空 ​ unique：设置唯一 Hibernate 的核心配置 可以分为三部分 必须的配置 连接数据库的基本参数 驱动类、url 路径、用户名、密码 方言 可选的配置 显示 SQL：hibernate.show_sql 格式化 SQL：hibernate.format_sql 自动建表：hibernate.hbm2ddl.auto 取值 none：不使用 hibernate 的自动建表 ceate：如果数据库中有表，删除原有表，重新创建，如果没有表，则新建表 create-drop：如果数据库中有表，删除原有表新建表，执行操作后再删除表。如果没有表，则新建表，使用完后再删除该表 update：如果数据库中有表，使用原有表（update 会该表表结构），如果没有表，则创建新表 validate：如果数据库中没有表，不会创建表，如果有表，则会校验映射和表结构 映射文件的引入 引入映射文件的位置 1&lt;mapping resource=&quot;com/test/hibernate/demo1/Customer.hbm.xml&quot; /&gt; Hibernate 的核心 APIConfiguration Hibernate 的配置对象 作用 加载核心配置文件 1Configuration configuration = new Configuration().configure(); 可手动加载映射文件 1configuration.addResource("com/test/hibernate/demo1/Customer.hbm.xml"); SessionFactory Session 工厂，SessionFactory 内部维护了 Hibernate 的连接池和 Hibernate 的二级缓存，是线程安全的对象，其次一个项目创建一个对象即可。 配置连接池 1234567891011&lt;!-- 配置C3P0连接池 --&gt;&lt;property name=&quot;connection.provider_class&quot;&gt;org.hibernate.connection.C3P0ConnectionProvider&lt;/property&gt;&lt;!--在连接池中可用的数据库连接的最少数目 --&gt;&lt;property name=&quot;c3p0.min_size&quot;&gt;5&lt;/property&gt;&lt;!--在连接池中所有数据库连接的最大数目 --&gt;&lt;property name=&quot;c3p0.max_size&quot;&gt;20&lt;/property&gt;&lt;!--设定数据库连接的过期时间,以秒为单位,如果连接池中的某个数据库连接处于空闲状态的时间超过了timeout时间,就会从连接池中清除 --&gt;&lt;property name=&quot;c3p0.timeout&quot;&gt;120&lt;/property&gt;&lt;!--每3000秒检查所有连接池中的空闲连接 以秒为单位--&gt;&lt;property name=&quot;c3p0.idle_test_period&quot;&gt;3000&lt;/property&gt; 抽取 Hibernate 工具类，方便使用 123456789101112131415161718192021222324/** * Hibernate 的工具类 * @author Tong * */public class HibernateUtils &#123; // 创建 Configuration 对象 private final static Configuration cfg; // 创建 SessionFactory 对象 private final static SessionFactory sf; // 给两个变量赋值 static &#123; cfg = new Configuration().configure(); sf = cfg.buildSessionFactory(); &#125; // 对外提供公共的方法获得连接对象 public static Session openSession() &#123; return sf.openSession(); &#125; &#125; Session Session 代表的是 Hibernate 与数据库的连接对象，是与数据库交互的桥梁，不同于 HttpSession，它是线程不安全的，所以一般在局部使用。 Session 中的 API 保存方法 session.save(Object)返回值是一个Serializable id 12345678910111213141516@Test// 保存客户public void demo1() &#123; // 获得 Session 连接对象 Session session = HibernateUtils.openSession(); // 手动开启事务 Transaction transaction = session.beginTransaction(); // 编写代码 Customer customer = new Customer(); customer.setCust_name("张三"); session.save(customer); // 提交事务 transaction.commit(); // 释放资源 session.close();&#125; 查询方法 T get(Class c, Serializable id) T load(Class c, Serialzable id) get 方法和 load 方法的区别？ get 方法 get 方法是立即加载，当执行到 get() 方法这行代码时，会立即发送 SQL 语句去查询 查询之后是真实对象本身 当查询一个不存在的对象时，返回的结果是 null load 方法 load 方法是延时加载（懒加载），当执行到 load() 方法这行代码时，不会发送 SQL 语句去查询，直到调用该对象时才会发送 SQL 语句去查询 查询之后是通过第三方 javassist 技术处理的代理对象 当查询一个不存在的对象时，会抛出 ObjectNotFoundException 异常 1234567891011121314151617@Test// 查询客户public void demo2() &#123; Session session = HibernateUtils.openSession(); Transaction tx = session.beginTransaction(); // 使用 get 方法查询 Customer customer = session.get(Customer.class, 1L); System.out.println(customer); // 使用 load 方法查询 /*Customer customer = session.load(Customer.class, 2l); System.out.println(customer);*/ tx.commit(); session.close();&#125; 修改方法 void update(Object obj) 1234567891011121314151617181920@Test// 修改操作public void demo3() &#123; Session session = HibernateUtils.openSession(); Transaction tx = session.beginTransaction(); // 直接创建对象修改 /*Customer customer = new Customer(); customer.setCust_id(1l); customer.setCust_name("王五");; session.update(customer);*/ // 先查询，再修改(推荐) Customer customer = session.get(Customer.class, 1l); customer.setCust_name("赵六"); session.update(customer); tx.commit(); session.close();&#125; 删除方法 void delete(Object obj) 123456789101112131415161718@Test// 删除操作public void delete() &#123; Session session = HibernateUtils.openSession(); Transaction tx = session.beginTransaction(); // 创建对象直接删除 /*Customer customer = new Customer(); customer.setCust_id(2l); session.delete(customer);*/ // 先查询，再删除(推荐) -- 多表关系时可以实现级联删除 Customer customer = session.get(Customer.class, 3l); session.delete(customer); tx.commit(); session.close();&#125; 保存或更新 void saveOrUpdate(Object obj) 12345678910111213141516171819@Test// 保存或更新public void demo5() &#123; Session session = HibernateUtils.openSession(); Transaction tx = session.beginTransaction(); // 表中没有此数据，保存 /*Customer customer = new Customer(); customer.setCust_name("赵二"); session.saveOrUpdate(customer);*/ // 表中有此数据，更新 Customer customer = new Customer(); customer.setCust_id(2l); customer.setCust_name("天一"); session.saveOrUpdate(customer); tx.commit(); session.close();&#125; 查询所有 通过 HQL createQuery 和 SQL createSQLQuery 查询 1234567891011121314151617181920212223@Test// 查询所有public void demo6() &#123; Session session = HibernateUtils.openSession(); Transaction tx = session.beginTransaction(); // 接收 HQL，hibernate query language /*Query query = session.createQuery("from Customer"); List&lt;Customer&gt; list = query.list(); for (Customer customer : list) &#123; System.out.println(customer.toString()); &#125;*/ // 接收 SQL SQLQuery query = session.createSQLQuery("select * from cst_customer"); List&lt;Object[]&gt; list = query.list(); for (Object[] objects : list) &#123; // 对象数组以字符串形式打印输出 System.out.println(Arrays.toString(objects)); &#125; tx.commit(); session.close();&#125; Transaction 事务对象 常用 API commit():提交事务 rollback():回滚事务 学习目标通过以上知识的学习能够独立搭建 Hibernate 的开发环境完成 CRUD 操作即可。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Hibernate</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[my first blog]]></title>
    <url>%2Fmy-first-blog%2F</url>
    <content type="text"><![CDATA[This is my first blog.Hello, everyone! This is my first blog! java 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798/** * Hibernate 的其他 API * @author Tong * */public class HibernateDemo5 &#123; @Test // Query public void demo1() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 简单查询/查询所有 // 通过 Session 获得 Query 接口，HQL：hibernate query language /* String hql = "from Customer"; Query query = session.createQuery(hql);*/ // 条件查询 /*String hql = "from Customer where cust_name like ?"; Query query = session.createQuery(hql); // 设置条件 query.setParameter(0, "张%"); // 在 hibernate 中 0 代表第一个问号*/ // 分页查询 String hql = "from Customer"; Query query = session.createQuery(hql); // 设置分页 query.setFirstResult(0); // 从第一条数据开始 query.setMaxResults(3); // 每页显示 3 条数据 List&lt;Customer&gt; list = query.list(); for (Customer customer : list) &#123; System.out.println(customer); &#125; tx.commit(); &#125; @Test // Criteria public void demo2() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 通过 Session 获得 Criteria 接口 Criteria criteria = session.createCriteria(Customer.class); // 简单查询/查询所有 // List&lt;Customer&gt; list = criteria.list(); // 条件查询 /*criteria.add(Restrictions.like("cust_name", "张", MatchMode.START)); // 匹配名字开头是张的数据 List&lt;Customer&gt; list = criteria.list();*/ // 分页查询 criteria.setFirstResult(3); criteria.setMaxResults(3); List&lt;Customer&gt; list = criteria.list(); for (Customer customer : list) &#123; System.out.println(customer); &#125; tx.commit(); &#125; @Test // SQLQuery public void demo3() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 简单查询/查询所有 /*String sql = "select * from cst_customer"; SQLQuery query = session.createSQLQuery(sql);*/ // 条件查询 /*String sql = "select * from cst_customer where cust_name=?"; SQLQuery query = session.createSQLQuery(sql); // 设置条件 query.setParameter(0, "哈哈");*/ // 分页查询 String sql = "select * from cst_customer limit ?, ?"; SQLQuery query = session.createSQLQuery(sql); // 设置分页 query.setParameter(0, 3); query.setParameter(1, 3); List&lt;Object[]&gt; list = query.list(); for (Object[] objects : list) &#123; System.out.println(Arrays.toString(objects)); &#125; tx.commit(); &#125; &#125;]]></content>
  </entry>
</search>
